<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[记录下多年未更新博客的后遗症]]></title>
      <url>https://ephen.me/2022/blog-sequela/</url>
      <content type="html"><![CDATA[<p>朋友网站换链接了，到 <a href="https://telegram.me/imephen" target="_blank" rel="noopener">Telegram</a> 上提醒我更新下友链。本以为不就是改个链接嘛，没想到问题接踵而至。果然太长时间没动过的东西，没有想象中那么简单。</p>
<p>本次更新发现的主要后遗症列表：</p>
<ol>
<li>多个朋友发生域名更换及闭站或撤链；</li>
<li>hexo &amp; git 命令都忘了怎么用；</li>
<li>Coding Pages 服务已关闭；</li>
<li>hexo generate 生成空文件，造成网页白屏；</li>
<li>博客头像、标签、菜单和分类均加载失败；</li>
</ol>
<p>以下详述。</p>
<a id="more"></a>
<h2 id="友链更新"><a href="#友链更新" class="headerlink" title="友链更新"></a>友链更新</h2><p>一个个的检查现有友链后，将能找到私下联系方式的朋友确认换域名、闭站及撤链情况，将友链都更新好。有些找不到联系方式的朋友，我就直接撤链了。</p>
<p>因此事实证明，友链这东西，一定要<strong>先友后链</strong>，否则自己是怎么被撤链的都不知道。</p>
<h2 id="部署问题"><a href="#部署问题" class="headerlink" title="部署问题"></a>部署问题</h2><p>如前文《<a href="/2016/hello-hexo/">全新出发，正式启用Hexo！</a>》所述，我原本是启用了个人云主机、Github Page 和 Coding Page 多点部署的。</p>
<p>这次更新完友链后，直接执行 <code>hexo g</code> 和 <code>hexo d</code> 准备发布，发现 Coding 出现报错。去搜索了下，才发现我曾经收到过如下邮件：</p>
<p><img src="https://imephen.pek3b.qingstor.com/20220216150100.png" alt="Coding Page 服务关闭"></p>
<p>于是屏蔽掉 Coding deploy 配置，重新执行 <code>hexo d</code> ，发现 Github 提示 <code>nothing commit</code> 。度娘了下，<strong>删除掉 <code>.deploy_git</code> 文件夹后解决</strong>。想来可能是因为我换电脑本地数据迁移时未验证迁移配置的缘故吧~</p>
<p>接着，上云主机运行同步脚本，发现 git 报认证错误。于是<strong>重新执行 <code>ssh-keygen -t rsa -C &quot;github账号邮箱&quot;</code> 生成ssh密钥后添加到 Github Settings –&gt; SSH and GPG Keys 页面</strong>。再次运行脚本后成功。</p>
<p>最后，上域名服务商删掉使用 Coding Page 的分区解析。</p>
<h2 id="网页白屏修复"><a href="#网页白屏修复" class="headerlink" title="网页白屏修复"></a>网页白屏修复</h2><p>本以为做完以上操作一切就绪，当我洋洋得意打开我的博客网站时，居然是一片白。本地执行 <code>hexo s</code> 发现又可以正常显示，这让我一个头两个大。。</p>
<p>去检查云主机发现，上面的文件都是 0KB ，内容全部为空；接着去 GitHub 上看，文件也是空的；最后才发现本地 <code>/public</code> 目录下的文件居然也是空的！</p>
<p>那么应该是 <code>hexo generate</code> 命令的问题了，又执行了一遍 <code>hexo clean</code> 和 <code>hexo generate</code> 后确认。于是再次求助度娘，原来是本地 hexo 版本和 node 版本不匹配（hexo 版本低了，node 版本高了）。</p>
<p>于是，<strong>升级 hexo</strong> ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p><strong>降级 node</strong> ：登录 <a href="https://nodejs.org/en/download/releases/" target="_blank" rel="noopener">node.js 官网历史版本下载页</a>找到一个 12.x 的版本（我下载的版本是 12.22.10）下载下来，卸载掉本地已安装的 node 后重新安装该版本，然后重新启动。</p>
<p>再次 <code>hexo clean</code> 后 <code>hexo generate</code> ，<code>/public</code> 目录下的文件已有内容了。</p>
<p>重新执行 <code>hexo d</code> 成功发布到 Github Page 。到云主机执行脚本时，却一直提示 <code>Already up-to-date</code> ，真是见鬼了。淦！</p>
<p>直接 <strong><code>rm -rf .</code> 删除掉同步目录，执行 <code>git clone git@github.com:ephen/ephen.github.io.git .</code> 将所有文件重新生成到当前目录</strong>后解决。</p>
<h2 id="网页-JS-修复"><a href="#网页-JS-修复" class="headerlink" title="网页 JS 修复"></a>网页 JS 修复</h2><p>长吁一口气后再去“欣赏”网站，却怎么也找不到自己的友链入口。仔细一看，头像、标签、分类全都消失了。折腾到此，午饭都没有吃，真是欲哭无泪！</p>
<p>沉下心来 F12 看看报错，第一个报错如下：</p>
<p><img src="https://imephen.pek3b.qingstor.com/20220216155418.jpg" alt="require,jquery 调用出错"></p>
<p>看到是引用的文件 CDN 缓存路径出错后，<strong>找到官方路径和代码引用位置进行替换</strong>后解决。</p>
<p>再次打开网站，终于折腾完毕，其他的报错暂且也不想再看了。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>太久不更新，问题就是多多呀。</p>
<p>主要是最近几年真的发生了太多事，精力实在有限。要不是有个什么契机，其实也是不想再去折腾了。<del>毕竟我连常用指令都需要去找度娘解决，还有什么用呢？</del></p>
<p>这里我只是记录下折腾过程，免得日后什么时候弄起来遇到相同问题又要找度娘。</p>
<p>另外提醒下大家，千万不要学我“暴力 rm”、“未经确认就发布”等行为，一定要养成好习惯哟！~</p>
]]></content>
      
        <categories>
            
            <category> 博客折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> node </tag>
            
            <tag> git </tag>
            
            <tag> jquery </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bind 9.12 stable 版 dig 工具有问题，请更新或回退！（附 Windows dig 安装方法）]]></title>
      <url>https://ephen.me/2019/bind9-12-dig/</url>
      <content type="html"><![CDATA[<blockquote>
<p>查看安装方法请直接跳转至：<a href="/2019/bind9-12-dig/#Windows-上如何安装-dig-工具？">Windows 上如何安装 dig 工具？</a></p>
</blockquote>
<p>前段时间又开始捣鼓网络 &amp; DNS 了，于是去 <a href="https://www.isc.org/downloads/" target="_blank" rel="noopener"> Bind9 官方 </a> 去下载了一个最新稳定版 Windows 环境的 Bind 。</p>
<p>当时 Bind 9.14.1 还未正式发布为稳定版，所以我下载的版本是 9.12.3-P1 。下载完成后，安装到我的本地 PC 上。</p>
<p>随后我在<strong>使用这个版本的 dig 时，只要不指定 DNS 服务器就没有返回，每次使用该工具时必须指定 DNS 服务器。</strong></p>
<p><img src="https://imephen.pek3b.qingstor.com/digproblem.jpg" alt=" dig 12 版本有问题 "></p>
<a id="more"></a>
<p>起初我以为是公司办公网络环境自动获取设置的本地 DNS 地址有问题，看也能使用就没怎么放在心上。</p>
<p>刚刚又在使用时，我突然想好好查看一番。Google 了一圈没有搜到结果。于是只好自己查问题了啵。</p>
<p><strong>网络抓包并没有抓到任何 DNS 请求！</strong></p>
<p><img src="https://pek3b.qingstor.com/imephen/capture.jpg" alt=" 抓包没有 dns 请求 "></p>
<p>换 DNS 配置、换手机热点做网络环境的一番折腾，依然还是这样！开始决定要不换个旧点的版本试试。</p>
<p>重新下载版本 bind 9.11.6-P1 安装后，没问题了鸭！</p>
<p><img src="https://pek3b.qingstor.com/imephen/versionchange.jpg" alt=" dig 9.11.6-P1 版没问题 "></p>
<p>真是喜极而泣。</p>
<p>下载了目前最新稳定版 bind 9.14.1 又试了下，也没有问题。</p>
<p><img src="https://pek3b.qingstor.com/imephen/dig914.jpg" alt=" dig 9.14.1 版没问题 "></p>
<p><strong>如果你和我一样正在使用 dig 9.12.3-p1 版，为不影响使用，记得将软件升级或回退哦。</strong></p>
<h2 id="Windows-上如何安装-dig-工具？"><a href="#Windows-上如何安装-dig-工具？" class="headerlink" title="Windows 上如何安装 dig 工具？"></a>Windows 上如何安装 dig 工具？</h2><p>最简单的方法，到官网下载相应版本 Bind 后，解压。</p>
<p><img src="https://pek3b.qingstor.com/imephen/binddir.jpg" alt=" Bind 源程序解压 "></p>
<p>使用管理员运行 <code>BINDInstall.exe</code> ，指定本地安装目录。</p>
<p>如果只想安装 dig ，安装选项选择 <code>Tools Only</code> 即可。如下图所示：</p>
<p><img src="https://pek3b.qingstor.com/imephen/bindinstall.jpg" alt=" 安装 dig "></p>
<p>是不是很简单鸭~</p>
<p>不太记得是不是需要自己加下环境变量，要是小伙伴<strong>安装后不能像我一样直接在 CMD 里不指定目录使用 dig ，那就需要添加下 PATH 。</strong></p>
<p><img src="https://pek3b.qingstor.com/imephen/paths.jpg" alt=" 添加环境变量 "></p>
<p>我个人的环境变量有些多，涂画得乱起八糟，请勿见怪。</p>
<p>虽说这种安装方法不够绿色，不过这是最快且最好上手的方式了。</p>
<p>想要绿色一点，就需要自己把 dig 程序和其应用的 DLL 库都收集起来放到一个文件夹里，然后再将此文件夹添加到 PATH 即可。</p>
]]></content>
      
        <categories>
            
            <category> 工具介绍 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> bind </tag>
            
            <tag> dig </tag>
            
            <tag> Windows </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[首汽瑞卡便利租车怎么样？辣鸡霸王条款霸气客服气哭灰姑娘！]]></title>
      <url>https://ephen.me/2019/laji-reocar/</url>
      <content type="html"><![CDATA[<p>如今互联网时代，已经变成了一个服务至上的时代。每个人口袋里都揣着一点小钱，购买物品时贵点便宜点已不再那么重要。</p>
<p>总的来说，服务态度第一，趣味性第二，价值较高的东西再考虑下性价比。如果我花点儿小钱，能买来当爷的感受，那还真真是极好的。</p>
<p>但是有些公司，花钱买的是罪受。熟悉灰姑娘的朋友都知道，佛性、随缘、细节，基本就是贯穿日常生活和工作的关键词。可是这么一家公司，生生的把这样的灰姑娘给气哭了！</p>
<p>路过的小伙伴，如果你不想花钱买罪受，记住这家公司的名字：<strong>瑞卡租车</strong>  <strong>瑞卡便利租车</strong>  <strong>首汽集团</strong>  <strong>Reocar</strong>  <strong>Reocar888</strong></p>
<p>到底发森了什么？且听我娓娓道来。</p>
<a id="more"></a>
<h2 id="选择瑞卡下订单"><a href="#选择瑞卡下订单" class="headerlink" title="选择瑞卡下订单"></a>选择瑞卡下订单</h2><p>灰姑娘老家离武汉近事情多，又想远离养车的麻烦，自从申领驾照后日常租车出行已作为周末首选。作为一只好奇心强喜欢体验各种产品的产品汪，在薅完滴滴羊毛、神州租车、一嗨租车以及各种分时租车 P2P 租车体验过后，上网搜索新目标的种子已种下。</p>
<p>于是瑞卡便利租车 APP 便于 2018 年 11 月 安装到了手机中，尽管当时因送了 0 元首租优惠券第一印象还行，然而一直没有使用。</p>
<p>原因：</p>
<ol>
<li>因我租车比较多，各种问题也遇到过，因而不习惯买不计免赔，而瑞卡租车的优惠券必须搭配驾无忧不计免赔使用，价格贵且操作起来比较复杂；</li>
<li>App 的操作 bug 有些多，不够清真，想看看瑞卡对于互联网功能及 bug 的更新速度能否让人满意；</li>
<li>价格不仅没有优势，哪怕是用完优惠券与其他租车相比也反而较贵（当然有一说一，其他家是没有勾选不计免赔的价了）；</li>
</ol>
<p>接下来的这几个月间，中间都有过几次租车，也顺便去看看这个 App ，App 有过一次更新，bug 也修复了。中间有次注意到新人优惠券时间限制是到 2019-3-20 ，就想着啥时候体验一把。</p>
<p>也就是 3 月 20 日这天，我们做了清明节出行的计划，我打开瑞卡租车 App ，神奇的发现新人优惠券延期到了 2019-7-20 ，瞬间好感倍增，当即就在瑞卡下了订单！</p>
<p>然而，噩梦才刚刚开始。</p>
<h3 id="新人优惠券根本就是摆设"><a href="#新人优惠券根本就是摆设" class="headerlink" title="新人优惠券根本就是摆设"></a>新人优惠券根本就是摆设</h3><p>瑞卡租车的规定颇多，节假日不能用优惠券，优惠券的使用必须绑定驾无忧不计免赔。</p>
<p>综合考虑后，觉得这种优惠券不使用也罢，权当那个公司的高超运营手段一笑而过。都是成年人，懂。</p>
<h3 id="节假日时间瑞卡说了算"><a href="#节假日时间瑞卡说了算" class="headerlink" title="节假日时间瑞卡说了算"></a>节假日时间瑞卡说了算</h3><p>其他租车软件，遇到节假日也会涨价，也就涨价不定义原因，大家都懂的。</p>
<p>瑞卡租车，用大大的红字在日期上标明“清明节”，国家法定假日 3 天，它标了 6 天。</p>
<p>拖动时间表，可以看到，任何节假日，在瑞卡租车 App 上，时间几乎都会比法定假日多出一倍。</p>
<p>你们这么定义节日，国家知道吗？</p>
<hr>
<p>不过这两点无所谓了，反正 App 上看着很明显，不按规则出牌操作过不去、订单也下不了。</p>
<h2 id="退改风波"><a href="#退改风波" class="headerlink" title="退改风波"></a>退改风波</h2><p>针对前面瑞卡租车的运营尿性，我在支付订单的时候特意看过退改规则。记得说是取车时间前 6 小时可退（只怪我没截图），于是记住这个时间安心付款。</p>
<p>恰逢三天前因一些事儿导致行程有变准备改到本周末，于是我打开 App 准备修改订单。（这时候 App 又有更新了，看起来状态还挺让人满意）</p>
<p>发现没有修改入口（页面上只有“取消”按钮），对这种公司的互联网体验我一向没有过多的要求，想想反正能取消就重新下了一个今天晚上的订单。</p>
<p>再去点“取消”就特么傻眼了。</p>
<h3 id="取消订单需联系客服"><a href="#取消订单需联系客服" class="headerlink" title="取消订单需联系客服"></a>取消订单需联系客服</h3><p>点了“取消”按钮后，文字提示清明节订单需电话联系客服。由于当时已是晚上 11 点多，尽管我还赶在加班回家的路上，但我依然考虑到别人客服也需要休息，取消订单也不是什么很紧急的事儿我还有时间，电话就没有拨。</p>
<p>昨天第一次拨了瑞卡租车的客服电话，本以为是一件简单的取消订单的事儿而且我提前了这么久，哪知道还有新的幺蛾子？</p>
<h3 id="节假日订单取消需要收取违约金"><a href="#节假日订单取消需要收取违约金" class="headerlink" title="节假日订单取消需要收取违约金"></a>节假日订单取消需要收取违约金</h3><p>客服：<code>节假日订单提前 3 天取消需要收取 30% 的违约金，这是合同规定，您在支付前我们有提醒的。</code></p>
<p>我：<code>我记得支付前说的是提前 6 小时可以免费取消，而且我现在在订单的退改规则中并没有看到这项规定，对于这个合同条款我不知情。</code></p>
<h3 id="你不信现在下个清明节订单看看？"><a href="#你不信现在下个清明节订单看看？" class="headerlink" title="你不信现在下个清明节订单看看？"></a>你不信现在下个清明节订单看看？</h3><p>客服抢答：<code>你不信现在下个清明节订单看看？</code></p>
<p>抢答得快，现在看来其实是早就预演好了的。当时还傻傻的去跟她理论：<code>我刚刚打开 App 发现有升级，现在下的订单不能代表当时的标准。</code></p>
<p>并且还期望有好的结果：<code>而且我是第一次使用贵司产品的新客户，您看看可否通融一下？</code></p>
<p>客服：<code>好的，您的问题我已为您记录。请保持通讯畅通，我们将在 48 小时内回复您。</code></p>
<h3 id="真的需要等-48-小时的！"><a href="#真的需要等-48-小时的！" class="headerlink" title="真的需要等 48 小时的！"></a>真的需要等 48 小时的！</h3><p>我自己也做过运营，也接触过别的客服团队，48 小时当然往往是己方最低处理限度的说辞嘛，一般也就十几二十分钟就能联系客户。</p>
<p>然而，我左等右等没有回音，一直等到 25 小时后的今天中午，我实在有点儿生气，又给他们客服去了电话。</p>
<p>客服：<code>您再等 48 小时好吗？</code></p>
<p>我终于火了，说：<code>我昨天反馈的，为何还要等 48 小时？你最好 1 小时之内给我回复处理结果，我今天晚上有一个订单，没有满意的处理结果我就把两个订单都取消掉。</code></p>
<p>客服就说他们的处理时限就是 48 小时的，只能尽快，要我保持耐心。</p>
<p>我问我等过了 48 小时今天的订单是不是就不能免费退了，客服回复普通订单提前 2 小时可以免费取消。我怒气冲冲的让他们 1 小时之内给我答复便挂了电话。</p>
<h2 id="灰姑娘终于被气哭了"><a href="#灰姑娘终于被气哭了" class="headerlink" title="灰姑娘终于被气哭了"></a>灰姑娘终于被气哭了</h2><p>等了 20 分钟，仍然没有瑞卡租车的电话回访，于是再次电话催。</p>
<h3 id="您打过电话吗？"><a href="#您打过电话吗？" class="headerlink" title="您打过电话吗？"></a>您打过电话吗？</h3><p>上来就报一通资料姓名，问其上报处理结果怎么样了，怎么还没有电话回访。</p>
<p>客服比我还无辜的声音传来：<code>您什么时候打的电话？您打过电话吗？</code></p>
<h3 id="修改订单多不退少要补"><a href="#修改订单多不退少要补" class="headerlink" title="修改订单多不退少要补"></a>修改订单多不退少要补</h3><p>我再次报一通资料姓名，完完整整的复述一遍之前讲过的内容，并且告知她我原意只是修改订单而瑞卡不支持修改，第一次使用它们的产品并且没有看到任何合同条款。</p>
<p>客服：<code>那您应该让我们帮您修改订单呀？</code></p>
<p>我：<code>那你给我把今天的订单取消，把清明节的订单修改到今天晚上。</code></p>
<p>客服：<code>好的。我们修改订单是不退还差价的，您确认要这么操作吗？</code></p>
<p>我：<code>那我普通订单修改到节假日，要不要补差价？</code></p>
<p>客服：<code>要的。</code></p>
<h3 id="要打-12315-请自便"><a href="#要打-12315-请自便" class="headerlink" title="要打 12315 请自便"></a>要打 12315 请自便</h3><p>此刻我真的气炸了，说他侵犯消费者知情权，要打 12315 投诉他们。</p>
<p>客服小姐姐温柔的声音传来：<code>这个是您的权益的。</code> 并且主动挂断了电话。</p>
<p>眼泪夺眶而出，哪有这么欺负人的。</p>
<p>情绪已非常不稳定，再次给他们去了电话，质问他们为何要挂我电话，对方又开始装傻。</p>
<hr>
<p>老公看我泪眼汪汪，他安慰我不要急躁，听他怎么跟对方好好沟通。</p>
<p>然后他给对方客服打了一通电话，也被气得不行，挂了电话就跟我说：<code>两个订单都取消了吧，赶紧上神州租车订，亏点就亏点。</code></p>
<p>我再次电话瑞卡租车客服让取消我的两个订单，除了告知要收取 30% 的违约金外，没有问任何原因。</p>
<p>挂了电话，我甚至觉得对方的语气中似乎还透露着一丝开心？</p>
<p>现在回头想想也真是，他们那么复杂的节假日订单及优惠券运营规则都自助服务了，怎么会在“修改”和“取消”上不做点文章呢？</p>
<h2 id="附：租车服务推荐排序"><a href="#附：租车服务推荐排序" class="headerlink" title="附：租车服务推荐排序"></a>附：租车服务推荐排序</h2><ol>
<li><strong>怀念的滴滴租车</strong>：车辆都很新，默认配有倒车雷达、手机支架及 USB 充电器，员工服务态度非常好，价格也便宜（我秒过很多次 9 元租车），除了需要赔偿时价格过高，其他全方位都挺好。可惜业务下架了，其实还是透露出一些运营策略上的问题，如果能学到辣鸡瑞卡的一半，应该还不至于死。</li>
<li><strong>一嗨租车</strong>：租车行业里面坚挺多年了，日常活动很多优惠也多，价格会一直随时间波动（节假日几乎指数级波动），时间把握得好会是最便宜的，官方客服态度不错。需要赔偿时定价也高但 App、合同及门店都有醒目的位置提示，取车服务态度看门店看人，有次租车有些小剐蹭我们主动跟验车人员说了都没让赔。</li>
<li><strong>神州租车</strong>：客服以及取车服务态度都非常好，只是车经常会比较旧。有次小剐蹭我们没说，验车人员应该是看见了停留了蛮久但是也没说什么。日常大多数价格会比一嗨贵一点，偶尔会便宜一些，整体来说差不多。</li>
</ol>
<hr>
<p>辣鸡瑞卡，吃枣药丸！ 12315 有没有用也要走起。</p>
<p>且看你还能骗取几个新人违约金。</p>
<p>那些交了什么轻松租会员押金的傻子们，等你找他们退押金的时候怕不是要哭死你。</p>
<p>诅咒这公司明年过个愉快的清明节，到时候知情的小伙伴记得通知我去烧纸。</p>
<p>再次告诫路过的小伙伴，如果你不想花钱买罪受，记住这家公司的名字：<strong>瑞卡租车</strong>  <strong>瑞卡便利租车</strong>  <strong>首汽集团</strong>  <strong>Reocar</strong>  <strong>Reocar888</strong></p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 首汽 </tag>
            
            <tag> Reocar </tag>
            
            <tag> 瑞卡 </tag>
            
            <tag> 租车 </tag>
            
            <tag> 霸王条款 </tag>
            
            <tag> 霸气客服 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[又来折腾博客了]]></title>
      <url>https://ephen.me/2019/blog-update/</url>
      <content type="html"><![CDATA[<p>博客好久没有更新了，难得妇女节放半天假有个好心情。</p>
<p>本次更新点：</p>
<ol>
<li>修改 favicon 图标；</li>
<li>增加原创版权声明；</li>
<li>增加支付宝&amp;微信打赏码；</li>
<li>部分样式调整；</li>
</ol>
<p>其实都是一些比较小的更新，原本也没有什么好值得一提的，主要就聊聊相关的改造想法吧。</p>
<a id="more"></a>
<h2 id="修改-favicon-图标"><a href="#修改-favicon-图标" class="headerlink" title="修改 favicon 图标"></a>修改 favicon 图标</h2><p>过去我的 Favicon 其实是用 CloudXNS 的产品 Logo 微调了下颜色而来，有些小伙伴表示并看不出什么差别。</p>
<p>转眼间，我已离开世纪互联快一年了，现在依然用着这个 Logo 还真的是不太合适。就考虑重新设计，并顺便了解下射击师的日常。</p>
<p>刚好捉到一来武汉出差的美女射击师，让她先教我画这个简单的风车。掌握到方法后，我又画了各种各样的风车。也尝试画了一些别的图案，并挑选了一些我觉得画得还行的一个个应用到本地博客上试。最终选了现在用的这个，跟之前的差别没有太大，但还是能明显看得到差别。</p>
<p><img src="https://imephen.pek3b.qingstor.com/favicons_test.jpg" alt="blog favicon"></p>
<p><strong>立个 Flag ：<del>以后每年都换一次自己设计的 Favicon</del> （请假装没看见……</strong></p>
<h3 id="一点感悟"><a href="#一点感悟" class="headerlink" title="一点感悟"></a>一点感悟</h3><p>设计真的是需要有丰富的想象力和创意的事情，当看到成果的时候所有前期的焦头烂额都觉得值得，很容易带来成就感和满足感；而它又是一个特别容易让人陷入细节的事情，哪怕是一个像素的差异都会耿耿于怀非要修正不可，也容易让人迷失方向忘记初衷。</p>
<h2 id="原创版权声明"><a href="#原创版权声明" class="headerlink" title="原创版权声明"></a>原创版权声明</h2><p>本博勉强称之为原创技术博吧，过去我没有加过版权声明。之前有些文章是同时在老东家当作官方技术博文来发的，被转载的不少，并且也不太好去要求那些地方加上转载来源。现在，我打算日后首发原创就来自这里，并声明一下版权。还望路过的有转载 or 改编意图的小伙伴，别忘了附上我的原文地址。</p>
<p>不过现在越来越懒得写技术博文了，工作生活繁忙又没啥动力。哎……（我差不多是一只废喵了。</p>
<h2 id="请赐予我动力"><a href="#请赐予我动力" class="headerlink" title="请赐予我动力"></a>请赐予我动力</h2><p>我是个乐意传授知识的人。这破博虽没什么流量，但隔三岔五收到邮件或 Telegram 消息咨询问题的也不少，我都有一一认真回答。</p>
<p>其实想写的主题有不少，我的博客 to do list 上都排着呢。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426145923.png" alt=" ToDoList "></p>
<p>当然，这个列表排了好几个月了，很有可能有些东西都过时了，最终也不一定兑现发布。</p>
<p>这次博客更新，我在每篇原创博文下都有提供支付宝和微信二维码，路过的小伙伴随意打赏以赐予我更新的动力吧。（请不要说我的码太丑，我可是花了好多心思来设计的呢！<del>这下本灰灰的审美问题已众所周知</del></p>
<h3 id="O-∩-∩-O"><a href="#O-∩-∩-O" class="headerlink" title="O(∩_∩)O"></a>O(∩_∩)O</h3><p>其实靠打赏来维持写作动力只是个玩笑辣，写不写、怎么写更多的还是看我自己。哪怕是没有打赏，问我的问题依然会一如既往的认真回复，如果能得到支持当然是更开心咯。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>略微改了下主题里面的内容分割、二级标题、三级标题、引用、代码块等样式。（一切都是因我的渣审美在作祟。</p>
<p>也没有什么好需要特别说明的。</p>
<p>为了摆“原创声明”和“赞赏二维码”花了好几天捣鼓也没有搞定，最后也是在公司抓了只前端大神几分钟就给我搞定了。得出结论：<code>果然代码开发是个吃经验的工种，速成彻底宣告失败。</code></p>
<p><strong>像我这种干啥都三分钟热度的人，真的很需要有人在后边鞭笞我。</strong></p>
]]></content>
      
        <categories>
            
            <category> 博客折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 版权 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闲聊 DNS 系统中域名的格式标准：下划线“_”是被允许的吗？]]></title>
      <url>https://ephen.me/2019/zone-format/</url>
      <content type="html"><![CDATA[<p>朋友最近在做解析配置的时候遇到问题，因 gitlab 域名所有权验证时提供的 host 是 <code>_gitlab-pages-verification-code</code> 被解析商认为域名不符合标准而拒绝填写，便来与我讨论：<strong>域名的格式标准是什么？到底是否可以有下划线呢？</strong></p>
<p>虽说没事去研究<code>“茴”字有几种写法</code>着实有些多此一举，不过偶尔在做些研究时带点儿孔乙己精神还是挺好玩的一件事儿。</p>
<p>其实关于下划线的争议，我估计也不是一天两天了。国内外一些解析商的标准都是各有不同，而一些需要配置域名解析的商家提供的要求也是五花八门。比如最常见的邮件服务提供商，它们的 MX、SPF、DomainKey 等要求非专业人员要弄懂得费可大的力气。</p>
<p>今天灰姑娘就来从标准规范中剖析闲聊域名格式标准的那些事。</p>
<a id="more"></a>
<p><strong>想直接看结论的童鞋可直接点击左侧文章目录跳转。</strong></p>
<h2 id="RFC-1034-amp-RFC-1035"><a href="#RFC-1034-amp-RFC-1035" class="headerlink" title="RFC-1034 &amp; RFC-1035"></a>RFC-1034 &amp; RFC-1035</h2><p><a href="https://tools.ietf.org/html/rfc1034" target="_blank" rel="noopener">RFC 1034</a> 和 <a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a> 是专门讲 DNS 以及域名基础的标准，业内也常常将这两篇拿出来分析和培训。</p>
<p>关于域名的格式，这两篇中有内容相同的段落来具体描述，RFC-1034 的 3.5 章节和 RFC-1035 的 2.3.1 章节。以下摘取自 RFC-1034 ：</p>
<blockquote>
<p>3.5. Preferred name syntax</p>
<p>The DNS specifications attempt to be as general as possible in the rules for constructing domain names.  The idea is that the name of any existing object can be expressed as a domain name with minimal changes. However, when assigning a domain name for an object, the prudent user will select a name which satisfies both the rules of the domain system and any existing rules for the object, whether these rules are published or implied by existing programs.</p>
<p>For example, when naming a mail domain, the user should satisfy both the rules of this memo and those in RFC-822.  When creating a new host name, the old rules for HOSTS.TXT should be followed.  This avoids problems when old software is converted to use domain names.</p>
<p>The following syntax will result in fewer problems with many applications that use domain names (e.g., mail, TELNET).</p>
<p><code>&lt;domain&gt; ::= &lt;subdomain&gt; | &quot; &quot;</code><br><code>&lt;subdomain&gt; ::= &lt;label&gt; | &lt;subdomain&gt; &quot;.&quot; &lt;label&gt;</code><br><code>&lt;label&gt; ::= &lt;letter&gt; [ [ &lt;ldh-str&gt; ] &lt;let-dig&gt; ]</code><br><code>&lt;ldh-str&gt; ::= &lt;let-dig-hyp&gt; | &lt;let-dig-hyp&gt; &lt;ldh-str&gt;</code><br><code>&lt;let-dig-hyp&gt; ::= &lt;let-dig&gt; | &quot;-&quot;</code><br><code>&lt;let-dig&gt; ::= &lt;letter&gt; | &lt;digit&gt;</code><br><code>&lt;letter&gt; ::= any one of the 52 alphabetic characters A through Z in upper case and a through z in lower case</code><br><code>&lt;digit&gt; ::= any one of the ten digits 0 through 9</code></p>
<p>Note that while upper and lower case letters are allowed in domain names, no significance is attached to the case.  That is, two names with the same spelling but different case are to be treated as if identical.</p>
<p><strong>The labels must follow the rules for ARPANET host names.  They must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen.  There are also some restrictions on the length.  Labels must be 63 characters or less.</strong></p>
<p>For example, the following strings identify hosts in the Internet:</p>
<p><code>A.ISI.EDU  XX.LCS.MIT.EDU  SRI-NIC.ARPA</code></p>
</blockquote>
<p>上面加粗的这一段，便明确指出 <strong>“域名要遵循 ARPANET 的主机名格式：必须以字母开头、以字母或者数字结尾，中间部分为字母、数字或连字符，长度必须是 63 个字符或者更短。”</strong></p>
<p>从这里，我们可以看出，下划线“_”是不被允许的，无论它在什么位置。但有意思的是，从这描述上来看，数字竟然也是不允许放在开头的！</p>
<p>我们知道，在做反向域名解析的时候，需要指定的 IP 除了最后的<code>in-addr.arpa</code>和<code>ip6.arpa</code>前面就都是纯数字。所以，会不会是这个标准有什么问题呢？</p>
<h3 id="学会查阅-RFC"><a href="#学会查阅-RFC" class="headerlink" title="学会查阅 RFC"></a>学会查阅 RFC</h3><p>这里顺便提一下，我们通常在查阅 RFC 的时候，多是关注该文档的内容，但其实也要关注下文档的发布信息。</p>
<p>以下是 RFC-1034 的发布信息：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426150600.png" alt=" rfc1034 comment "></p>
<p>它明确的表明了这份标准：</p>
<ol>
<li>发布于 1987 年 11 月，是因特网标准。</li>
<li>存在勘误，RFC 1101, 1183, 1348, 1876, 1982, 2065, 2181, 2308, 2535, 4033, 4034, 4035, 4343, 4035, 4592, 5936, 8020, 8482 对本标准有所更新。</li>
<li>淘汰了 882, 883, 973 这三个 RFC 标准。</li>
</ol>
<p>顶上的链接除了提供各种格式的查看方式外，还有文档跟踪及勘误表。我们可以去勘误表里面查查看都有哪些问题，而后去更新的文档里面找找还有没有我们需要的内容。</p>
<h2 id="数字能否放到开头？"><a href="#数字能否放到开头？" class="headerlink" title="数字能否放到开头？"></a>数字能否放到开头？</h2><p>通过查阅勘误表，大致也就能发现几个英文拼写或语法错误。通过追踪接下来的更新标准，我找到了前面关于反向域名的格式疑惑。</p>
<p>以下节选自<a href="https://tools.ietf.org/html/rfc1101" target="_blank" rel="noopener"> RFC 1101 </a>：</p>
<blockquote>
<p>3.1. Network name syntax</p>
<p>The current syntax for network names, as defined by [RFC 952] is an alphanumeric string of up to 24 characters, which begins with an alpha, and may include “.” and “-“ except as first and last characters.  This is the format which was also used for host names before the DNS.  Upward compatibility with existing names might be a goal of any new scheme.</p>
<p>However, the present syntax has been used to define a flat name space, and hence would prohibit the same distributed name allocation method used for host names.  There is some sentiment for allowing the NIC to continue to allocate and regulate network names, much as it allocates numbers, but the majority opinion favors local control of network names.  Although it would be possible to provide a flat space or a name space in which, for example, the last label of a domain name captured the old-style network name, any such approach would add complexity to the method and create different rules for network names and host names.</p>
<p>For these reasons, we assume that the syntax of network names will be the same as the expanded syntax for host names permitted in [HR]. <strong>The new syntax expands the set of names to allow leading digits, so long as the resulting representations do not conflict with IP addresses in decimal octet form.</strong>  For example, <code>3Com.COM</code> and <code>3M.COM</code> are now legal, although <code>26.0.0.73.COM</code> is not.  See [HR] for details.</p>
</blockquote>
<p>还是注意加粗的这段话，它表明：<strong>新的语法标准允许以数字开头，但结果不能与十进制八位字节形式的 IP 地址冲突。</strong></p>
<p>更多信息大家可以自行去查看，最终 RFC-1101 定义了基于网络名称的 DNS 编码规范。</p>
<p>那么，网易家的<code>163.com</code>也合法了。</p>
<h2 id="下划线“-”到底能不能允许存在呢？"><a href="#下划线“-”到底能不能允许存在呢？" class="headerlink" title="下划线“_”到底能不能允许存在呢？"></a>下划线“_”到底能不能允许存在呢？</h2><p>事实上，域名系统可以看做一种用来存储具备层级关系的数据的服务。随着互联网的发展，DNS 能做的事儿越来越多，对主机名格式的定义也开始越来越宽容。</p>
<p>于是，于 1997 年发布的 <a href="https://tools.ietf.org/html/rfc2181" target="_blank" rel="noopener">RFC-2181</a> 再次对域名语法格式做了澄清：</p>
<blockquote>
<ol start="11">
<li>Name syntax</li>
</ol>
<p>Occasionally it is assumed that the Domain Name System serves only the purpose of mapping Internet host names to data, and mapping Internet addresses to host names.  This is not correct, the DNS is a general (if somewhat limited) hierarchical database, and can store almost any kind of data, for almost any purpose.</p>
<p><strong>The DNS itself places only one restriction on the particular labels that can be used to identify resource records.  That one restriction relates to the length of the label and the full name.  The length of any one label is limited to between 1 and 63 octets.  A full domain name is limited to 255 octets (including the separators).  The zero length full name is defined as representing the root of the DNS tree, and is typically written and displayed as “.”.  Those restrictions aside, any binary string whatever can be used as the label of any resource record.</strong>  Similarly, any binary string can serve as the value of any record that includes a domain name as some or all of its value (SOA, NS, MX, PTR, CNAME, and any others that may be added). Implementations of the DNS protocols must not place any restrictions on the labels that can be used.  In particular, DNS servers must not refuse to serve a zone because it contains labels that might not be acceptable to some DNS client programs.  A DNS server may be configurable to issue warnings when loading, or even to refuse to load, a primary zone containing labels that might be considered questionable, however this should not happen by default.</p>
<p>Note however, that the various applications that make use of DNS data can have restrictions imposed on what particular values are acceptable in their environment.  For example, that any binary label can have an MX record does not imply that any binary name can be used as the host part of an e-mail address.  Clients of the DNS can impose whatever restrictions are appropriate to their circumstances on the values they use as keys for DNS lookup requests, and on the values returned by the DNS.  If the client has such restrictions, it is solely responsible for validating the data from the DNS to ensure that it conforms before it makes any use of that data.</p>
<p>See also [RFC1123] section 6.1.3.5.</p>
</blockquote>
<p>在这份标准文档中，明确了“<strong>除了限制长度（包括每个标签之间的长度以及完整域名总长）外，任何二进制字符串都可以作为任何资源记录的标签</strong>”。</p>
<p>至此，关于下划线的谜底彻底揭开：<strong>下划线不应被 DNS 服务所拒绝。</strong>不过，上文中也有提到<strong>特殊的应用和场景可以有所限制，但并不是默认的。</strong>通常这种情况下，对应的应用服务往往会有所判断。</p>
<p>此外，感兴趣的童鞋还可以继续看看上述节选中提到的 <a href="https://tools.ietf.org/html/rfc1123#page-79" target="_blank" rel="noopener"> RFC-1123 的 6.1.3.5 章节</a>。</p>
<h2 id="其他提及"><a href="#其他提及" class="headerlink" title="其他提及"></a>其他提及</h2><p>细心的童鞋可能有看到前面 RFC-1034 中有提到大小写的内容：<strong>仅大小写不一致视为同一域名。</strong> 除此之外，没有提及更多。</p>
<p>对于这种类似说法可能存在一些不确定性，2006 年 1 月发布的<a href="https://tools.ietf.org/html/rfc4343" target="_blank" rel="noopener"> RFC-4343 </a> 再次针对大小写、ASCII 码转义等格式标准做了澄清。</p>
<p>感兴趣的童鞋可以去看看，我这里就不再引用和释义了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于域名格式到底是怎样的，可以参考 AWS Route53 ，他们给了非常完整的定义：<a href="https://docs.aws.amazon.com/zh_cn/Route53/latest/DeveloperGuide/DomainNameFormat.html" target="_blank" rel="noopener"> DNS 域名格式 </a></p>
<p>总的来说有如下几个关键要点：</p>
<ol>
<li>长度限制：每个 label 之间 63 个字符以内，域名全长（含所有的“.”，包括根）不超过 255 个字符；</li>
<li>不区分大小写，常规默认小写；</li>
<li>特殊字符：需要用<code>\三位八进制 ASCII 码</code>格式转义；</li>
<li>中、日、韩等非拉丁文字符域名：需要进行 punycode 转码 （附：<a href="https://www.punycoder.com/" target="_blank" rel="noopener">在线 punycode 转码工具：Punycoder</a>）；</li>
</ol>
<p>值得一提的是，<strong>DNS 业内针对 Zone 一般是“字母、数字和连字符（-），且中划线不能在 label 开头和结束”</strong>。它来自早期已废弃的 RFC-882 &amp; RFC-973 ，业内已约定俗成并非是如今的硬性要求。</p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> RFC </tag>
            
            <tag> 域名格式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[需要上线多个域名（网站）却只有一个公网 IP 怎么办？]]></title>
      <url>https://ephen.me/2018/mutisite-oneip/</url>
      <content type="html"><![CDATA[<p>以前做 DNS ，推出过一个系列的《如何让多 ip 域名配置游刃有余》的几篇文章，毕竟作为智能 DNS ，站点多 ip 的配置是其职责所在。</p>
<p>然而最近，有的小伙伴问题又来了：</p>
<blockquote>
<p>没那么多钱申请那么多不同机房的公网 ip ，但又有必要部署多个不咋占资源的站点，又该怎么办呢？</p>
</blockquote>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163201.png" alt=" 穷到变形 "></p>
<p>别急，穷人不止你一个，自然有又穷又聪明的 PM &amp; 技术给出解决方案，啥都能给变出来。</p>
<a id="more"></a>
<h2 id="穷到啥都不剩：别说-ip-了，连主机都买不起"><a href="#穷到啥都不剩：别说-ip-了，连主机都买不起" class="headerlink" title="穷到啥都不剩：别说 ip 了，连主机都买不起"></a>穷到啥都不剩：别说 ip 了，连主机都买不起</h2><p>在云计算行业，虚拟化是一个不陌生的词。只要资源够，一台机器可以生出无数台虚拟机来。</p>
<p> Web 服务上同样也有类似的概念，人们可以通过创建不同的 VirtualHost 指向不同的域名（或端口）和目录，即可实现同一台机器上生出多个不同的站点。</p>
<p>以 Apache 为例，Apache 安装好后在默认配置中一般有两个重要的配置文件： <code>httpd.conf</code> 和 <code>welcome.conf</code></p>
<p>其中 <code>httpd.conf</code> 是程序的配置文件，决定了程序将要使用什么组件、监听什么端口、加载什么配置、各类程序文件及日志文件都放到哪里等等；而 <code>welcome.conf</code> 是程序提供的 Web 配置示例，告诉使用者要搭建网站该怎么配置。</p>
<ul>
<li>注：Apache 中 Web 站点配置文件名不一定是 <code>welcome.conf</code> ，只要 <code>httpd.conf</code> 文件中有指向，可以是任意的文件名。本文仅以 <code>welcome.conf</code> 做示例。</li>
</ul>
<p>我们知道，http 服务的默认端口是 80 ，使用 80 端口则用户在访问时不用刻意在浏览器输入端口号，非常方便。 <code>httpd.conf</code> 文件中默认 <code>Listen 80</code> ，要使用 80 端口，我们只需要配置好 Web 站点即可。</p>
<p>默认的 <code>welcome.conf</code> 文件内容中的 VirtualHost 配置是这样的（截取关键内容）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    DocumentRoot &quot;/var/www/html/&quot;</span><br><span class="line">    ServerName ephen.me</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p><code>DocumentRoot</code> 后面的目录表示站点搭建目录， <code>ServerName</code> 表示站点域名。</p>
<p>如果我们需要配置多个不同的站点，将站点搭建到不同的目录，在该文件中多配置几条 VirtualHost 就好：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost ephen.me:80&gt;</span><br><span class="line">    DocumentRoot &quot;/var/www/html/ephen.me/&quot;</span><br><span class="line">    ServerName ephen.me</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost demo.com:80&gt;</span><br><span class="line">    DocumentRoot &quot;/var/www/html/demo.com/&quot;</span><br><span class="line">    ServerName demo.com</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>
<p>使用其他的 Web 服务程序，道理是一样的。 Nginx VirtualHost 配置可参考：<a href="http://tabalt.net/blog/nginx-virtual-host/" target="_blank" rel="noopener">http://tabalt.net/blog/nginx-virtual-host/</a></p>
<h2 id="只是有点小气：不差钱，就是只想用一个-ip"><a href="#只是有点小气：不差钱，就是只想用一个-ip" class="headerlink" title="只是有点小气：不差钱，就是只想用一个 ip"></a>只是有点小气：不差钱，就是只想用一个 ip</h2><p>假设多个不同的网站已经在不同的云主机上已搭建好，而目前能提供服务的可用 ip 只有一个。通常咱们会想到要是前面再有一个分发装置用于绑定这个 ip ，然后通过访问端口或域名区分真正到达的主机，那真真是极好的~</p>
<p>在云计算行业，这个分发装置肯定是有的，就看你怎么用了。</p>
<p>下文将以 QingCloud 云平台为例，来解决这个问题。</p>
<h3 id="负载均衡器（-Load-Balancer-）"><a href="#负载均衡器（-Load-Balancer-）" class="headerlink" title="负载均衡器（ Load Balancer ）"></a>负载均衡器（ Load Balancer ）</h3><p>创建负载均衡监听器，监听 80 端口，添加多个后端，然后为这些后端分别绑定不同的转发策略，就能成功满足需求。</p>
<p>操作步骤示例：</p>
<ol>
<li>创建负载均衡器，绑定仅有的一个公网 ip</li>
</ol>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163253.png" alt="Load Balancer"></p>
<ol start="2">
<li><p>为该负载均衡器创建基于 80 端口的 HTTP 监听器，并将已搭建好的几个网站添加为该监听器的后端</p>
<ul>
<li>注：我只有一个站点，但不影响后续的示例</li>
</ul>
</li>
</ol>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163314.png" alt="HTTP 监听器"></p>
<ol start="3">
<li><p>为对应的后端添加转发策略，让来自 <code>ephen.me</code> 站点的请求指向对应的后端地址</p>
<ul>
<li>注意看上面第二步附图中后端列表倒数第 3 个字段——“转发策略”，点击下面对应的“绑定”二字；</li>
<li>若没有转发策略可绑，会指引创建：</li>
</ul>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163335.png" alt="create forward"></p>
<ul>
<li>为转发策略添加规则，选择“按域名转发”：</li>
</ul>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163354.png" alt="add rules"></p>
<ul>
<li>回到负载均衡监听器，为对应后端添加转发策略</li>
</ul>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163416.png" alt="choose forward"></p>
</li>
</ol>
<p>通过应用上述配置后，即可完成：<strong>用户访问对应 ip 的 80 端口 HTTP 服务，若域名为 <code>ephen.me</code> 则转发至该后端主机。</strong></p>
<p>如果有存在多台已配置好不同 Web 服务的云主机要共用这个 ip ，只需要继续往这个负载均衡器添加后端主机并绑定不同规则的转发策略就可以了。</p>
<p>当然，负载均衡器的作用远不仅仅如此，本文的介绍可以看作是为解决问题而抖个机灵罢了。更多的介绍可参照 QingCloud 官网：<a href="https://www.qingcloud.com/products/loadbalancer/" target="_blank" rel="noopener">负载均衡_LB Cluster | 青云QingCloud</a></p>
<h3 id="VPC-网络"><a href="#VPC-网络" class="headerlink" title="VPC 网络"></a>VPC 网络</h3><p>“负载均衡器 + 转发策略”的解决方案确实很好用，但如果多个不同业务的站点已经搭建到不同的云主机，除了 ip 没有多的可用外，连域名都想用同一个，只靠端口号来区分，又该怎么办呢？</p>
<p>当然负载均衡器也是可以解决的，看到这里的小伙伴可以一起思考下。不过这时候容许灰姑娘再抖个机灵，通过创建“ VPC 网络 + 端口转发”来解决。</p>
<p>关于 VPC 网络的介绍，可以先看看：<a href="https://www.qingcloud.com/products/vpc/" target="_blank" rel="noopener">专属私有网络_VPC | 青云QingCloud</a></p>
<p>懂的童鞋可跳过，且看操作步骤：</p>
<ol>
<li>创建 VPC 网络，绑定仅有的一个公网 ip</li>
</ol>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163448.png" alt="VPC"></p>
<ol start="2">
<li>在 VPC 网络中创建一个 vxnet 私有网络，并将业务承载主机加入到这个网络，在开启 DHCP 服务的情况下，它将自动分配到一个私有网络地址</li>
</ol>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163534.png" alt="VxNet"></p>
<ol start="3">
<li>管理 VPC 网络配置，添加端口转发，将来自 80 端口的业务转发到私有网络中的这台云主机上</li>
</ol>
<p><img src="https://pek3b.qingstor.com/imephen/20190426163552.png" alt="Port Forward"></p>
<p>通过应用上述配置后，即可完成：<strong>用户访问对应 ip 的 80 端口 HTTP 服务，则转发至私有网络中 ip 地址为<code>192.168.128.2</code>的主机。</strong></p>
<p>同理，其他业务的云主机，可以都加入到前面已创建好的私有网络并获得各自的私有网络 ip 地址，再设置不同的端口转发到不同的地址就好了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上只是灰姑娘的个人想法，其实标题所描述的问题解法还有很多，欢迎相互交流。</p>
<p>也许有些小伙伴的业务过于庞大后会有更多的难题需要解决，不过办法都是人想的，如果有童鞋有别的难题，也欢迎相互交流。</p>
<p>最后，感谢耐心看完此文。</p>
]]></content>
      
        <categories>
            
            <category> 工作笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> 网站 </tag>
            
            <tag> 负载均衡器 </tag>
            
            <tag> VPC </tag>
            
            <tag> VirtualHost </tag>
            
            <tag> LB </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于云平台用户鉴权管理（IAM）的一些总结和思考]]></title>
      <url>https://ephen.me/2018/cloudplatform-iam/</url>
      <content type="html"><![CDATA[<p>AWS 作为云计算行业鼻祖，不论是什么功能，都做得非常完备，且一切可编程。它们能全方位的解决客户的各种问题，甚至想他人之未曾想，真的非常值得业内人士及机构尊敬。</p>
<p>但，完备的背后离不开大量的人力支持，又因为它的完备使得各业务都极其复杂。我最近才开始好好看一看 AWS ，才知道居然都有专门的 AWS 咨询师这样的职业。真是厉害了~</p>
<p>目前主要在看的模块是 IAM 以及周边功能，由于本喵的英文水平不太好，云计算行业术语又了解得太少，看得好费劲。不过通过借助谷歌翻译、上手操作以及咨询<a href="https://u.sb/" target="_blank" rel="noopener">兽兽</a>等大咖，也算是了解了个大概。</p>
<a id="more"></a>
<hr>
<h2 id="IAM-非官方简介"><a href="#IAM-非官方简介" class="headerlink" title="IAM 非官方简介"></a>IAM 非官方简介</h2><p>IAM ，全称 Identity and Access Management ，字面意思就是识别用户身份和接入控制的管理，所以我将其翻译为“用户鉴权”。</p>
<p>整个 IAM 体系主要包括“谁可以使用我的资源”（who）、“如何使用我的资源”（how）和“对资源的使用程度”（Authority）三大方面。</p>
<p>既然都是和“我的资源”相关，所以我在理解时通常将 IAM 与“资源协作”业务场景结合起来看。</p>
<h3 id="账户、用户及角色（Who）"><a href="#账户、用户及角色（Who）" class="headerlink" title="账户、用户及角色（Who）"></a>账户、用户及角色（Who）</h3><p>姑且将“我”认为是账户实体，也就是对应 AWS 中的根帐户（Root）。“我”是金主，付钱买了一大堆资源，但是“我”一个人管理不过来，就派人来帮“我”分门别类的管理它们。</p>
<p>而“我”又不可能把自己的账号密码都公开给这些人，因为“我”的账号密码直接代表了整个系统的经济命脉和大佬权限。所以，“我”给他们每个人创建基于“我”的子账号，称之为用户。</p>
<p>既然是分散管理，那么就会对这些用户有不同的类别，就好比 A、B 是开发人员，C、D 是产品经理，各类人群关注点不同，于是给用户创建不同的分组。</p>
<p>然而，可以访问资源的，不仅仅是人，也可能是其他资源、外部应用，或者其他的根。于是，这些被统称为“角色”。</p>
<p>简单的用一个关系图来展示下：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426155745.png" alt="IAM who"></p>
<h3 id="接入方式（How）"><a href="#接入方式（How）" class="headerlink" title="接入方式（How）"></a>接入方式（How）</h3><p>用户可以控制台登陆，可以用私有 API 封装到程序连结，亦可以通过 CLI 命令行方式登陆，这个登陆相当于永久性密钥。</p>
<p>而对于各类不同的角色，它们会直接具备某些资源的访问及操作权限。那么每个资源可能需要开通接口，以提供给不同的角色做临时访问鉴权。</p>
<p>于是构成了云平台的接入体系。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426155850.png" alt="IAM How"></p>
<h3 id="权限（Authority）"><a href="#权限（Authority）" class="headerlink" title="权限（Authority）"></a>权限（Authority）</h3><p>可以说，权限是整个 IAM 的核心，控制着这个账户下所有的用户及角色对其资源的访问程度。允许还是拒绝？可访问？可管理？增删改查……对象是某个资源 or 某一类资源？</p>
<p>在 AWS 中，所有可能的权限都事先设计好，只需要绑定到用户、组或者角色就可以生效了。这些设计好的权限被称之为策略（Policy）。</p>
<p>AWS IAM 内置了一系列的 Policy ，已足够客户使用。万一不够，还可以创建属于自己的 Policy 。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426155920.png" alt="IAM Authority"><font size="1">（该图片系转载，侵删致歉。来源：<a href="https://www.jianshu.com/p/9ac6f557dd97" target="_blank" rel="noopener"> Alchemist - AWS IAM 学习总结 </a>）</font></p>
<hr>
<h2 id="不同平台用户管理机制对比"><a href="#不同平台用户管理机制对比" class="headerlink" title="不同平台用户管理机制对比"></a>不同平台用户管理机制对比</h2><p>目前几乎所有的云平台都有基于资源协作的用户权限管理体系，国内的大厂像阿里云、腾讯云基本就是精简版的 AWS IAM ，而国外的产品倒是各有各的特色。</p>
<h3 id="Google-Cloud-Platform"><a href="#Google-Cloud-Platform" class="headerlink" title="Google Cloud Platform"></a>Google Cloud Platform</h3><p>GCP 在用户添加时便为其设定具备某种权限的角色，当然后期可编辑和更改。</p>
<p>角色即代表了权限 Map ，一个用户可以有多种角色，而角色策略本身内置不可编辑。</p>
<p>其他资源或应用需要接入时在第一次接入时自动创建基于 IAM 的成员，这样看来，应用获取的可能也是永久接入权限。</p>
<p>配置相对简单，但可扩展性一般。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426160008.png" alt="GCP IAM"></p>
<h3 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a>Azure</h3><p>Azure 将客户按订阅方式划分不同的套餐，在每个订阅中配置用户角色和用户组。</p>
<p>和 GCP 类似，有一系列的资源控制内置权限。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426160029.png" alt="Azure"></p>
<p>值得一提的是，Azure 还有 Win Server 中的那套 Active Directory （活动目录）类似机制，使用域控制器将用户分域、分组并针对应用、控件、设备等（而非系统中的云资源）做一些安全权限配置。</p>
<p>但关于 Azure AD 我暂时理解得不够，未来可能还需要多花时间研究一下。</p>
<h3 id="IBM-Cloud-（BlueMix）"><a href="#IBM-Cloud-（BlueMix）" class="headerlink" title="IBM Cloud （BlueMix）"></a>IBM Cloud （BlueMix）</h3><p>BlueMix 在访问管理上看起来并没有使用统一的认证接口，它为资源创建服务标识以提供给内部其他资源或外部应用接入，同时亦可类似 GCP 那样直接为用户和组授权，也有直接为内部资源之间创建连结权限。</p>
<p>用户是邀请其他账号过来参与本账户的资源协作，没有子账号，不支持权限策略的编辑和制定。</p>
<p>不过，在其用户的管理配置界面，有提到“未来支持 IAM ”字样。</p>
<p>看来 AWS 行业鼻祖的地位影响还是很大的。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426160053.png" alt="BlueMix"></p>
<p>BlueMix 给人的感觉，虽然除了子账号，其他各功能也都有，就是比较凌乱，没有统一管控起来。</p>
<hr>
<h2 id="基于-AWS-IAM-的一些思考"><a href="#基于-AWS-IAM-的一些思考" class="headerlink" title="基于 AWS IAM 的一些思考"></a>基于 AWS IAM 的一些思考</h2><h3 id="用户模型"><a href="#用户模型" class="headerlink" title="用户模型"></a>用户模型</h3><p>账户安全问题不容小觑，AWS 在 IAM 控制台首页就提示客户删除根密钥创建 IAM 管理员账户是最佳实践。</p>
<p>在 AWS IAM 用户管理体系中，它似乎与类 UNIX 操作系统的账户体系有着异曲同工之妙：只有 Root 掌握着最高权限，不同的类别服务使用各自的权限用户及用户组。</p>
<p>AWS 这样做，可以很好的防止账单信息被篡改、权限配置的错乱等各种安全和意外问题。</p>
<p>它把整个体系其实上升到了组织的结构，Root 不再是一个人，仅仅是代表了最高权限的集合，只有 IAM 子账号才是实实在在干活儿的人。就类似公司 or 企业，广大员工等价于这里的用户，Root 对应的就是公司。</p>
<h3 id="权限策略"><a href="#权限策略" class="headerlink" title="权限策略"></a>权限策略</h3><p>个人认为 AWS IAM 最厉害之处就是将 Policy 封装成了统一的框架，并提供了界面配置和适应专业人士的 json 配置模式，从而直接就形成了 AWS 的自有标准。</p>
<p>同时其内置策略特别多，想必已足够绝大部分用户的使用了。</p>
<h3 id="资源标识符-ARN"><a href="#资源标识符-ARN" class="headerlink" title="资源标识符 ARN"></a>资源标识符 ARN</h3><p>前面提到 BlueMix 有让用户为服务创建标识，而 AWS 中默认就是任何资源都有其标识。哪怕是一条服务策略、一个操作、一条配置也有自己的 ARN 。</p>
<p>所以在 AWS ，并不存在 BlueMix 中的那种为了建立连结而再给资源创建标识的需要。底层直接通过 ARN 连接就好。</p>
<hr>
<h2 id="关于-AWS-IAM-的周边功能体验"><a href="#关于-AWS-IAM-的周边功能体验" class="headerlink" title="关于 AWS IAM 的周边功能体验"></a>关于 AWS IAM 的周边功能体验</h2><h3 id="Organization"><a href="#Organization" class="headerlink" title="Organization"></a>Organization</h3><p>Organization ，其实就是一个基于树形结构的组织架构图的管理，里面也有涵盖了账户策略。不同的是，Organization 中的账户都是 Root 账户身份。</p>
<p>一开始，因为看到 IAM 用户组的存在，让人感觉有点晕头转向的，不知道作用如何。</p>
<p>经过一段时间的试用，我想，该功能大约是用于那种集团公司大架构下的管理吧。有很多很多子公司的存在，相互之间要独立又要有关联。</p>
<p>而 Organization 最大的作用大概就在于账单的合并与分离，其实跟接入权限控制关系不大。</p>
<p>有意思的是，在创建了 Organization 之后，IAM 会自动给这个 Organization 创建角色，从而在 Org 内部的用户可以通过 IAM 角色切换登陆。</p>
<h3 id="Cognito"><a href="#Cognito" class="headerlink" title="Cognito"></a>Cognito</h3><p>Cognito 是一个应用程序管理器，为你在 AWS 中创建的应用程序管理各种不同接入权限的用户池。</p>
<p>其实它跟 IAM 并没有什么特别的关系，IAM 是基于平台系统层次的，Cognito 基于某个具体的应用程序。假设 AWS 也有类似 ISO 网络模型的话，它们就不是同一层的概念了。</p>
<p>尽管我是偶然发现的这个模块功能，可其实在 Cognito 创建用户池的时候，发现它也会同步的创建一系列 IAM 管理角色。看起来，在应用程序的接入控制上，可能也调用了 IAM 体系中的某模块。</p>
<h3 id="CodeStar"><a href="#CodeStar" class="headerlink" title="CodeStar"></a>CodeStar</h3><p>CodeStar 在 AWS 中官方中文版译作“项目”，最先我也以为是以一种资源集合的形式存在（类似 GCP 的 Project ），实际看了之后也并不是。</p>
<p>CodeStar 其实是一个开发者平台，将开发者的项目直接发布到云。可通过连结本地 IDE （比如 VS Code）、代码共享平台（比如 GitHub）一站式管理和发布开发中的项目。当然 AWS 也提供自己的 IDE 和 代码共享平台并在这里推荐用户使用它们。</p>
<p>这样看来， CodeStar 其实类似一个多语言多平台的 GitHub Page 了，因而不仅仅是 Page 。</p>
<p>同样的， CodeStar 的创建也会向 IAM 中添加相应的各种角色。</p>
<p>其实在 AWS 中，真正的资源集合是顶栏标签上的“资源组”，虽然一贯的 AWS 风格，反倒资源组并没有惊艳到我，没有比较深入的体现协作管理关系。这点，我个人还是更喜欢 GCP 的项目风格。</p>
<h3 id="……"><a href="#……" class="headerlink" title="……"></a>……</h3><p>其实上面那些严格来说也不算是 IAM 的周边功能吧。 AWS IAM 管理是全局的，很多功能模块使用时可能都会去创建个 IAM 角色接入到管理系统，以辅助完成该模块的身份认证和鉴权。</p>
<p>从这些试用中，可以发现 ARN 中的 “ Resource ” 一词，在整个体系中已不再是狭义的主机、数据库等用户申请创建的虚拟或硬件资源，而是平台中的每一个的功能包括账户管理、应用管理甚至 IAM 管理本身。</p>
<hr>
<h2 id="一点题外话"><a href="#一点题外话" class="headerlink" title="一点题外话"></a>一点题外话</h2><p>在看 IAM 这块内容时，不禁让我想起了多年前我在湖北省电信工作时的 BOSS 三户模型。那个体系因为业务的关系，比这个更复杂，在开发和实施过程中也是研究出了大量的通信标准。</p>
<p>印象中，那种完善的协议制定往往是多个专家经过了长达几个月的封闭式细节推敲和研究才完成，并且有着层层的质量审查。在我国互联网快速迭代的今天，这些真的是太难做到了。</p>
<p>而 AWS 一直坚持的标准和框架结构，想必在形成和迭代的过程中也是非常精密的。</p>
<p>技术复制可能容易，但精神和思想不易。</p>
]]></content>
      
        <categories>
            
            <category> 工作笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 用户鉴权 </tag>
            
            <tag> IAM </tag>
            
            <tag> 资源协作 </tag>
            
            <tag> AWS </tag>
            
            <tag> Azure </tag>
            
            <tag> GCP </tag>
            
            <tag> BlueMix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[记生平第一次手术经历]]></title>
      <url>https://ephen.me/2018/First-Surgery/</url>
      <content type="html"><![CDATA[<p><strong>各位看官请注意：</strong></p>
<p><strong>此文章涉及本姑娘个人信息，文章公开代表逛到这里的人可以看，但并不代表我同意被传播。</strong></p>
<a id="more"></a>
<hr>
<p>2018 年春节来得比以往晚了很多。这一年的春天第一次尝试自己在家做腊鱼腊肉和腊肠，做得很成功，吃得也很开心。</p>
<p>于是埋下了一颗意外的种子。</p>
<hr>
<p>正月初四的晚上，正开心的用餐呢，突然被鱼刺卡到喉咙。可能因为刺比较短小，感觉时疼时不疼的，我咳嗽和呕吐都弄不出，想着可能只是划伤了而已，无碍。</p>
<p>随后的几天也一直都是时疼时不疼的状态，自我感觉有好转的迹象，竟安慰自己大概是身体免疫力下降了才拖了那么久吧。</p>
<p>春节假期休毕照常回公司上班，不知道是从第几天开始竟然觉得喉咙刺疼得厉害难忍，遂下定决心周末去医院看看。（侧面反应我真的是一个严重拖延症患者，死到临头了还想再拖几天）</p>
<hr>
<p>周末上医院，医生拿灯照着并压住我的舌头简单看了下，并没有看到鱼刺。心里一阵窃喜，想来估计是没有吧，以后可要好好锻炼提高自身免疫力。</p>
<p>谁曾想，医生出其不意的给我开了个单子，让我去缴费，说需要做喉镜看看。</p>
<p>口腔和鼻子被喷了麻醉后躺手术台，医生拿着一根长长的管子过来，我赶紧张大了嘴巴，竟然将管子从我鼻孔中伸进去了。。（枉我这么配合的做好准备……</p>
<p>果然发现了鱼刺，同时医生赶紧叫来家属，说我急需住院手术。</p>
<p>会厌舌面长了多个菜花样的囊肿，需要切除，拖久了会影响呼吸。</p>
<p>于是当天就匆匆忙忙办理住院，签各种知情同意书预约了次日手术，接着就是做各种术前检查，买生活用品啥的忙一整天。</p>
<hr>
<p>其实只是个小手术而已，但还是搞得我特别紧张。</p>
<p>由于周五下班大雨电动车没有骑回家，周日一早就赶紧让老公去公司把车骑回来。</p>
<p>结果独自一人在医院打着术前点滴，看着身边的人都有人陪护帮病人忙出忙进，心里竟感觉一阵酸楚，又赶紧打电话让老公回来。</p>
<p>其实医院的环境还是真的很能影响情绪的，到我要进手术室的时候护士问陪同家属在哪，我打他电话一直都没有人接，忍不住哭了起来。</p>
<p>直到等他匆匆忙忙赶到手术室门口，我说了婚后的第一次“离婚”。（听说每个人婚后都会有几百次想离婚的念头，我这个算吗？</p>
<hr>
<p>进手术室，心电监护、打针、吸麻醉剂，一下子就毫无意识了，直到手术完毕被医生拍醒。</p>
<p>我依稀记得入睡前，打完麻醉没一会儿就听见监护仪的报警声，显示“呼吸暂停”，硕大的红字。我很害怕，拼命的想呼吸却影响不了仪器上的显示。</p>
<p>而后又听到了另一种急促的报警声，但是再也没有力气偏头看仪器了，甚至觉得自己就这么死掉了。</p>
<p>医生拍醒我的时候，让我千万不要闭眼睛睡觉，但是那眼皮似乎有千斤重。直到自己慢慢清醒，这才有种劫后余生的感觉，如释重负。</p>
<hr>
<p>挺搞笑的是，术前因为家属一直没到，胡思乱想到哭着睡着。</p>
<p>医生说做手术的时候没哭了，但是一醒来，那眼泪又吧嗒吧嗒的自己往下掉。</p>
<p>其实刚醒来的时候，我自己还是没有什么意识的，感觉不太可能是我自己突然要哭，我估计大概是接着术前的眼泪流下来的吧。</p>
<p>有点意思。</p>
<hr>
<p>果然是个小手术，术后休息了一天打了一天针就基本生龙活虎了，周二敬业的我戴着留置针去公司上班。</p>
<p>然后按时吃药打针，直到一周后复查出院。</p>
<p>挺不错的，除了喉咙里面感觉像有个小椰果堵着，再没什么其他不适。</p>
<hr>
<p>这场手术，最大的收获就是体验了全麻，让我想到了很多。</p>
<p>麻醉真的会有意外的，感觉自己真的还没活够，特别特别害怕意外。</p>
<p>原本从去年年底到过年的时候，感觉心理毫无由来的特别抑郁，手术过后莫名没了，虽然不排除气候原因；</p>
<p>原本自己扣扣索索的不愿意出去旅游花钱，打算把婚假留着盯装修的，当晚就在途牛上下了订单；</p>
<p>原本觉得自己就安安心心待公司打酱油，却下决心了一定要找工作机会；</p>
<p>我开玩笑的对自己说：如果不拼搏，我拿什么证明自己存在过？</p>
<hr>
<p>一切尘埃落定，最重要的，保持身体健康，再来实现自己的存在。</p>
<p>春天到了，该锻炼了哦~</p>
<hr>
<p><strong>未经允许，不得传播此文中图片及任何个人信息。</strong></p>
<p><strong>情节严重者，将追究其法律责任。</strong></p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[VSCode 中使用 PlantUML 插件生成 UML]]></title>
      <url>https://ephen.me/2017/VSCode_PlantUML/</url>
      <content type="html"><![CDATA[<p>作为一个伪技术人员，灰姑娘用的 IDE 大概是不那么流行的 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCode</a>。全称 Visual Studio Code ，微软家近两年才推出来的一个产品。</p>
<p>这个 IDE 的整个软件界面以及使用都和 <a href="https://atom.io/" target="_blank" rel="noopener">Atom</a> 非常相像，它本身比较轻量，但又可以安装很多扩展插件以满足使用者的需要。虽然对过去使用老古董 <a href="https://www.ultraedit.com/" target="_blank" rel="noopener">Ultra Edit</a> 的我来说，刚上手着实有些不习惯，但是用久了之后还是觉得不错的。（尽管我用 IDE 的频率不高。。</p>
<p>最近，同事希望我给 DNS 解析流程画个 UML 图，并推荐了一个通过脚本语言生成 UML 图的开源项目： <a href="http://plantuml.com/" target="_blank" rel="noopener">PlantUML</a> 。</p>
<p>上网搜索后发现，可以不需要下载这个项目的 APP ，很多编辑器都有它的插件。但是我翻了好久，并没有看到基于 VSCode 的实际应用示例。</p>
<p>我在 VSCode 上搜到这个扩展插件之后，环境部署还很折腾了一会儿。遂将一些经验在此分享给大家，希望能对其他路过的人有所帮助。</p>
<a id="more"></a>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>PlantUML 本身只是一个脚本语言，如果要生成图片，是基于 <a href="http://www.graphviz.org/" target="_blank" rel="noopener">GraphViz</a> 绘图的。而 GraphViz 又是基于 dot 脚本生成图片，它依赖于 Java 和 Dot 脚本环境的配置。</p>
<p>所以，使用 PlantUML 有如下基本环境要求：</p>
<h3 id="1-安装-Java-环境"><a href="#1-安装-Java-环境" class="headerlink" title="1.安装 Java 环境"></a>1.安装 Java 环境</h3><p>上官网下载后安装：<a href="https://www.java.com/zh_CN/" target="_blank" rel="noopener">https://www.java.com/zh_CN/</a></p>
<p>注意配置 <code>$JAVA_HOME</code> 环境变量。</p>
<p>配置完毕后启动 Windows Shell 执行 <code>java -showversion</code> 命令查看 Java 版本，以确定 Java 环境是否准备成功。</p>
<h3 id="2-安装-GraphViz-程序"><a href="#2-安装-GraphViz-程序" class="headerlink" title="2.安装 GraphViz 程序"></a>2.安装 GraphViz 程序</h3><p>下载地址：<a href="http://www.graphviz.org/Download_windows.php" target="_blank" rel="noopener">http://www.graphviz.org/Download_windows.php</a></p>
<p>下载安装完后（灰姑娘将其安装到了 D 盘路径：<code>D:/program files/Graphviz/</code>下），也要配置环境变量。</p>
<p>将 GraphViz 可执行程序路径配置到 <code>$path</code>：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152846.png" alt="GraphViz 环境变量"></p>
<p><strong>后面的所有配置（ dot 配置和 VSCode 插件配置）都是基于 GraphViz 的安装路径，需要参照的小伙伴请注意。</strong></p>
<h3 id="3-配置-Dot-脚本环境"><a href="#3-配置-Dot-脚本环境" class="headerlink" title="3.配置 Dot 脚本环境"></a>3.配置 Dot 脚本环境</h3><p>添加环境变量 <code>$GRAPHVIZ_DOT</code>。如下图所示：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152918.png" alt="Dot 环境变量"></p>
<p>配置完毕后启动 Windows Shell 执行 <code>dot -v</code> 命令查看 Dot 版本，以确定 GraphViz 和 Dot 环境是否准备成功。</p>
<h3 id="4-安装-VSCode-插件并配置"><a href="#4-安装-VSCode-插件并配置" class="headerlink" title="4.安装 VSCode 插件并配置"></a>4.安装 VSCode 插件并配置</h3><p>VSCode 需要安装两个插件： <code>PlantUML</code> 和  <code>Graphviz Preview</code></p>
<p>打开 VSCode 切换到左侧扩展商店，搜索并安装他们，安装完毕后分别激活。</p>
<p>点击 VSCode 左下角齿轮按钮进入设置，在用户设置脚本中添加 <code>&quot;graphviz-preview.dotPath&quot;: &quot;D:/program files/Graphviz/bin/dot.exe&quot;</code> 并保存设置：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152953.png" alt="graphviz-preview.dotPath"></p>
<h3 id="5-环境配置测试"><a href="#5-环境配置测试" class="headerlink" title="5.环境配置测试"></a>5.环境配置测试</h3><p><strong>重启 VSCode 。</strong></p>
<p>新建文档输入以下测试代码：</p>
<figure class="highlight pl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">[*] --&gt; State1</span><br><span class="line">State1 --&gt; [*]</span><br><span class="line">State1 : this is a string</span><br><span class="line">State1 : this is another string</span><br><span class="line"></span><br><span class="line">State1 -&gt; State2</span><br><span class="line">State2 --&gt; [*]</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>
<p>同时按下 <code>Alt</code> 键和字母 <code>D</code> 键，预览生成的 UML 状态图。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426153029.png" alt="PlantUML 测试"></p>
<p>如果出现如图所示的错误，检查下是不是前面 GraphViz 安装和配置没做好。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426153134.png" alt="GraphViz 报错"></p>
<h2 id="分享：-DNS-解析流程图"><a href="#分享：-DNS-解析流程图" class="headerlink" title="分享： DNS 解析流程图"></a>分享： DNS 解析流程图</h2><p>为了画这个图，灰姑娘专门去学了下这个脚本语言。如果小伙伴们也想学习，官方中文指导手册在这里：<a href="http://translate.plantuml.com/zh/PlantUML_Language_Reference_Guide_ZH.pdf" target="_blank" rel="noopener">点击下载</a>。除此之外，<a href="http://www.jianshu.com/p/e92a52770832" target="_blank" rel="noopener">这里</a> 还有网友分享的快速入门教程。</p>
<p>回到正题，我的目的是要画个 DNS 解析流程图。</p>
<p>最后图是勉强画出来了，看看画得咋样？</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426153216.png" alt="DNS 解析流程图"></p>
<p>上图源代码分享如下：</p>
<figure class="highlight pl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">title 域名解析流程图</span><br><span class="line">skinparam <span class="keyword">state</span> &#123;</span><br><span class="line">  StartColor MediumBlue</span><br><span class="line">  EndColor Red</span><br><span class="line">  BorderColor Gray</span><br><span class="line">  ArrowColor Gray</span><br><span class="line">  ArrowFontColor Indigo</span><br><span class="line">  BackgroundColor&lt;&lt;Request&gt;&gt; AliceBlue</span><br><span class="line">  BackgroundColor&lt;&lt;Answer&gt;&gt; HotPink</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">state</span> UserClient &#123;</span><br><span class="line">    [*] --&gt; 请求访问域名</span><br><span class="line">    请求访问域名 --&gt; 本机host</span><br><span class="line">    本机host -right-&gt; 成功访问域名 : 有映射</span><br><span class="line">    本机host --&gt; 本机DNS解析器 : 没有映射</span><br><span class="line">    本机DNS解析器 -up-&gt; 成功访问域名 : 有缓存</span><br><span class="line">    成功访问域名 --&gt; 本机DNS解析器 : 缓存更新</span><br><span class="line">    本机DNS解析器 --&gt; [*]</span><br><span class="line">    note left : 本图展示正常解析流程\n未成功访问域名不能结束\n（最左支路径无效）</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">state</span> 请求访问域名 : ephen.me.</span><br><span class="line">    <span class="keyword">state</span> 请求访问域名&lt;&lt;Request&gt;&gt;</span><br><span class="line">    <span class="keyword">state</span> 本机host : Windows 目录：</span><br><span class="line">    <span class="keyword">state</span> 本机host : C:\Windows\System32\drivers\etc</span><br><span class="line">    <span class="keyword">state</span> 成功访问域名 : ephen.me.</span><br><span class="line">    <span class="keyword">state</span> 成功访问域名&lt;&lt;Answer&gt;&gt;</span><br><span class="line">    <span class="keyword">state</span> 本机DNS解析器 : Windows 查看命令：</span><br><span class="line">    <span class="keyword">state</span> 本机DNS解析器 : ipconfig /displaydns</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">state</span> DNSServer &#123;</span><br><span class="line">    本机DNS解析器 -right-&gt; 本地DNS : 没有缓存</span><br><span class="line">    本地DNS -right-&gt; 根域名服务器 : 没有解析</span><br><span class="line">    本地DNS -left-&gt; 成功访问域名 : 有解析</span><br><span class="line">    根域名服务器 --&gt; 顶级域名服务器</span><br><span class="line">    顶级域名服务器 --&gt; 域名服务器</span><br><span class="line">    域名服务器 --&gt; 本地DNS : 获取结果并缓存</span><br><span class="line"></span><br><span class="line">    <span class="keyword">state</span> 本地DNS : 用户配置（<span class="number">8.8</span>.<span class="number">8.8</span>）</span><br><span class="line">    <span class="keyword">state</span> 根域名服务器 : a.root-servers.net.</span><br><span class="line">    <span class="keyword">state</span> 根域名服务器 : b.root-servers.net.</span><br><span class="line">    <span class="keyword">state</span> 根域名服务器 : ...</span><br><span class="line">    <span class="keyword">state</span> 根域名服务器 : m.root-servers.net.</span><br><span class="line">    <span class="keyword">state</span> 顶级域名服务器 : a<span class="number">0</span>.nic.me.</span><br><span class="line">    <span class="keyword">state</span> 顶级域名服务器 : b<span class="number">0</span>.nic.me.</span><br><span class="line">    <span class="keyword">state</span> 顶级域名服务器 : ...</span><br><span class="line">    <span class="keyword">state</span> 域名服务器 : lv3ns1.ffdns.net.</span><br><span class="line">    <span class="keyword">state</span> 域名服务器 : lv3ns2.ffdns.net.</span><br><span class="line">    <span class="keyword">state</span> 域名服务器 : lv3ns3.ffdns.net.</span><br><span class="line">    <span class="keyword">state</span> 域名服务器 : lv3ns4.ffdns.net.</span><br><span class="line">&#125;</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>
<p>希望我的分享能对路过这儿的你能有所帮助。</p>
]]></content>
      
        <categories>
            
            <category> 工具介绍 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> UML </tag>
            
            <tag> 解析流程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[告别“牙套妹”称号]]></title>
      <url>https://ephen.me/2017/Goodbye-Orthodontic/</url>
      <content type="html"><![CDATA[<p><strong>各位看官请注意：</strong></p>
<p><strong>此文章涉及本姑娘个人信息，文章公开代表逛到这里的人可以看，但并不代表我同意被传播。</strong></p>
<a id="more"></a>
<hr>
<p>我小时候牙换好之后就一直挺乱的。那会儿听说过整牙这个词，说是要花大几千，就任由牙齿野蛮生长。</p>
<p>成年后，有一颗牙齿越龅越厉害，于是越来越期冀于整牙这个行为，希望自己挣了钱能完成心愿。</p>
<p>当年实习找工作，一口牙被面试官也鄙视了，说希望我入职公司有钱之后能把牙整整。</p>
<p>提前了解到整牙一般是分期支付的，所以 2012 年当我把大学贷款还完之后就到武汉大学口腔医院咨询正畸的事宜。</p>
<hr>
<p>2012 年 7 月初挂号拍片定方案，当听说要拔掉 8 颗牙（4 颗智齿都已长齐，外加上下左右各一颗双尖牙）之后，我犹豫了很久。</p>
<p>长到 23 岁那么大，一口牙长得不好看但好在一直都很健康，从来没有龋坏过也没有发炎疼痛过，一下子要拔掉 8 颗让我特别难以接受。</p>
<p>我经过了漫长的思想斗争，2012 年 8 月 29 日，我开始去拔牙了，从此踏上了正畸这条不归路。</p>
<hr>
<p>8 颗牙分了 3 次拔完，每次间隔 2 到 3 周，直到 2012 年 11 月 4 日，上颌牙粘上了牙套。</p>
<p>自锁牙套，开始 2 个月复诊一次，复诊两次后（ 4 个月）改为一个半月复诊一次，2013 年 8 月 22 日，下颌牙才粘上牙套，之后一个月复诊一次。</p>
<p>一开始混迹“牙套之家”了解各种正畸知识，和他人对比，似乎我的进程永远都是最慢的，就像最终我花了 5 年时间实在等不及了才将一口并不算很满意的牙齿解放一样。</p>
<p>牙齿解放的那一天，是今年的七夕， 2017 年 8 月 28 日。那一天，本来以为上午可以搞完，下午就去领证，却没想到各种意外直到晚上才看完牙齿。</p>
<hr>
<p>牙套妹的这整整 5 年，实在是牺牲了太多太多，不止是 Money 。</p>
<p>5 年来，从不敢开口笑，导致我牙套拆除后笑容特别僵硬，已经不会了；</p>
<p>屈指可数的照片，哪里还会去研究过怎样自拍的角度更光彩照人？</p>
<p>被耽误的结婚生子，如果早知道要 5 年这么久，孩子可能早就生了，一切都是因为怕卸牙套的那一天会拍 CT 会因为拔除钉子要用消炎药。</p>
<p>之前预定的婚纱摄影两年期也过了……</p>
<p>从 2015 年 8 月复诊以来就被告知可能很快就结束正畸了，可最后硬生生又拖了两年，而且还是在我的强烈要求下结束的。</p>
<hr>
<p>正畸治疗感受，一点都不好！</p>
<p>武汉大学口腔医院从总部到武胜路门诊到中南路门诊，我辗转了 3 个地方，尽是折腾；</p>
<p>每次复诊必须是工作日，排队排得人想死，排三四个小时最后 5 分钟看完是常态，甚至都有多次排完三四个小时最后连号都没挂上让次日再去的情况；</p>
<p>折腾、排队也就罢了，最让人不爽的就是，全院服务人员的态度都非常差！！说话恨不得鼻子朝天的。</p>
<p>各医生（拔牙、麻醉、正畸、洁牙、影像等各科医生）的待人态度虽都还可以，但是工作都极度不认真！！</p>
<p>我有一颗没有掉的小乳牙，在我治疗了 2 年后找个私人牙科诊所洁牙的时候才被发现（这颗牙就是导致我外面那颗恒牙越来越龅的罪魁祸首）；</p>
<p>粘完托槽出门坐个公交刚到家托槽就又掉；经常被缠绕得不太好的铁丝刮到粘膜导致发炎；治疗结束做洁牙大块的牙结石还在牙齿上，找他们扯皮做了二次洁牙回家后发现还是没有弄干净……</p>
<p>真的，如果有朋友想正畸，千万不要去这种大的专科医院找专家医生了，血泪教训！！</p>
<p>收费明细又多又贵，服务态度不行，工作态度不认真，关键你挂号的那个专家每次都是匆匆一瞥，操作都是实习生完成的。</p>
<p>如果想正畸，重点关注医生的资质和正畸案例，以及诊所操作消毒清洁就好。</p>
<hr>
<p>所以我到底花了多少钱？</p>
<p>已知的较大项：治疗费 7800 元；材料费 3300 元；种植钉 900 元；术前（CT、取模、照相、方案） 1480 元；术后（CT、取模、洁牙、照相、保持器） 860 元；拔掉8颗牙（带麻醉） 1800+ 元</p>
<p>另外所有的细项例如粘件、弓丝、皮圈、蓝胶、平导、托槽…… 都要收费，而且还不便宜。比如托槽掉了一颗要换新的话就是 200 元，然后粘结费另收。</p>
<p>正畸挂号费，2012 年 ~ 2017 年 3 月，每次 11.5 元，最后的几次每次 23.5 元；其他服务的挂号费每次 6.5 元。（对，你没看错，有可能一天要挂多个号，因为要找不同的医生）</p>
<p>我准备有时间的时候去打印我的消费清单，估计总数得有 3w+ 。然后再算上请假和交通费用，呵呵哒……</p>
<p>后面每 3 个月的保持器复诊估计还有大把的钱要交。。</p>
<p>还有最关键最关键的一点：正！畸！是！不！能！刷！医！保！卡！的！！只有拔牙和洁牙有部分内容可以医保结算（也不是全额能用哦）。</p>
<hr>
<p>正畸治疗效果，一般般。</p>
<p>最后的几个瑕疵在经过了 1 年多的坚持复诊后依然完全看不到能调整好的希望，实在受不了了我便严正要求结束。</p>
<p>各种复诊、缠绕、拍片，不知觉间我居然已经 28 了，小时候想着 28 岁前要两个小宝宝的愿望，至此已经丢进了坟墓。</p>
<p>尽管日常恐孕，但这两年的身体素质下滑感觉特别明显，是该考虑下生育问题了。（<del>要不去冻个卵？求推荐机构</del>）</p>
<p>5 年前我梦想着两三年弄好变成大美女美美哒嫁人，5 年后自己不堪忍受结束治疗的时候已然一个黄脸婆。</p>
<p>对了，要求结束治疗的时候还被逼签署免责书，生怕我找他们麻烦似的。他们脸这么大，我哪里找得起哦~</p>
<hr>
<p>正畸对脸型的改变确实也是有的。</p>
<p>尤其我这种拔牙多的，脸变长、颧骨变高、太阳穴深陷，这些都有，尤其在拔牙粘上牙套之初。</p>
<p>不过好在牙套卸下后，这种变化已经能够接受，不算太坏，甚至可能有一点点较之前更美好一点。</p>
<p>这大概是唯一的优势了。</p>
<hr>
<p>正畸的后遗症。</p>
<p>颞下颌关节弹响比术前频繁，有一点点不舒服；</p>
<p>在剔除蓝胶后，咬合关系比较怪异，咀嚼不是很顺利，不知道时间久一点会不会好了；</p>
<p>牙齿内收但舌头没有随之平滑退后，导致说话偶尔有点点大舌头（据说这个是成人正畸的通病，时间长了之后可能会好点，儿童一般没这个问题）；</p>
<p>至于牙齿是不是变松，暂时还没发现。</p>
<hr>
<p>恩，要说的差不多说完了。上照片。</p>
<p>先来一张拆掉牙套次日的灰姑娘美照镇楼：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426161220.png" alt="拆掉牙套次日"></p>
<p>牙套前后脸型对比：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426161335.png" alt="牙套前后脸型对比照"></p>
<p>我不太喜欢拍照（所以我某种意义上不太像个女生），也没写过什么牙套日记，找张照片还挺难，凑合着看吧。希望没吓到路过的你。</p>
<hr>
<p><strong>未经允许，不得传播此文中图片及任何个人信息。</strong></p>
<p><strong>情节严重者，将追究其法律责任。</strong></p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[使用公共 DNS 上网的弊端（二）]]></title>
      <url>https://ephen.me/2017/PublicDns_2/</url>
      <content type="html"><![CDATA[<p>上一篇文章《<a href="/2017/PublicDns_1/">使用公共 DNS 上网的弊端（一）</a>》我讲到当我们使用公共 DNS 上网时可能会因为该 DNS 的出口与本地实际网络所属区域和运营商不一致而导致调度不准，进而影响连接速度可能变慢。这篇文章同时发到了咱们 CloudXNS 的微信公众号上，不少小伙伴与我们产生了互动。</p>
<p>有的小伙伴就问到：“如果是支持 Edns-Client-Subnet 的公共 DNS，还会存在我说的问题吗？”</p>
<p>不得不佩服小伙伴们的学识！（比灰姑娘可厉害多了……</p>
<a id="more"></a>
<h2 id="什么是-Edns-Client-Subnet-？"><a href="#什么是-Edns-Client-Subnet-？" class="headerlink" title="什么是 Edns-Client-Subnet ？"></a>什么是 Edns-Client-Subnet ？</h2><p>Edns-Client-Subnet，简称 ECS，是由 Google 提交的一份 DNS 扩展协议，主要作用是允许 DNS resolver 传递用户的 IP 地址给权威 DNS 服务器。</p>
<p>关于 ECS 的 RFC 草案提出了很多年，直到 2016 年 5 月才被纳入正式 <a href="https://tools.ietf.org/html/rfc7871" target="_blank" rel="noopener">RFC 7871</a>。</p>
<p>过去我曾在 CloudXNS 官方文章 《<a href="https://www.cloudxns.net/Support/detail/id/116.html" target="_blank" rel="noopener">【CloudXNS 教您几招】如何让多 ip 域名配置游刃有余？[1]</a>》中侧面提到过关于 ECS 的概念及测试示例，感兴趣的小伙伴可以先去看看。</p>
<h3 id="ECS-支持现状"><a href="#ECS-支持现状" class="headerlink" title="ECS 支持现状"></a>ECS 支持现状</h3><p>过去 ECS 一直作为一个 RFC 草案存在，真正成为规范至今也仅仅一年。</p>
<p>如果要让域名的来访用户真正能访问到正确的区域和运营商站点，不仅仅用户使用的本地 DNS 要支持 ECS，同时域名使用的权威 DNS 也要支持。</p>
<p>而事实上，ECS 的普及程度并不高。目前市场上支持 ECS 的权威 DNS 不多，支持 ECS 的递归 DNS 更是少之又少。像在中国，就并没有哪个运营商的本地 DNS 支持。 </p>
<p>同时，更多的网站主并不很了解 DNS 相关业务知识。大多数站主随便找个注册商购买了一个域名然后填写几条记录并完事，懂得多点的知道找个智能 DNS 做分区解析。仅此而已。</p>
<p>那么，假设域名使用了支持 ECS 的智能 DNS 和 CDN，访问的用户也使用支持 ECS 的公共 DNS，这中间还会不会有什么问题呢？</p>
<h2 id="ECS-的弊端"><a href="#ECS-的弊端" class="headerlink" title="ECS 的弊端"></a>ECS 的弊端</h2><h3 id="访问网站时的解析时间将可能增加"><a href="#访问网站时的解析时间将可能增加" class="headerlink" title="访问网站时的解析时间将可能增加"></a>访问网站时的解析时间将可能增加</h3><p>我们知道，DNS 是有逐级缓存的。我们常常访问的网站大多可以直接从本地 DNS 缓存中读取解析结果，只有当我们是整个区域及运营商中访问某个冷门站点的第一个用户，才会最终到权威 DNS 上去查询站点的解析结果。这时候解析时间会远高于访问热门站点。（不懂的话，再去温习一下《<a href="https://www.cloudxns.net/Support/detail/id/737.html" target="_blank" rel="noopener">从理论到实践，全方位认识DNS（理论篇）</a>》</p>
<p>如果 DNS 查询请求使用包含 ECS 信息（比如 192.168.1.0/24 ），那么 DNS 响应会返回一个 /0，即为每个人缓存。这代表每个子网的缓存结果都是独立的，如果你的子网中过去从未有人使用支持 EDNS 的本地 DNS 访问过某个网站，这意味着你将从头走一遍域名解析。</p>
<h3 id="ECS-可能也并不能解决网络归属问题"><a href="#ECS-可能也并不能解决网络归属问题" class="headerlink" title="ECS 可能也并不能解决网络归属问题"></a>ECS 可能也并不能解决网络归属问题</h3><p>在 <a href="https://tools.ietf.org/html/rfc7871" target="_blank" rel="noopener">RFC 7871</a> 中有提到，当增加 ECS 信息后将可能带来生日攻击（章节 11.2）。为了解决这个问题，当响应包中的 ECS 选项不够完整时，则应该被丢弃该 ECS 回复，即使请求中有 ECS 信息。</p>
<p>那么一旦这种例外的情况在用户的一般使用中出现，这个 DNS 便依然解决不了用户网络归属的问题。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>事实上，网络延迟和 DNS 解析是网站访问中很重要但可能并不会明显拖慢速度的环节。我们仍可以综合考虑访问速度和安全等多方面来选择使用本地递归 DNS：净网大使选个优质的公共 DNS，懒癌患者就自动获取 DNS，某 DNS 的钟情粉丝就继续抱住你那家那位去吧。</p>
<p>要是你是个仅仅只追求速度的 Windows PC 用户，CloudXNS 提供的“<em><strong>一键优化 DNS 设置</strong></em>”（<a href="http://tools.cloudxns.net/DNS一键优化v1.0.16.919.zip" target="_blank" rel="noopener">点击下载</a>）工具可以一用。</p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> Public DNS </tag>
            
            <tag> 公共 DNS </tag>
            
            <tag> 本地 DNS </tag>
            
            <tag> 递归 DNS </tag>
            
            <tag> edns-client-subnet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用公共 DNS 上网的弊端（一）]]></title>
      <url>https://ephen.me/2017/PublicDns_1/</url>
      <content type="html"><![CDATA[<p>作为资深网民的我们都知道，本地 DNS 是非常重要的，它能决定你到底能不能上网。</p>
<p>由于本地运营商 DNS 常常被大家诟病容易遭到劫持等风险，使得很多人选用公共 DNS 来作为本地上网用的 DNS ，例如 114DNS 、阿里 DNS 等。</p>
<p>但是，喜欢用公共 DNS 的你，知道公共 DNS 在上网时会有什么弊端吗？</p>
<a id="more"></a>
<h2 id="智能-DNS-和-CDN-简介"><a href="#智能-DNS-和-CDN-简介" class="headerlink" title="智能 DNS 和 CDN 简介"></a>智能 DNS 和 CDN 简介</h2><p>中国国内的互联网环境复杂，跨地区跨运营商之间的网络延迟较大，所以出现有智能 DNS 和 CDN 来解决这个问题。我所在的公司，北京快网就是咱们国内一家老牌的 CDN 服务提供商；<a href="https://www.cloudxns.net" target="_blank" rel="noopener">CloudXNS</a> 是一款智能 DNS 域名解析产品。</p>
<p>如果互联网站主财大气粗技术牛，在全国各地各运营商乃至全球都专门独立部署了站点，那么他可以通过智能 DNS 分区分运营商分别将域名解析到对应的站点；如果站主不具备这样多点部署的条件，那么他可以通过我们公司完成 CDN 的需求。</p>
<p>这就是智能 DNS 和 CDN 的最初的应用。</p>
<p>没错，就是【加速】。让北京联通的网民能访问到北京联通（或附近同运营商）的站点，广东电信访问到广东电信（或附近同运营商）的站点，从而达到加速的目的。</p>
<p>而智能 DNS 或 CDN 在调度判断网民归属时，是通过网民的本地 DNS 所属 IP 段来的。</p>
<p>所以，今天我要讨论到的公共 DNS 上网的弊端就是：<strong>它一定程度上违背了智能 DNS 和 CDN 加速的规则</strong>，变得不快了。</p>
<h2 id="本地-DNS-和公共-DNS"><a href="#本地-DNS-和公共-DNS" class="headerlink" title="本地 DNS 和公共 DNS"></a>本地 DNS 和公共 DNS</h2><p>网民在访问网站时，其本地 DNS 会去请求网站地址，如果本地 DNS 没有，它会再向上级 DNS 请求查询。</p>
<p>公共 DNS 是由一些企业提供的本地 DNS 服务，通常会给用户提供一个或多个 Anycast IP ，但实际背后有多个集群服务。</p>
<p>当用户上网时，客户端会向这个集群中的 A 地址请求解析，这个 A 地址被称为 DNS 入口；智能 DNS 在判断网民用户来源时，会使用 DNS 集群中的 B 地址与 IP 库进行比对，这个 B 地址被称为 DNS 出口。</p>
<p>所以上网过程中，用户将从 DNS 入口获取解析，NS 服务器会向 DNS 出口分配智能解析。如果用户的 DNS 入口没有请求的解析缓存时，将向上级 DNS 请求查询，最终会请求到 NS 服务器，然后用户才获取到解析结果。</p>
<p>那么当用户的 DNS 入口和 DNS 出口和用户的实际网络不一致时，就可能导致智能 DNS 提供的解析结果并不是最优的。</p>
<h2 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h2><p>北京快网官方门户网站 <a href="http://www.fastweb.com.cn" target="_blank" rel="noopener">www.fastweb.com.cn</a> 使用了<a href="https://www.newdefend.com" target="_blank" rel="noopener">牛盾云安全</a>作了页面加速和安全防护，正常情况下使用运营商 DNS 在全国各地的解析情况如下图所示：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426154730.png" alt="FastWeb 分区解析"></p>
<p>这是通过智能 DNS 和 CDN 双剑合璧的最优解析结果。</p>
<p>例如灰姑娘所在地是湖北武汉，当使用本地运营商 DNS 并存在缓存时，<code>ping www.fastweb.com.cn</code>时延如下：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426154755.png" alt="本地 DNS "></p>
<p>而我在本地模拟<code>ping</code>浙江台州的牛盾节点<code>122.226.182.43</code>，会看到时延稍微长一些：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426154839.png" alt="牛盾台州"></p>
<p>那么公共 DNS 的出入口会不会跟实际网络不一致呢？</p>
<h3 id="公共-DNS-的入口"><a href="#公共-DNS-的入口" class="headerlink" title="公共 DNS 的入口"></a>公共 DNS 的入口</h3><p>以阿里 DNS 223.5.5.5 为例。</p>
<p>我在本地对阿里 DNS 的做了一个路由跟踪：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426154905.png" alt="DNS入口"></p>
<p>可以发现，阿里 DNS 的入口在浙江杭州，而我本地网络是湖北电信。</p>
<h3 id="公共-DNS-的出口"><a href="#公共-DNS-的出口" class="headerlink" title="公共 DNS 的出口"></a>公共 DNS 的出口</h3><p>刚刚和北京同事进行远程会议时提到这个议题，正好他的 PC 配置的是阿里公共 DNS ，我们让他访问<a href="http://tools.cloudxns.net/index/diag" target="_blank" rel="noopener"> CloudXNS 运维工具 - 本地 DNS 优化诊断</a>获取其出口 DNS ，得到的反馈如下：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426154956.png" alt="出口DNS"></p>
<p>本地网络北京联通，出口 DNS 竟是广东电信，这远远比我前述举例的湖北电信和浙江电信的差距大得多。</p>
<h3 id="解析影响验证"><a href="#解析影响验证" class="headerlink" title="解析影响验证"></a>解析影响验证</h3><p>该同事分别用阿里和运营商 DNS 对网易域名做了测试对比。</p>
<p><em>使用阿里 DNS 测试结果：</em></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426155020.png" alt="阿里 DNS"></p>
<p><em>使用运营商 DNS测试结果：</em></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426155043.png" alt="运营商 DNS"></p>
<p>使用运营商 DNS 时，<code>ping</code> 值快得多。</p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> Public DNS </tag>
            
            <tag> 公共 DNS </tag>
            
            <tag> 本地 DNS </tag>
            
            <tag> 递归 DNS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[成功取得项目管理专业人士资格认证]]></title>
      <url>https://ephen.me/2017/GetPMPCertificate/</url>
      <content type="html"><![CDATA[<p><strong>各位看官请注意：</strong></p>
<p><strong>此文章涉及本姑娘个人信息，文章公开代表逛到这里的人可以看，但并不代表我同意被传播。</strong></p>
<a id="more"></a>
<hr>
<p>其实就是个 PMP 考试。</p>
<p>PMP ，全称 Project Management Professional，由美国项目管理协会（Project Management Institute(PMI)）发起的，严格评估项目管理人员知识技能是否具有高品质的资格认证考试。</p>
<p>这年头，考 PMP 的通过率真的蛮高。但，持续学习是一种精神。要问自己从备考过程中学到了什么，通过考试只是附加值而已。</p>
<p>当然，没有通过会是很桑心的，毕竟花了好几千大洋呀。虽说不花钱照样能学到东西，但是花钱了没花钱那学习态度肯定是不一样的。花钱报考，只是个学习的助推剂罢了。</p>
<hr>
<p>所谓项目管理，是把一件事情做好的统筹方法。这件事情就是个项目，譬如开发一个产品卖到客户手上，又譬如考个 PMP 证书。</p>
<p>在这个知识体系中，主要可通俗理解到如下几个方面：</p>
<ol>
<li>在项目的初始，作为 PM 要认识到为什么要做这个项目，以及如果要做这个项目要与哪些人搭上关系；</li>
<li>接着，梳理需求、划定范围，并为项目创建关于时间进度、人力、成本、质量、风险、采购、沟通等方方面面的计划；</li>
<li>按计划执行项目的时候，合理管理人员做好团队建设，制定一系列的工作质量标准 SOP 流程；</li>
<li>各角度反复监控执行过程，让项目的进程不偏离既定的计划轨道；</li>
<li>最终完成项目，交付给客户，并形成经验教训。</li>
</ol>
<p>也就是 PMP 管理体系中的<code>启动</code>、<code>规划</code>、<code>执行</code>、<code>监控</code>和<code>收尾</code>五大过程组。</p>
<p>由于它并不局限于某个行业或某一类行业，所以其内容非常繁杂，并且以人为本的因素很多。因而对于整个体系的理解，并结合项目经验显得尤为重要。</p>
<hr>
<p>在这次备考过程中，我在理解知识体系的时候代入的是我在上家公司的工作经验。</p>
<p>上家公司我就是身在一个软件实施项目组，参与并负责完成了项目中的很多事情，加之公司的工作流程非常标准（不记得是 CMMI4 还是 CMMI5 级别），学习过程中的所有活动我都能找到工作原型。所以尽管备考过程也比较辛苦，但是相对来说，我还是比较轻松的。</p>
<p>我想了下，如果我从没有上家公司的工作经历，仅仅是在武汉快网的环境下，也许会吃力得多。武汉快网的管理是互联网扁平化风格，工作中与大部分管理知识没有交集。</p>
<p>不过像 PMBOK 开篇就提出的，任何管理都是要基于企业文化的，并不是说符合书中就是最好的，不符合就不好。<strong>适合的才是最好的。</strong></p>
<hr>
<p>要参加 PMP 考试是必须要报培训班的，我在武汉报的是“世纪卓越”，有人也想报名的话可以找我推荐。好像推荐可以少交点培训费吧，不过我并得不到好处的唷~</p>
<p>周末班上课，压力是挺大的。从早上 9 点除了中午约一小时吃饭时间外连续上到下午 5:30 ，上午下一次课，下午下两次课，时间仅够排队去上厕所的。讲课内容很多很满，上起课来可能会觉得脑容量不太够。</p>
<p>为什么压力这么大呢？</p>
<ol>
<li>PMP 一年考试 4 次，每季度一次，然后这些培训讲师会到多个地方授课，带很多很多的学生；</li>
<li>PMP 考试 pmi 不会提供原题和答案，这些培训公司和老师们要组织和整理每一次刚考完的考生记题并讨论出标准的权威的答案；</li>
<li>老师要写书、写讲义，之后再根据讲义讲课；</li>
<li>一般学生要先预习后再上课，内容很多，大家又都是上班族。</li>
</ol>
<p>所以上课时间就压缩到考前一个月了。总共上 5 天课，安排一天模拟考，3个周末搞定这些。</p>
<p>马上 2018 年就要换 PMP 教材了，建议有考虑考 PMP 并且还没开始行动的童鞋最早报明年 9 月份的吧。一来是错峰（今年的报考人数井喷得不行），二来让前面俩季度的学生试试水、讲师再积累下新版本经验，再来就是刚换教材可能不会有较大的难度。</p>
<p>我们今年的考试很难。听说还有些新版中的超纲内容，大概今年的几次考试都是为版本过渡而生的。</p>
<hr>
<p>这次考试，除了我要学的知识，还收获了很多。</p>
<p>一开始刚报名的时候没进入状态，后来发现群里的小伙伴们都有很多人书看完了还梳理了各种心得，我就慌了。</p>
<p>我把书放在公司，每天晚上在公司加班看书学习，并且一有时间就泡在群里尝试着给同学们解答问题。</p>
<p>因为我经常回答问题，所以收获了很多朋友。我在武汉组织了一个学习小组，然后深圳也有一些小伙伴组了个<code>学霸</code>群。</p>
<p>哈，其实<code>学霸</code>群就是备考累了歇息用的吹水群辣。。看起来大家都在争自己怎样怠慢学习，又暗暗较劲的要考个好成绩，再去攻其他的证书。</p>
<p>最终我两个群的小伙伴全数通过考试。</p>
<hr>
<p>证书证书，这肯定是要晒的咯！</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426161446.png" alt="PMP证书"></p>
<hr>
<p><strong>未经允许，不得传播此文中图片及任何个人信息。</strong></p>
<p><strong>情节严重者，将追究其法律责任。</strong></p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[什么情况下 DNS 会使用 TCP 传输协议？]]></title>
      <url>https://ephen.me/2017/dns_tcp/</url>
      <content type="html"><![CDATA[<p>我们知道， DNS 是同时占用 UDP 和 TCP 的 53 端口传输数据的，这种单个应用协议同时使用两种传输协议的情况，在 TCP/IP 栈中也算是个异类。</p>
<p>当我们在使用 tcpdump 、 WireShark 等抓包工具分析时，会发现几乎所有的 DNS 应用都是在使用 UDP 传输。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426154104.png" alt="DNS查询使用UDP协议传输"></p>
<p>那么，为什么 DNS 还要占用 TCP 的端口，到底什么情况下才会用到 TCP 呢？</p>
<a id="more"></a>
<hr>
<h2 id="一点基础知识"><a href="#一点基础知识" class="headerlink" title="一点基础知识"></a>一点基础知识</h2><p>TCP 全称 Transmission Control Protocol （传输控制协议）， UDP 全称 User Data Protocol （用户数据报协议），它们都是 OSI 七层模型中的传输层协议。灰姑娘大学时是网络工程专业的学渣，虽没学到个啥，但好巧不巧，就记得某些考题逢考必有。比如：</p>
<h3 id="TCP-和-UDP-的区别"><a href="#TCP-和-UDP-的区别" class="headerlink" title="TCP 和 UDP 的区别"></a>TCP 和 UDP 的区别</h3><table>
<thead>
<tr>
<th>特性</th>
<th>TCP</th>
<th>UDP</th>
</tr>
</thead>
<tbody>
<tr>
<td>连接性</td>
<td>三次握手</td>
<td>不需要建立连接</td>
</tr>
<tr>
<td>可靠性</td>
<td>可靠，丢包会自动重传</td>
<td>不可靠</td>
</tr>
<tr>
<td>有序性</td>
<td>会对传输乱序的消息重新排列</td>
<td>可能乱序</td>
</tr>
<tr>
<td>传输速度</td>
<td>慢，因为要建立连接并保证可靠和有序</td>
<td>快</td>
</tr>
<tr>
<td>传输及控制</td>
<td>通过字节流传输，无界，有拥塞控制机制（慢开始、拥塞避免、快重传、快恢复）</td>
<td>数据包都是单独的，有界，不作拥塞控制</td>
</tr>
<tr>
<td>资源消耗</td>
<td>需要更多资源以传递更多信息，包头比较大（需要 20 字节）</td>
<td>头部只需 8 个字节</td>
</tr>
</tbody>
</table>
<p>通过上述区别，我们不难看出， TCP 主要应用在对可靠性比较高的场合，比如 Telnet 、 FTP 等；而 UDP 主要应用于实时性较高的场合，例如即时聊天。</p>
<h2 id="DNS-查询用的传输协议"><a href="#DNS-查询用的传输协议" class="headerlink" title="DNS 查询用的传输协议"></a>DNS 查询用的传输协议</h2><p>前面提到，一般我们看到的绝大多数 DNS 查询是用的 UDP 传输。</p>
<h3 id="域名解析时大多使用-UDP-协议"><a href="#域名解析时大多使用-UDP-协议" class="headerlink" title="域名解析时大多使用 UDP 协议"></a>域名解析时大多使用 UDP 协议</h3><p>客户端在请求一个域名的解析结果时，实际上需要经过重重 DNS 查询。（对 DNS 不太了解的童鞋可以先学下这个：<a href="https://www.cloudxns.net/Support/detail/id/737.html" target="_blank" rel="noopener">从理论到实践，全方位认识DNS（理论篇）</a>）</p>
<p>一方面，要保证用户端的快速响应， TCP 的三次握手则过于繁冗；另一方面， DNS 解析查询即使出现异常，网民用户大不了重新申请一次查询，因而对可靠性的要求并没有那么高。</p>
<p>所以日常的域名解析需求使用 UDP 传输即可。</p>
<h3 id="具备特殊要求的域名解析使用-TCP-协议"><a href="#具备特殊要求的域名解析使用-TCP-协议" class="headerlink" title="具备特殊要求的域名解析使用 TCP 协议"></a>具备特殊要求的域名解析使用 TCP 协议</h3><p>由于UDP是按照数据包来传输的，整个包最大只能 512 字节。一般正常情况下，用来 DNS 查询是绰绰有余的。但当解析配置过于复杂，或者记录值过长（如： TXT 、 RRSIG 记录）使得 UDP 无法承载的情况下，就有必要转换 TCP 查询。</p>
<p>由于基于 TCP 的域名解析非常少见，大多数域名厂商是不支持的， CloudXNS 也不例外。然而同域名同主机同线路的同类型解析将会封装到一个 UDP 包传输，如果内容过多（超过 512 字节），该数据包可能会承载不下。</p>
<p>这也是为什么 CloudXNS 中即使 A 、 TXT 、 MX 等类型记录尽管不与自身互斥，我们仍然会对同域名下同一主机同一线路限制解析记录条数的原因。</p>
<p>当然，国外的一些域名解析商这方面可能比我们严谨些，还是有一部分厂家是支持当数据过长时转用 TCP 传输的。比如：<a href="https://dns.he.net" target="_blank" rel="noopener">He.Net</a></p>
<blockquote>
<p>我们来做个测试：</p>
</blockquote>
<ol>
<li>将 <code>chinatesters.com</code> 配置一个子域名 <code>test</code> ， NS 指向 He.net 的域名服务器。如图所示：<br><img src="https://pek3b.qingstor.com/imephen/20190426154445.png" alt="子域 DNS 配置"></li>
<li>将 <code>test.chinatesters.com</code> 添加到 He.net 的域名控制面板，并添加一条 TXT 记录，值为<codecode>（长度： 768 ）。如下图：<br><img src="https://pek3b.qingstor.com/imephen/20190426154534.png" alt="超长 TXT 记录配置"></li>
<li>配置生效后，使用 <code>tcpdump</code> 跟踪本地网卡的 53 端口，同时新开窗口用 <code>dig</code> 命令直接向 <code>ns1.he.net</code> 请求查询该 TXT 记录。</li>
</ol>
<p><em>DNS 查询记录：</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#dig aaaaaaaaaa.test.chinatesters.com TXT @ns1.he.net</span><br><span class="line">;; Truncated, retrying in TCP mode.</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.47.rc1.el6 &lt;&lt;&gt;&gt; aaaaaaaaaa.test.chinatesters.com TXT @ns1.he.net</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56555</span><br><span class="line">;; flags: qr aa rd; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line">;; WARNING: recursion requested but not available</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;aaaaaaaaaa.test.chinatesters.com. IN	TXT</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">aaaaaaaaaa.test.chinatesters.com. 300 IN TXT	&quot;111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111&quot; &quot;011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111&quot; &quot;101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111&quot; &quot;11&quot;</span><br><span class="line"></span><br><span class="line">;; Query time: 221 msec</span><br><span class="line">;; SERVER: 216.218.130.2#53(216.218.130.2)</span><br><span class="line">;; WHEN: Tue Jul 18 13:58:50 2017</span><br><span class="line">;; MSG SIZE  rcvd: 833</span><br></pre></td></tr></table></figure>
<p><em>tcpdump 网卡跟踪记录：</em></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426154616.png" alt="tcpdump 网卡跟踪"></p>
<p>查询记录结果的第一句便提示了 <code>Truncated, retrying in TCP mode.</code> ，表示启用了 TCP 协议查询。</p>
<p>网卡抓包也展示了 <code>seq</code> 、 <code>ack</code> 等 TCP 协议中的三次握手过程，最后返回了域名 <code>aaaaaaaaaa.test.chinatesters.com.</code> 的 TXT 记录值。</p>
<p>事实上，根据 <a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a> 章节 4.2 ，<strong>DNS 解析查询优先使用 UDP ，当 UDP 完成不了的情况下，则转换 TCP 查询</strong>。上述展示的就是这样的实例。</p>
<p>当看完 RFC 的这一章节，我们会发现，基于 TCP 协议的 DNS 应用还有一个更重要的作用。</p>
<h2 id="DNS-区域传送（zone-transfer）"><a href="#DNS-区域传送（zone-transfer）" class="headerlink" title="DNS 区域传送（zone-transfer）"></a>DNS 区域传送（zone-transfer）</h2><p>由于 DNS 服务器作为互联网基础设施，一般都会分布式的设置多台冗余备份，各个域名的配置在多个服务器之间的同步过程便被称之为区域传送。我在过去的文章《<a href="/2016/dotkp-zone-dns-remove/">隔壁粗事了！朝鲜顶级域 .kp 域名 DNS 数据配置可被转移</a>》中提到过“区域传送”的概念，不太了解的童鞋可先查看下。</p>
<p>区域传送时，辅域名服务器将向主服务器拉取数据。该数据同步传送的量往往比较大且不容有失，该操作没有较高的时效性要求只需要隔段时间定时执行一遍即可。所以<strong>必须采用可靠性高的 TCP 传输协议</strong>。</p>
<p>CloudXNS 的 NS 服务器间的区域同步技术是公司自研的一套机制，虽然亦是使用的 TCP 传输，但由于专利技术保密，不便提供示例。下次咱们大概可以在搭建一套开源的 DNS 服务器的折腾过程中再引申下关于区域传送时应用 TCP 协议的知识。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li>《计算机网络（第五版）》.谢希仁</li>
<li><a href="https://tools.ietf.org/html/rfc1034" target="_blank" rel="noopener">RFC 1034</a></li>
<li><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> TCP </tag>
            
            <tag> UDP </tag>
            
            <tag> 协议 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSL 证书颁发机构将对域名强制 CAA 检查，到底什么是 CAA ？ CAA 记录详解]]></title>
      <url>https://ephen.me/2017/dnsrr-caa/</url>
      <content type="html"><![CDATA[<h2 id="强制-CAA-检查的提议"><a href="#强制-CAA-检查的提议" class="headerlink" title="强制 CAA 检查的提议"></a>强制 CAA 检查的提议</h2><p>2017 年 3 月 7 日， CA|B Forum （一个全球证书颁发机构与浏览器的技术论坛）发起了一项关于对域名强制检查 CAA 的一项提议的投票，获得 187 票支持，投票有效，提议通过。</p>
<p>提议通过后，将于 <strong>2017 年 9 月 8 日</strong>根据 Mozilla 的 Gervase Markham 提出的检查 CAA 记录作为基准要求来实施。</p>
<p>详情参见： <a href="https://cabforum.org/2017/03/08/ballot-187-make-caa-checking-mandatory/" target="_blank" rel="noopener">Ballot 187 – Make CAA Checking Mandatory</a></p>
<h2 id="什么是-CAA-记录？"><a href="#什么是-CAA-记录？" class="headerlink" title="什么是 CAA 记录？"></a>什么是 CAA 记录？</h2><p>CAA ，全称 Certificate Authority Authorization ，即证书颁发机构授权。它为了改善 PKI （ Public Key Infrastructure ：公钥基础设施）生态系统强度、减少证书意外错误发布的风险，通过 DNS 机制创建 CAA 资源记录，从而限定了特定域名颁发的证书和 CA （证书颁发机构）之间的联系。从此，再也不能是任意 CA 都可以为任意域名颁发证书了。</p>
<a id="more"></a>
<p>关于 CAA 记录，其实早在 4 年前便在 <a href="https://datatracker.ietf.org/doc/rfc6844/" target="_blank" rel="noopener">RFC 6844</a> 中有定义，但由于种种原因配置该 DNS 资源记录的网站寥寥无几。如今， SSL 证书在颁发之前对域名强制 CAA 检查，就对想要 https 访问的网站域名提出了解析配置的要求。</p>
<h2 id="CAA-资源记录详解"><a href="#CAA-资源记录详解" class="headerlink" title="CAA 资源记录详解"></a>CAA 资源记录详解</h2><p>CAA 记录可以控制单域名 SSL 证书的发行，也可以控制通配符证书。当域名存在 CAA 记录时，则只允许在记录中列出的 CA 颁发针对该域名（或子域名）的证书。</p>
<p>在域名解析配置中，咱们可以为整个域（如 example.com ）或者特定的子域（如 subzone.example.com ）设置 CAA 策略。当为整域设置 CAA 资源记录时，该 CAA 策略将同时应用于该域名下的任一子域，除非被已设置的子域策略覆盖。</p>
<h3 id="CAA-记录格式"><a href="#CAA-记录格式" class="headerlink" title="CAA 记录格式"></a>CAA 记录格式</h3><p>根据规范（ <a href="https://www.rfc-editor.org/rfc/rfc6844.txt" target="_blank" rel="noopener">RFC 6844</a> ）， CAA 记录格式由以下元素组成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAA &lt;flags&gt; &lt;tag&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<p>释义：</p>
<table>
<thead>
<tr>
<th>元素</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>CAA</td>
<td>DNS 资源记录类型</td>
</tr>
<tr>
<td><code>&lt;flags&gt;</code></td>
<td>认证机构限制标志</td>
</tr>
<tr>
<td><code>&lt;tag&gt;</code></td>
<td>证书属性标签</td>
</tr>
<tr>
<td><code>&lt;value&gt;</code></td>
<td>证书颁发机构、策略违规报告邮件地址等</td>
</tr>
</tbody>
</table>
<p><code>&lt;flags&gt;</code> 定义为 0~255 无符号整型，取值：</p>
<blockquote>
<p>Issuer Critical Flag：0<br>1~7 为保留标记</p>
</blockquote>
<p><code>&lt;tag&gt;</code> 定义为 US-ASCII 和 0~9 ，取值：</p>
<blockquote>
<p>CA 授权任何类型的域名证书（ Authorization Entry by Domain ） : issue<br>CA 授权通配符域名证书（ Authorization Entry by Wildcard Domain ） : issuewild<br>指定 CA 可报告策略违规（ Report incident by IODEF report ） : iodef<br>auth 、 path 和 policy 为保留标签</p>
</blockquote>
<p><code>&lt;value&gt;</code> 定义为八位字节序列的二进制编码字符串，一般填写格式为：</p>
<blockquote>
<p>[domain] [“;” * 参数]</p>
</blockquote>
<h3 id="CAA-资源记录示例"><a href="#CAA-资源记录示例" class="headerlink" title="CAA 资源记录示例"></a>CAA 资源记录示例</h3><p>当需要限制域名 <code>example.com</code> 及其子域名可由机构 <code>letsencrypt</code> 颁发不限类型的证书，同时可由 <code>Comodo</code> 颁发通配符证书，其他一律禁止，并且当违反配置规则时，发送通知邮件到 <a href="mailto:`example@example.com" target="_blank" rel="noopener">`example@example.com</a>` 。</p>
<p>配置如下（为便于理解，二进制 Value 值已经过转码，下同）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example.com.  CAA 0 issue &quot;letsencrypt.org&quot;</span><br><span class="line">example.com.  CAA 0 issuewild &quot;comodoca.com&quot;</span><br><span class="line">example.com.  CAA 0 iodef &quot;mailto:example@example.com&quot;</span><br></pre></td></tr></table></figure>
<p>如果子域名有单独列出证书颁发要求，例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">example.com.  CAA 0 issue &quot;letsencrypt.org&quot;</span><br><span class="line">alpha.example.com.  CAA 0 issue &quot;comodoca.com&quot;</span><br></pre></td></tr></table></figure>
<p>那么，因子域策略优先，所以只有 Comodo 可以为域名 <code>alpha.example.com.</code> 颁发证书。</p>
<h3 id="CAA-记录查询"><a href="#CAA-记录查询" class="headerlink" title="CAA 记录查询"></a>CAA 记录查询</h3><p>CAA 记录是一个相对较新的资源记录，目前很多工具并不支持。以 <code>dig</code> 为例，不能适用其标准语法。若需要查询 CAA 记录， <code>dig</code> 时需要直接指定 RR 类型（ type257 ）。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ dig google.com type257</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.8.3-P1 &lt;&lt;&gt;&gt; google.com type257</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 64266</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;google.com.            IN  TYPE257</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">google.com.     86399   IN  TYPE257 \# 19 0005697373756573796D616E7465632E636F6D</span><br><span class="line"></span><br><span class="line">;; Query time: 51 msec</span><br><span class="line">;; SERVER: 8.8.8.8#53(8.8.8.8)</span><br><span class="line">;; WHEN: Thu Dec 29 21:07:18 2016</span><br><span class="line">;; MSG SIZE  rcvd: 59</span><br></pre></td></tr></table></figure>
<p>该查询的输出是二进制编码记录，需要转码才能知道具体 CAA 策略。</p>
<h2 id="互联网证书环境前景剖析"><a href="#互联网证书环境前景剖析" class="headerlink" title="互联网证书环境前景剖析"></a>互联网证书环境前景剖析</h2><blockquote>
<p>以下所有言论仅代表个人观点。</p>
</blockquote>
<p>CAA 记录规范的提出已 4 年之久，但从未被普及；如今 CA|B Forum 关于强制 CAA 检查的提议亦结束 3 月有余，支持检查 CAA 的证书颁发机构依旧寥寥无几，支持配置 CAA 记录的 DNS 厂商更是少之又少。因而个人认为，这项规范的实施进程预计还是会挺艰难的。</p>
<p>不过从互联网安全发展来看，互联网受众越来越大，概念、架构越来越复杂，社会的重视程度一直在稳步提高。全面 https 也推行有一段时间了，强制 CAA 的普及大概只是时间问题。</p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> https </tag>
            
            <tag> SSL </tag>
            
            <tag> CAA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给网站添加备案号展示]]></title>
      <url>https://ephen.me/2017/beian/</url>
      <content type="html"><![CDATA[<h2 id="折腾原因"><a href="#折腾原因" class="headerlink" title="折腾原因"></a>折腾原因</h2><p>由于在公司折腾 <a href="https://www.cloudxns.net" target="_blank" rel="noopener">CloudXNS</a> 和<a href="https://www.newdefend.com" target="_blank" rel="noopener">牛盾</a>，有个备案比较好开展工作。正好上次公司 CDN 网监来查，要求我把备案展示出来。想想这事情也该办了，搞起……</p>
<p>唔，还是提一嘴，姐无任何前端知识储备，大牛路过请点右上红叉关闭。</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>备案号放至左侧边栏下方，链接到工信部网站；</li>
<li>备案号可进入主题 <code>_config.yml</code> 中配置修改；</li>
<li>文章页显示目录时不做展示；</li>
<li>放弃适配移动端。</li>
</ol>
<a id="more"></a>
<h2 id="折腾过程"><a href="#折腾过程" class="headerlink" title="折腾过程"></a>折腾过程</h2><h3 id="添加备案号并写入配置文件"><a href="#添加备案号并写入配置文件" class="headerlink" title="添加备案号并写入配置文件"></a>添加备案号并写入配置文件</h3><p>这部分比我想象中简单多了。照配置文件的 <code>AboutMe</code> 抄一抄居然就完成了。</p>
<p><code>left-col.ejs</code> 文件中添加以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.beian)&#123; %&gt;</span><br><span class="line">    &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"beian"</span> href=<span class="string">"http://www.miitbeian.gov.cn/state/outPortal/loginPortal.action"</span> target=<span class="string">"_blank"</span>&gt;&lt;%=theme.beian%&gt;&lt;/a&gt;</span><br><span class="line">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure>
<p><code>_config.yml</code> 中添加：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 是否展示备案号</span></span><br><span class="line"><span class="comment">### beian: false	# 不开启</span></span><br><span class="line"><span class="attr">beian:</span> <span class="string">鄂ICP备15003996号</span></span><br></pre></td></tr></table></figure>
<p>功能测试通过！</p>
<h3 id="备案号模块样式"><a href="#备案号模块样式" class="headerlink" title="备案号模块样式"></a>备案号模块样式</h3><p>样式主体是照抄的博客说明模块，以下是样式代码，续写到 <code>main.styl</code> 文件中的 <code>#header</code> 部分：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.beian</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">bottom</span>: <span class="number">15px</span>;</span><br><span class="line">	<span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">	<span class="attribute">cursor</span>: pointer;</span><br><span class="line">	<span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">	<span class="attribute">float</span>:none;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">	<span class="attribute">display</span>: -webkit-box;</span><br><span class="line">	<span class="attribute">-webkit-box-orient</span>: horizontal;</span><br><span class="line">	<span class="attribute">-webkit-box-pack</span>: center;</span><br><span class="line">	<span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">	li&#123;</span><br><span class="line">		<span class="selector-tag">cursor</span>: <span class="selector-tag">default</span>;</span><br><span class="line">		<span class="selector-tag">a</span>&#123;</span><br><span class="line">			<span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">			<span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>bottom</code> 表示在页面底端保留的高度，配合 <code>position: relative;</code> 以保持在页面底端。</p>
<h3 id="显示目录时隐藏备案号"><a href="#显示目录时隐藏备案号" class="headerlink" title="显示目录时隐藏备案号"></a>显示目录时隐藏备案号</h3><p>本来不想做这个的，后来发现目录在时摆不好这个位置，同时如果目录过长过多会影响页面的美观，因此还是隐藏比较好。</p>
<p>目录是否显示的原本样式是在 <code>toc.ejs</code> 里面添加的 <code>&lt;style&gt;&lt;/style&gt;</code> 标签，在标签中添加：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.beian</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就可以了。</p>
<h3 id="点击“显示目录”和“隐藏目录”时切换动画"><a href="#点击“显示目录”和“隐藏目录”时切换动画" class="headerlink" title="点击“显示目录”和“隐藏目录”时切换动画"></a>点击“显示目录”和“隐藏目录”时切换动画</h3><p>侧边栏目录初始状态动画展现在 <code>pc.js</code> 文件中，把 <code>.beian</code> 元素加进去：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> miniArchives = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">".post-list"</span>).addClass(<span class="string">"toc-article"</span>);</span><br><span class="line">        $(<span class="string">"#post-nav-button &gt; a:nth-child(2)"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">"#post-nav-button .fa-bars,#post-nav-button .fa-times"</span>).toggle();</span><br><span class="line">            $(<span class="string">".post-list"</span>).toggle(<span class="number">300</span>);</span><br><span class="line">            <span class="keyword">if</span> ($(<span class="string">".toc"</span>).length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                $(<span class="string">"#toc, #tocButton"</span>).toggle(<span class="number">200</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> ($(<span class="string">".switch-area"</span>).is(<span class="string">":visible"</span>)) &#123;</span><br><span class="line">                        $(<span class="string">"#toc, .switch-btn, .switch-area, .beian"</span>).toggle();</span><br><span class="line">                        $(<span class="string">"#tocButton"</span>).attr(<span class="string">"value"</span>, yiliaConfig.toc[<span class="number">0</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                $(<span class="string">".switch-btn, .switch-area, .beian"</span>).fadeToggle(<span class="number">300</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>然后 <code>toc.js</code> 文件中有原本就有其他元素的切换动画，同样加个 <code>.beian</code> 即可：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#tocButton"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">"#toc"</span>).is(<span class="string">":hidden"</span>)) &#123;</span><br><span class="line">        $(<span class="string">"#tocButton"</span>).attr(<span class="string">"value"</span>, valueHide);</span><br><span class="line">        $(<span class="string">"#toc"</span>).slideDown(<span class="number">320</span>);</span><br><span class="line">        $(<span class="string">".switch-btn, .switch-area, .beian"</span>).fadeOut(<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="string">"#tocButton"</span>).attr(<span class="string">"value"</span>, valueShow);</span><br><span class="line">        $(<span class="string">"#toc"</span>).slideUp(<span class="number">350</span>);</span><br><span class="line">        $(<span class="string">".switch-btn, .switch-area, .beian"</span>).fadeIn(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="测试成功"><a href="#测试成功" class="headerlink" title="测试成功"></a>测试成功</h3><p>测试时chrome调试外还特地拿移动设备也试了下，并没有备案号，符合预期。</p>
<p>简单分析看了下，发现移动端的功能基本集中于 <code>mobile.js</code> 文件中，这个文件我并没有添加备案的相关信息。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>蛮早就想搞这个备案号展示的，可是因为害怕搞不定拖了两三个月，可真正做起来不到半天就搞完了。所以，哪有那么难？</p>
<p>总的来说，只要有想法，瞎抄都能抄到答案，差别只在于愿不愿意去做。</p>
<p>很多其他事情大概也是一样的：<strong>没做的时候以为是大山，做了才发现很简单。</strong></p>
]]></content>
      
        <categories>
            
            <category> 博客折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 备案 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[几乎花了一个下午的时间参观了风河博客]]></title>
      <url>https://ephen.me/2016/fenghe-blog/</url>
      <content type="html"><![CDATA[<p>2015 年 CloudXNS “重出江湖”的时候，我们做了个让用户写体验文章的活动，风河博客的一篇《<a href="http://blog.dnsbed.com/?p=1497" target="_blank" rel="noopener">谈谈 CloudXNS </a>》吸引了我的眼球。</p>
<a id="more"></a>
<p>和其他人通篇描述智能 DNS 功能不同，这篇文章着重分析了底层 NS 服务的问题，并提了一些建议。于是我很感兴趣，翻看起这个博客来。</p>
<p>也许我并不是一个专业研究 DNS 的人，但是我却挺乐意学习这样的内容以丰富自己的工作。翻看风河博客发现，该主人也是做 DNS 的，并且对 NS 的研究还是蛮多的。所以对 CloudXNS 来讲，他们也是竞争对手，不过那又有什么关系呢？</p>
<p>博客内容很丰富，我看了很久，也学到了不少东西。很赞哦！</p>
<p>Mark几篇不错的内容（希望作者不会删，我偶尔还能再去看看）：</p>
<ol>
<li><a href="http://blog.dnsbed.com/?p=129" target="_blank" rel="noopener">为什么 com 和 net 使用一组相同的名字服务器</a></li>
<li><a href="http://blog.dnsbed.com/?p=101" target="_blank" rel="noopener">记一次 DNS 故障：更新 NS 服务器要随之更新 Glue</a></li>
<li><a href="http://blog.dnsbed.com/?p=91" target="_blank" rel="noopener">为什么名字服务器必须注册？</a></li>
<li><a href="http://blog.dnsbed.com/?p=479" target="_blank" rel="noopener">尽量少用泛域名</a></li>
<li><a href="http://blog.dnsbed.com/?p=1820" target="_blank" rel="noopener">顶级域名启用泛记录的危害性</a></li>
<li><a href="http://blog.dnsbed.com/?p=442" target="_blank" rel="noopener">一个域名使用多家 DNS</a></li>
<li><a href="http://blog.dnsbed.com/?p=1922" target="_blank" rel="noopener"> DNS branding 设置示例</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 泛域名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谈谈上月 Dyn 遭受的 DDoS 攻击]]></title>
      <url>https://ephen.me/2016/dyn-crashed/</url>
      <content type="html"><![CDATA[<p>这件事情发森在美国时间的 2016 年 10 月 21 日，到今天大约已经过去了半个多月。</p>
<p>那几天，新闻铺天盖地，季风从墙外刮过长城，吹到中原，拂过我的耳朵。</p>
<p>当时看到这个消息时本想立即写一篇蹭它一波热度，一来是时间问题，二来想想我就一小博客也没必要跟风，也就作罢。</p>
<p>今天我整个回顾了下所有看过的新闻及各类文章分析，还是决定来谈一谈。</p>
<a id="more"></a>
<h2 id="事件概述"><a href="#事件概述" class="headerlink" title="事件概述"></a>事件概述</h2><p>想必很多人已经了解过了，不过为了看到这里的小伙伴不用再去翻看回忆，我简单描述一下。</p>
<p>最早刮来的是标题为《北美大半个网络瘫痪 原因竟和中国厂商有关》的新闻，事件当天大量北美用户发现 Twitter 、 Netflix 、 Paypal 、 GitHub 等常用网站无法访问，随后经过一系列的调查，发现是 Dyn 这家权威域名解析遭受 DDoS 攻击致 NS 节点挂掉。</p>
<p>本来这事 Dyn 公告一个事件处理情况就算告一段落了，谁知却被人揪出黑客是通过智能摄像头、 DVR 等物联网设备做肉鸡发起攻击的。</p>
<p>参考：<a href="https://zh.wikipedia.org/wiki/2016年Dyn网络攻击" target="_blank" rel="noopener"> 维基百科 -  2016 年 Dyn 网络攻击 </a></p>
<h2 id="DDoS-攻击手段"><a href="#DDoS-攻击手段" class="headerlink" title="DDoS 攻击手段"></a>DDoS 攻击手段</h2><p>DDos 攻击，全称“ Distributed Denial of Service Attack ”，即分布式拒绝服务攻击。</p>
<p>拒绝服务攻击（亦称洪水攻击）作为一种常见的网络攻击手法，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。当黑客使用网络上两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击时，便称为分布式拒绝服务攻击了。</p>
<p>去年我刚接触<a href="https://www.newdefend.com/" target="_blank" rel="noopener">牛盾</a>产品时，曾经有了解到有些黑客专门花钱买流量和肉鸡去 D 其竞争对手，黑市上的流量叫卖价格极低。</p>
<p>如今科技日渐发达，黑客们也与时俱进，用上了物联网设备，这下连攻击流量都不需要了。只需要其生产时植入后门或是生产程序漏洞就能达到目的。</p>
<h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><h3 id="安全问题不容小觑"><a href="#安全问题不容小觑" class="headerlink" title="安全问题不容小觑"></a>安全问题不容小觑</h3><p>据称，事件中的物联网设备由一个叫雄迈科技的公司生产，是由于默认密码被破解而被人利用植入了被公开源码的 Mirai 程序，于是这个公司莫名其妙被第三者了。</p>
<p>人间处处有深坑，只缺一个不留神。</p>
<p>网络安全问题是老生常谈了，我就问一句，你有没有哪个地方的密码是 <code>123456</code> ？</p>
<h3 id="要销量还是要质量？"><a href="#要销量还是要质量？" class="headerlink" title="要销量还是要质量？"></a>要销量还是要质量？</h3><p>物联网设备被利用，总的来说，还是隐射一个质量问题。这事让我不禁联想到年初盗版 Xcode 事件，就算是优秀的开发者用的是这样的软件来工作也会莫名被第三者……</p>
<p>现在科技发展尤为迅速，一不小心就跟不上时代的步伐。这个社会已经变得浮躁了起来，企业为追求性价比，招来能力修为不够的员工、用上了被植入后门的软硬件，即便产品成型后跟上了市场，那么质量呢？</p>
<p>反过来，扪心自问，作为消费者，是不是也没有那么在乎质量？</p>
<h3 id="权威DNS的扛D攻击能力"><a href="#权威DNS的扛D攻击能力" class="headerlink" title="权威DNS的扛D攻击能力"></a>权威DNS的扛D攻击能力</h3><p>DNS 是网络中非常脆弱的一环， CloudXNS 也是攻击不断。犹记得去年 CloudXNS 刚刚被站长们熟悉不久，便引来超大规模的竞争对手恶意攻击，致使我们不得不删除了硬件能力较差的几个海外节点的 Glue Record 配置。此后便是不断的优化运维架构、提升硬件加固防火墙之路。</p>
<p>不论是 Dyn 也好，CloudXNS 也好，我们作为专业提供解析服务的产品都有些吃力，那些小注册商甚至个人商家提供的自带 DNS 解析的扛 D 能力又如何保证呢？</p>
<h2 id="DDoS攻击应对"><a href="#DDoS攻击应对" class="headerlink" title="DDoS攻击应对"></a>DDoS攻击应对</h2><p>这个不废话，DDoS 攻击防范请从以下几点做起：</p>
<ol>
<li>选择靠谱的域名注册商和域名解析商</li>
<li>接入主机的选择也需要慎重，并且配置好 ACL</li>
<li>必要时选择一个适合自己的安全 CDN 产品</li>
<li>对域名、主机、 CDN 进行全方位专业的 IT 维护</li>
</ol>
<h2 id="希望未来有更祥和的网络环境，-DDoS-坏蛋们见鬼去吧！"><a href="#希望未来有更祥和的网络环境，-DDoS-坏蛋们见鬼去吧！" class="headerlink" title="希望未来有更祥和的网络环境， DDoS 坏蛋们见鬼去吧！"></a>希望未来有更祥和的网络环境， DDoS 坏蛋们见鬼去吧！</h2>]]></content>
      
        <categories>
            
            <category> 当时就被震惊 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 域名攻击 </tag>
            
            <tag> DYN </tag>
            
            <tag> DDoS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我又换工作~~内容~~了！]]></title>
      <url>https://ephen.me/2016/change-duty/</url>
      <content type="html"><![CDATA[<p>继在上家公司身兼测试、实施、运维、客服、配置管理、质量管理、培训讲师等多职之后，如今在现任也开启了角色变更模式。</p>
<p>这次改得更彻底，连公司名也变啦。咱以后是『光载无限（北京）科技有限公司』的人了，不再属于『北京快网科技有限公司』了。</p>
<p>尽管我还是『武汉快网云计算有限公司』的。</p>
<p>哈哈，理不清关系吗？其实我也理不太清，不晓得是怎么搞的，反正还是『世纪互联』旗下的。</p>
<p>『光载无限』要成为『世纪互联』旗下重点品牌了，听说公司正在筹备品牌发布会，也不知道啥时候开。</p>
<a id="more"></a>
<hr>
<p>在武汉快网，我是以软件测试岗在 14 年中入职的，负责 CloudXNS 产品测试。</p>
<p>3 个月后，当时的 CloudXNS 老大“福娃”推荐我转运营，起初测试和运营兼职。</p>
<p>15 年初转运营岗，升做运营主管，专门运营 CloudXNS 。</p>
<p>15 年中，福娃离职，接着公司组织架构变化，成立产品运营部专门做 CloudXNS 的产品、开发和运营，然后我又负责产品和运营了。</p>
<p>现在，团队及组织架构又变化了。技术运维和产品市场完全分开，并不再按产品项目划分部门。</p>
<p>如今，所有产品、市场、售前管理都直属『光载无限』管辖，公司副总裁找我沟通后，我决定只做产品管理了。</p>
<hr>
<p>压力好大。做的实事越来越少，压力却越来越大。</p>
<p>角色变了，不再搞运营了，于是咱大 VP 又新给了两个产品我。</p>
<p>一年多快两年没摸技术，理解起产品来也比以前吃力了好多。</p>
<p>然后公司新的组织架构，使我又变成了孤身一人奋斗。产品大牛们都在北京，而又因为客户群的不同，似乎也很难跟他们交流学习到什么。</p>
<p>没人可讨论、全都要靠自己想，然后各种汇报、汇报、还是汇报。</p>
<p>不得不承认，我也算一个追求完美的人吧。我真的好怕我的想法是错误的，然后把产品带沟里去。</p>
<p>我同时也是一个非常在意别人看法的人，怕我的想法遭到实现者的抵触，怕我的表现不得 VP 认可达不到他的要求，于是左右不能愉快的共事下去。</p>
<hr>
<p>而且还迷茫了。我到底是进化成了 IT 界的全才，还是一步一步走成 IT 界的废材呢？</p>
<p>啥都做过，可能别人很多觉得我做得很不错，但是并没有哪一行达到我心理预期的精通。</p>
<p>对团队管理又停留于概念，几乎没有获得过好的系统的实施机会。</p>
<p>一遍又一遍的被问啥时候要孩子，真的有种身心俱疲的感觉。</p>
<hr>
<p>我希望我一如既往还是那个热爱塑造产品、期待改变世界的我。</p>
<p>这也是我选择转岗到产品的初衷。</p>
<p><del>我想了好多年了。</del></p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 产品运营 </tag>
            
            <tag> 产品管理 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用网页工具 DNSViz 检查域名 DNSSEC 配置]]></title>
      <url>https://ephen.me/2016/dnssec-dnsviz/</url>
      <content type="html"><![CDATA[<h2 id="关于-DNSSEC"><a href="#关于-DNSSEC" class="headerlink" title="关于 DNSSEC"></a>关于 DNSSEC</h2><p>DNSSEC 全称 Domain Name System Security Extensions，即 DNS安全扩展，是由 Internet 工程任务组 （ IETF ）提供的一系列 DNS 安全认证的机制（可参考 <a href="https://tools.ietf.org/html/rfc2535" target="_blank" rel="noopener">RFC2535</a> ）。</p>
<p>它是对 DNS 提供给 DNS 客户端（解析器）的 DNS 数据来源进行认证，并验证不存在性和校验数据完整性验证，但不提供或机密性和可用性。<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%89%A9%E5%B1%95" target="_blank" rel="noopener">来源：域名系统安全扩展 - 维基百科，自由的百科全书</a></p>
<p>一些基础的相关介绍可参考我在 CloudXNS 官网发的文章（均已迁移至本博）：</p>
<ol>
<li><a href="/2016/dnssec/">什么是 DNSSEC ？ DNSSEC 的概念及作用</a></li>
<li><a href="/2016/dnssec-verify">如何验证 DNS 服务器是否支持 DNSSEC ？</a></li>
</ol>
<p>通俗点讲， DNSSEC 的主要作用就是防止 DNS劫持，从而保证 DNS安全。</p>
<p>但在这个保证安全的过程中，DNSSEC 的 RR 和 RRSIG 的传输过程都是未加密的（即：不提供机密性），我们通过一些嗅探工具可以读取 RRSIG 记录以及由 DS 记录建立的信任链。</p>
<p>今天我们就来聊聊 DNSSEC 信任链的那些事。</p>
<a id="more"></a>
<h2 id="DNSSEC-相关的资源记录"><a href="#DNSSEC-相关的资源记录" class="headerlink" title="DNSSEC 相关的资源记录"></a>DNSSEC 相关的资源记录</h2><p>以国际知名的支付平台 Paypal 为例。</p>
<p>Paypal.com 域名配置了 DNSSEC 签名，以下是使用支持 DNSSEC 的 DNS服务器 4.2.2.4 查询 A记录 的解析结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">~ dig paypal.com +dnssec @4.2.2.4</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;paypal.com.			IN	A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">paypal.com.		204	IN	A	64.4.250.23</span><br><span class="line">paypal.com.		204	IN	A	64.4.250.24</span><br><span class="line">paypal.com.		204	IN	RRSIG	A 5 2 300 20161023213752 20160923205517 11811 paypal.com. lHYZ/5xp9uCfUKGVbvLWr3dA3Ri8X3G1O9fdi6ludo1qYDbYFFyyAdWp szGoszxSRE0jT1ggUOXufBv7nEF++ODkzXB4U4QmKt6ooqQRG8TMDsGw WbJtAgMq0ul8PRPZz8MvkZGxucB2pC4+HwtQaJ/g43sxP9ouHsCePnU7 +H4=</span><br></pre></td></tr></table></figure>
<h3 id="RRSIG："><a href="#RRSIG：" class="headerlink" title="RRSIG："></a>RRSIG：</h3><p>RRSIG 资源记录值很长，乍一看是一堆乱码，咱们还是对照格式来看：</p>
<blockquote>
<p><code>A</code> - 记录类型</p>
<p><code>5</code> - 算法类型 (参考附录「算法类型列表」)</p>
<p><code>2</code> - 标签 (泛解析中原先 RRSIG 记录的名称)</p>
<p><code>300</code> - 原 TTL 大小</p>
<p><code>20161023213752</code> - 签名失效时间</p>
<p><code>20160923205517</code> - 签名签署时间</p>
<p><code>11811</code> - Key 标签 (一个简短的数值，用来迅速判断应该用那个 DNSKEY 记录来验证)</p>
<p><code>paypal.com.</code> - 签名名称 (用于验证该签名的 DNSKEY 名称)</p>
<p>“…太长了就不写了…” - 加密签名</p>
</blockquote>
<hr>
<p>DNSKEY 和 DS （Delegation Signer）记录也都看下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~ dig paypal.com +dnssec @4.2.2.4 DNSkey</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;paypal.com.			IN	DNSKEY</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">paypal.com.		25	IN	DNSKEY	256 3 5 AwEAAc/7r7w6qEg59vzyfcKgIm7K3h43tglKOJjoFyK5lxhl2e7vh8Cw vj3cwKQHccsvWuvAK0ummTSysxZT0JJgw8gkhIGGiZ63MJTcbocDezgZ iA/q4ejpjdrj27gs5mCHAsyC9BAVZiysfIwqtRFsP0GjivNYzIc6qGWA XcAJKLLX</span><br><span class="line">paypal.com.		25	IN	DNSKEY	257 3 5 AwEAAdVtmC6yOQb0+5MT5ezC9GJsCb10WkVE1qMAbilAN5KZ0/wJD+4P 1/WB7ctXC0RnEjHzVrKmLsFzRb3mpI9wm0cf5pN8BHMSVfdDpycjNyGb My7EKJ77POD7lSimJouMx5Tp+HQaJZeU0MnXJkR4qaAvShr5iNtVaopO uIXQfRDnLdDoxETw9XplIL9wkpe1gW5uQNk+Fhy4PRyf+e5yhgiZjemm RiEDJH+FxCUAf8ZV+xHSuucWKY3V1tEheptdUaIAbnCGDWGTbi9ziai6 SrLzRrrDeImwm42PkxD5cURMWqHQIBfEJlDB+koqWPm73sDPMlPgoBUy xb/w5JFLV+c=</span><br><span class="line">paypal.com.		25	IN	RRSIG	DNSKEY 5 2 600 20161030075650 20160930070223 11811 paypal.com. botQ3ANf+tWS4AFxKF+xITOkAOfMaMlwSz7lucnzSKl2XUHKMCOgk3yn ux0VwzGITuwFyg61f6qlwAbKEgVZHjVq+ERwEIiUzyKMi7NUDKbTQbB/ w2+dsTwKX5A7oCOQR3gJytfw4eFbrKKXfCvkTk/WVFjdaCnh+MNDn/x+ 37Y=</span><br><span class="line">paypal.com.		25	IN	RRSIG	DNSKEY 5 2 600 20161030075650 20160930070223 21037 paypal.com. H3Ms6s//q4actymLzj5xLh+ficbqet6iyzwc/eA1/KUxpQISydXTVmuT jLcn+nbILH6QXHiNZiMmkIZm2YsxYBAEa+V9botN0HqFz5iBgcaBmIAk L5xp66SZdQQyJTfWbi1ILYCiDeJmS5mkvqwdFbjIW4Cxouj8WRBPYHL2 r0k+icmq0fSI/m0ujdK0tstodc2jd2nb9Vvj1q19DooE6jcWN6KwEa3k p2pe8/nNSeCfsqqxPb0wzvj14YTpOHq3R6y1Y84T2/dOdoAKsMhKJddK l30nQOuodh7FV7AvO4uf/ewDMlMB65hEH8zwBaxhpPyGHzeWj1t/YzOW PzMWOQ==</span><br></pre></td></tr></table></figure>
<h3 id="DNSKEY："><a href="#DNSKEY：" class="headerlink" title="DNSKEY："></a>DNSKEY：</h3><blockquote>
<p><code>256</code> - 标识符 (Zone Key (DNSSEC密钥集) 以及 Secure Entry Point (KSK和简单密钥集))</p>
<p><code>3</code> - 协议 (固定值3 向下兼容)</p>
<p><code>5</code> - 算法类型 (参考附录「算法类型列表」)</p>
<p>“…最后的…” - 公钥内容</p>
</blockquote>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">~ dig paypal.com +dnssec @4.2.2.4 DS</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;paypal.com.			IN	DS</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">paypal.com.		3553	IN	DS	21037 5 2 0DF17B28554954D819E0CEEAB98FCFCD56572A4CF4F551F0A9BE6D04 DB2F65C3</span><br><span class="line">paypal.com.		3553	IN	RRSIG	DS 8 2 86400 20161017041535 20161010030535 27452 com. cDatvEwBK3yOTI2QTyX/xZBxGQMKg006mT2kzNy+olS751dbWlyETgpz gv2RyaSY9eoHVXAE+2DBD/BzKV1lV3sp1Pwgqb3PCYuJx6TAvAs7YkK6 B5uZ+prCUEKf8pHF325FLzXs7S23cZe7k1PmTfkepMTH4r0lcRYJFlP1 sog=</span><br></pre></td></tr></table></figure>
<h3 id="DS："><a href="#DS：" class="headerlink" title="DS："></a>DS：</h3><blockquote>
<p><code>21037</code> - Key 标签 (一个简短的数值，用来迅速判断应该用那个 DNSKEY 记录来验证)</p>
<p><code>5</code> - 算法类型 (参考附录「算法类型列表」)</p>
<p><code>2</code> - 摘要类型 (创建摘要值的加密散列算法)(参考附录「摘要类型列表」)</p>
<p>“…最后的…” - 摘要：引用的 DNSKEY记录 的加密哈希值。</p>
</blockquote>
<h2 id="DS记录-建立的-DNSSEC-信任链"><a href="#DS记录-建立的-DNSSEC-信任链" class="headerlink" title="DS记录 建立的 DNSSEC 信任链"></a>DS记录 建立的 DNSSEC 信任链</h2><p>DS，是 Delegation Signer 的缩写，即“委派签名者”，用于构建到子 zone 的身份验证链。</p>
<p>对于 Paypal.com 来说，其 DS记录值 是上一级 .com 的私钥对其 DNSKEY 进行加密后得到的。</p>
<p>而如果 Paypal.com 存在独立的子域时，又将利用其私钥对其子 zone 的 DNSKEY 执行加密从而生成子域的 DS记录值 。</p>
<p>下图是用 DNSViz 查询到的 Paypal.com 的信任链：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426155405.png" alt="Paypal.com 的 DNSSEC 信任链"></p>
<p>图中展示的三个框，从上至下依次代表域名<code>.</code>、<code>com.</code>和<code>paypal.com.</code>，每个框中间的内容分别对应这三个 zone 的 DNSKey 和 DS 的传递关系。</p>
<p>可以通过点击<a href="http://dnsviz.net/d/paypal.com/dnssec/" target="_blank" rel="noopener">http://dnsviz.net/d/paypal.com/dnssec/</a>查看更多细节。</p>
<h2 id="DNSSEC-配置检查神器：DNSViz"><a href="#DNSSEC-配置检查神器：DNSViz" class="headerlink" title="DNSSEC 配置检查神器：DNSViz"></a>DNSSEC 配置检查神器：DNSViz</h2><p>点开上面的网站，可以看到 DNSViz 是一个很强大的工具。</p>
<p>它是由 美国Sandia国家实验室 和 Verisign,Inc. 联合推出的专门用于分析域名的 DNSSEC 配置检查的一款分析工具。</p>
<p>在上图中，鼠标移到上述生成的信任链中的每个椭圆标记的元素上，都能看到很多详细内容。除了包括上面我通过 dig 命令查询到的信息之外，还有服务器信息以及状态是否安全。</p>
<blockquote>
<p>点击上方的 <code>Response</code> 可以查看到各种 DNSSEC 资源记录类型的查询记录以及和根域、 NS 服务器之间的关系；</p>
<p>点击切换到 <code>Servers</code> 可以查看到 Paypal.com 的 4 个权威域名服务器（ NameServer ）的信息；</p>
<p>最后的 <code>Analyze</code> 用于简洁的展示查询分析过程：</p>
</blockquote>
<blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Analyzing paypal.com</span><br><span class="line">  Querying paypal.com/NS (referral)...</span><br><span class="line">  Querying paypal.com/NS (auth)...</span><br><span class="line">  Querying paypal.com/A...</span><br><span class="line">  Preparing query jld3x6hmi0.paypal.com/A (NXDOMAIN)...</span><br><span class="line">  Preparing query paypal.com/CNAME (No data)...</span><br><span class="line">  Preparing query paypal.com/MX...</span><br><span class="line">  Preparing query paypal.com/TXT...</span><br><span class="line">  Preparing query paypal.com/SOA...</span><br><span class="line">  Preparing query paypal.com/DNSKEY...</span><br><span class="line">  Preparing query paypal.com/DS...</span><br><span class="line">  Preparing query paypal.com/AAAA...</span><br><span class="line">  Executing queries...</span><br><span class="line">Success!</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>左侧的树形标签可展开，查看各个点的状态汇总及图例。</p>
<p>更多的图例解释，可点击左侧下方的 <a href="http://dnsviz.net/doc/dnssec/" target="_blank" rel="noopener">Full legend</a> 。英文太渣，我就不做半调子翻译官了，感兴趣的话自己去看。</p>
</blockquote>
<p>既然是配置检查，当存在不正确的配置时，也会根据影响做 Error 或 Warning 的标记。例如我的博客域名 ephen.me，没有配置 DNSSEC ，查询出来是这样的：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426155455.png" alt=" ephen.me 的 dnssec 检查"></p>
<p>除了上图中最下一排的各种感叹号外，左边还有一大排的 Error 和 Warning ，描述了我的域名具体的配置出错的地方。</p>
<blockquote>
<p>如果以后要给域名部署配置 DNSSEC ，我会记得再来这个网站查查看。 </p>
</blockquote>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="算法类型列表"><a href="#算法类型列表" class="headerlink" title="算法类型列表"></a>算法类型列表</h3><ul>
<li>1: RSA/MD5</li>
<li>2: Diffie-Hellman</li>
<li>3: DSA/SHA-1</li>
<li>4: Elliptic Curve</li>
<li>5: RSA/SHA-1</li>
<li>6: DSA-NSEC3-SHA1</li>
<li>7: RSASHA1-NSEC3-SHA1</li>
<li>8: RSA/SHA-256</li>
<li>10: RSA/SHA-512</li>
<li>12: RSA/SHA-512</li>
<li>13: ECDSA Curve P-256 with SHA-256</li>
<li>14: ECDSA Curve P-384 with SHA-384</li>
<li>252: Indirect</li>
<li>253: Private DNS</li>
<li>254: Private OID</li>
</ul>
<h3 id="摘要类型列表"><a href="#摘要类型列表" class="headerlink" title="摘要类型列表"></a>摘要类型列表</h3><ul>
<li>1: SHA-1</li>
<li>2: SHA-256</li>
<li>3: GOST R 34.11-94</li>
<li>4: SHA-384 </li>
</ul>
<h2 id="参考资料及其他"><a href="#参考资料及其他" class="headerlink" title="参考资料及其他"></a>参考资料及其他</h2><ol>
<li><a href="http://support.simpledns.com/kb/a173/check-dnssec-signatures-tool.aspx" target="_blank" rel="noopener">Check DNSSEC Signatures tool</a>（这个也是一 DNSSEC 配置检查工具，由于看介绍没有 DNSViz 看起来直观，就没有进一步了解。附：<a href="http://www.simpledns.com/outbox/chksig.zip" target="_blank" rel="noopener">下载链接</a>）</li>
<li><a href="https://msdn.microsoft.com/zh-cn/library/jj200221%28v=ws.11%29.aspx" target="_blank" rel="noopener">Microsoft MSDN - DNSSEC 概述 </a></li>
<li><a href="https://www.cc.ntu.edu.tw/chinese/epaper/0022/20120920_2206.html" target="_blank" rel="noopener">台湾大学电子报 - DNSSEC 安全技術簡介</a></li>
<li><a href="https://imlonghao.com/41.html" target="_blank" rel="noopener">imlonghao - 我所理解的 DNSSEC </a></li>
<li><a href="http://netsec.ccert.edu.cn/duanhx/?p=1479" target="_blank" rel="noopener">DNSSEC 原理、配置与布署简介 | 段海新( Haixin Duan ) @ Tsinghua University</a></li>
<li><a href="https://www.verisign.com/zh_CN/domain-names/dnssec/index.xhtml" target="_blank" rel="noopener">Verisign - DNSSEC</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 工具介绍 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNSSEC </tag>
            
            <tag> 安全 </tag>
            
            <tag> 域名劫持 </tag>
            
            <tag> DNSViz </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DNS 资源记录（ Resource Record ，简称 RR ）介绍]]></title>
      <url>https://ephen.me/2016/dns-rr/</url>
      <content type="html"><![CDATA[<h2 id="DNS-资源记录简介"><a href="#DNS-资源记录简介" class="headerlink" title="DNS 资源记录简介"></a>DNS 资源记录简介</h2><p>DNS server 内的每一个域名都有自己的域文件（ zone file ）， zone file 是由多个记录组成的，每一个记录就被称为资源记录（ Resource Record ，简称 RR ）。</p>
<p>当在设定 DNS 域名解析、反向解析及其他的管理目的时，往往需要使用不同类型的 RR ，也就是我们常说的记录类型。</p>
<p>上述 CloudXNS 的记录类型列表中，除 AX 、 CNAMEX 、 LINK 、 DR301X （ 301 跳转）、 DR302X （ 302 跳转）以及 DRHIDX （隐式跳转）为 CloudXNS 自研的扩展解析记录类型之外，其余都是 DNS 体系中常见的标准 RR 类型。</p>
<p>但除了我们系统中支持的这些类型外，事实上还有一些不太常用的目前 CloudXNS 暂不支持的其他 RR 类型，感兴趣的朋友可以和灰姑娘一起学习下。</p>
<a id="more"></a>
<h2 id="DNS-体系中的标准-RR-类型及表示法集合"><a href="#DNS-体系中的标准-RR-类型及表示法集合" class="headerlink" title="DNS 体系中的标准 RR 类型及表示法集合"></a>DNS 体系中的标准 RR 类型及表示法集合</h2><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">RFC 来源</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">IP 地址记录</td>
<td style="text-align:left">传回一个 32 比特的 IPv4 地址，最常用于映射主机名称到IP地址，但也用于 DNSBL（<a href="https://tools.ietf.org/html/rfc1101" target="_blank" rel="noopener">RFC 1101</a>）等。</td>
</tr>
<tr>
<td style="text-align:center">AAAA</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc3596" target="_blank" rel="noopener">RFC 3596</a></td>
<td style="text-align:left">IPv6 IP 地址记录</td>
<td style="text-align:left">传回一个 128 比特的 IPv6 地址，最常用于映射主机名称到 IP 地址。</td>
</tr>
<tr>
<td style="text-align:center">AFSDB</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1183" target="_blank" rel="noopener">RFC 1183</a></td>
<td style="text-align:left">AFS 文件系统</td>
<td style="text-align:left">（ Andrew File System ）数据库核心的位置，于域名以外的 AFS 客户端常用来联系 AFS 核心。这个记录的子类型是被过时的 <a href="https://zh.wikipedia.org/wiki/DCE/DFS" target="_blank" rel="noopener">DCE/DFS</a>（ DCE Distributed File System ）所使用。</td>
</tr>
<tr>
<td style="text-align:center">APL</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc3123" target="_blank" rel="noopener">RFC 3123</a></td>
<td style="text-align:left">地址前缀列表</td>
<td style="text-align:left">指定地址列表的范围，例如： CIDR 格式为各个类型的地址（试验性）。</td>
</tr>
<tr>
<td style="text-align:center">CERT</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4398" target="_blank" rel="noopener">RFC 4398</a></td>
<td style="text-align:left">证书记录</td>
<td style="text-align:left">存储 PKIX 、 SPKI 、PGP 等。</td>
</tr>
<tr>
<td style="text-align:center">CNAME</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">规范名称记录</td>
<td style="text-align:left">一个主机名字的别名：域名系统将会继续尝试查找新的名字。</td>
</tr>
<tr>
<td style="text-align:center">DHCID</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4701" target="_blank" rel="noopener">RFC 4701</a></td>
<td style="text-align:left">DHCP （动态主机设置协议）识别码</td>
<td style="text-align:left">用于将 FQDN 选项结合至 DHCP 。</td>
</tr>
<tr>
<td style="text-align:center">DLV</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4431" target="_blank" rel="noopener">RFC 4431</a></td>
<td style="text-align:left">DNSSEC （域名系统安全扩展）来源验证记录</td>
<td style="text-align:left">为不在 DNS 委托者内发布 DNSSEC 的信任锚点，与 DS 记录使用相同的格式，<a href="https://tools.ietf.org/html/rfc5074" target="_blank" rel="noopener">RFC 5074</a> 介绍了如何使用这些记录。</td>
</tr>
<tr>
<td style="text-align:center">DNAME</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc2672" target="_blank" rel="noopener">RFC 2672</a></td>
<td style="text-align:left">代表名称</td>
<td style="text-align:left">DNAME 会为名称和其子名称产生别名，与 CNAME 不同，在其标签别名不会重复。但与 CNAME 记录相同的是， DNS 将会继续尝试查找新的名字。</td>
</tr>
<tr>
<td style="text-align:center">DNSKEY</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4034" target="_blank" rel="noopener">RFC 4034</a></td>
<td style="text-align:left">DNS 关键记录</td>
<td style="text-align:left">于 DNSSEC 内使用的关键记录，与 KEY 使用相同格式。</td>
</tr>
<tr>
<td style="text-align:center">DS</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4034" target="_blank" rel="noopener">RFC 4034</a></td>
<td style="text-align:left">委托签发者</td>
<td style="text-align:left">此记录用于鉴定 DNSSEC 已授权区域的签名密钥。</td>
</tr>
<tr>
<td style="text-align:center">HIP</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc5205" target="_blank" rel="noopener">RFC 5205</a></td>
<td style="text-align:left">主机鉴定协议</td>
<td style="text-align:left">将端点标识符及 IP 地址定位的分开的方法。</td>
</tr>
<tr>
<td style="text-align:center">IPSECKEY</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4025" target="_blank" rel="noopener">RFC 4025</a></td>
<td style="text-align:left">IPSEC 密钥</td>
<td style="text-align:left">与 IPSEC 同时使用的密钥记录。</td>
</tr>
<tr>
<td style="text-align:center">KEY</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc2535" target="_blank" rel="noopener">RFC 2535</a> 和 <a href="https://tools.ietf.org/html/rfc2930" target="_blank" rel="noopener">RFC 2930</a></td>
<td style="text-align:left">关键记录</td>
<td style="text-align:left">只用于 SIG(0) （ <a href="https://tools.ietf.org/html/rfc2931" target="_blank" rel="noopener">RFC 2931</a> ）及 TKEY （ <a href="https://tools.ietf.org/html/rfc2930" target="_blank" rel="noopener">RFC 2930</a> 。 <a href="https://tools.ietf.org/html/rfc3455" target="_blank" rel="noopener">RFC 3455</a> 否定其作为应用程序键及限制 DNSSEC 的使用。 <a href="https://tools.ietf.org/html/rfc3755" target="_blank" rel="noopener">RFC 3755</a> 指定了 DNSKEY 作为 DNSSEC 的代替。</td>
</tr>
<tr>
<td style="text-align:center">LOC</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1876" target="_blank" rel="noopener">RFC 1876</a></td>
<td style="text-align:left">位置记录</td>
<td style="text-align:left">将一个域名指定地理位置。</td>
</tr>
<tr>
<td style="text-align:center">MX</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">电邮交互记录</td>
<td style="text-align:left">引导域名到该域名的邮件传输代理（ MTA, Message Transfer Agents ）列表。</td>
</tr>
<tr>
<td style="text-align:center">NAPTR</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc3403" target="_blank" rel="noopener">RFC 3403</a></td>
<td style="text-align:left">命名管理指针</td>
<td style="text-align:left">允许基于正则表达式的域名重写使其能够作为 URI 、进一步域名查找等。</td>
</tr>
<tr>
<td style="text-align:center">NS</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">名称服务器记录</td>
<td style="text-align:left">委托 DNS 域（ DNS zone ）使用已提供的权威域名服务器。</td>
</tr>
<tr>
<td style="text-align:center">NSEC</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4034" target="_blank" rel="noopener">RFC 4034</a></td>
<td style="text-align:left">下一代安全记录</td>
<td style="text-align:left">DNSSEC 的一部分; 用来验证一个未存在的服务器，使用与 NXT（已过时）记录的格式。</td>
</tr>
<tr>
<td style="text-align:center">NSEC3</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc5155" target="_blank" rel="noopener">RFC 5155</a></td>
<td style="text-align:left">NSEC 记录第三版</td>
<td style="text-align:left">用作允许未经允许的区域行走以证明名称不存在性的 DNSSEC 扩展。</td>
</tr>
<tr>
<td style="text-align:center">NSEC3PARAM</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc5155" target="_blank" rel="noopener">RFC 5155</a></td>
<td style="text-align:left">NSEC3 参数</td>
<td style="text-align:left">与 NSEC3 同时使用的参数记录。</td>
</tr>
<tr>
<td style="text-align:center">PTR</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">指针记录</td>
<td style="text-align:left">引导至一个规范名称（ Canonical Name ）。与 CNAME 记录不同， DNS “不会”进行进程，只会传回名称。最常用来运行反向 DNS 查找，其他用途包括引作 DNS-SD。</td>
</tr>
<tr>
<td style="text-align:center">RRSIG</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4034" target="_blank" rel="noopener">RFC 4034</a></td>
<td style="text-align:left">DNSSEC 证书</td>
<td style="text-align:left">DNSSEC 安全记录集证书，与 SIG 记录使用相同的格式。</td>
</tr>
<tr>
<td style="text-align:center">RP</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1183" target="_blank" rel="noopener">RFC 1183</a></td>
<td style="text-align:left">负责人</td>
<td style="text-align:left">有关域名负责人的信息，电邮地址的 <strong><code>@</code></strong> 通常写为 <strong><code>a</code></strong>。</td>
</tr>
<tr>
<td style="text-align:center">SIG</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc2535" target="_blank" rel="noopener">RFC 2535</a></td>
<td style="text-align:left">证书</td>
<td style="text-align:left">SIG(0) （ <a href="https://tools.ietf.org/html/rfc2931" target="_blank" rel="noopener">RFC 2931</a> ）及 TKEY （ <a href="https://tools.ietf.org/html/rfc2930" target="_blank" rel="noopener">RFC 2930</a> ）使用的证书。 <a href="https://tools.ietf.org/html/rfc3755" target="_blank" rel="noopener">RFC 3755</a> designated RRSIG as the replacement for SIG for use within DNSSEC.</td>
</tr>
<tr>
<td style="text-align:center">SOA</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">权威记录的起始</td>
<td style="text-align:left">指定有关 DNS 区域的权威性信息，包含主要名称服务器、域名管理员的电邮地址、域名的流水式编号、和几个有关刷新区域的定时器。</td>
</tr>
<tr>
<td style="text-align:center">SPF</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4408" target="_blank" rel="noopener">RFC 4408</a></td>
<td style="text-align:left">SPF 记录</td>
<td style="text-align:left">作为 SPF 协议的一部分，优先作为先前在 TXT 存储 SPF 数据的临时做法，使用与先前在 TXT 存储的格式。</td>
</tr>
<tr>
<td style="text-align:center">SRV</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc2782" target="_blank" rel="noopener">RFC 2782</a></td>
<td style="text-align:left">服务定位器</td>
<td style="text-align:left">广义为服务定位记录，被新式协议使用而避免产生特定协议的记录，例如： MX 记录。</td>
</tr>
<tr>
<td style="text-align:center">SSHFP</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc4255" target="_blank" rel="noopener">RFC 4255</a></td>
<td style="text-align:left">SSH 公共密钥指纹</td>
<td style="text-align:left">DNS 系统用来发布 SSH 公共密钥指纹的资源记录，以用作辅助验证服务器的真实性。</td>
</tr>
<tr>
<td style="text-align:center">TA</td>
<td style="text-align:center">无</td>
<td style="text-align:left">DNSSEC 信任当局</td>
<td style="text-align:left">DNSSEC 一部分无签订 DNS 根目录的部署提案，，使用与 DS 记录相同的格式。</td>
</tr>
<tr>
<td style="text-align:center">TKEY</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc2930" target="_blank" rel="noopener">RFC 2930</a></td>
<td style="text-align:left">秘密密钥记录</td>
<td style="text-align:left">为 TSIG 提供密钥材料的其中一类方法，that is 在公共密钥下加密的 accompanying KEY RR。</td>
</tr>
<tr>
<td style="text-align:center">TSIG</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc2845" target="_blank" rel="noopener">RFC 2845</a></td>
<td style="text-align:left">交易证书</td>
<td style="text-align:left">用以认证动态更新（ Dynamic DNS ）是来自合法的客户端，或与 DNSSEC 一样是验证回应是否来自合法的递归名称服务器。</td>
</tr>
<tr>
<td style="text-align:center">TXT</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">文本记录</td>
<td style="text-align:left">最初是为任意可读的文本 DNS 记录。自 1990 年起，些记录更经常地带有机读数据，以 <a href="https://tools.ietf.org/html/rfc1464" target="_blank" rel="noopener">RFC 1464</a> 指定： opportunistic encryption 、 Sender Policy Framework （虽然这个临时使用的 TXT 记录在 SPF 记录推出后不被推荐）、 DomainKeys 、 DNS-SD 等。</td>
</tr>
</tbody>
</table>
<h2 id="其他伪资源记录类型"><a href="#其他伪资源记录类型" class="headerlink" title="其他伪资源记录类型"></a>其他伪资源记录类型</h2><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">RFC来源</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">所有缓存的记录</td>
<td style="text-align:left">传回所有服务器已知类型的记录。如果服务器未有任何关于名称的记录，该请求将被转发。而传回的记录未必完全完成，例如：当一个名称有 A 及 MX 类型的记录时，但服务器已缓存了 A 记录，就只有 A 记录会被传回。</td>
</tr>
<tr>
<td style="text-align:center">AXFR</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1035" target="_blank" rel="noopener">RFC 1035</a></td>
<td style="text-align:left">全域转移</td>
<td style="text-align:left">由主域名服务器转移整个区域文件至二级域名服务器。</td>
</tr>
<tr>
<td style="text-align:center">IXFR</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc1995" target="_blank" rel="noopener">RFC 1995</a></td>
<td style="text-align:left">增量区域转移</td>
<td style="text-align:left">请求只有与先前流水式编号不同的特定区域的区域转移。此请求有机会被拒绝，如果权威服务器由于配置或缺乏必要的数据而无法履行请求，一个完整的（ AXFR ）会被发送以作回应。</td>
</tr>
<tr>
<td style="text-align:center">OPT</td>
<td style="text-align:center"><a href="https://tools.ietf.org/html/rfc2671" target="_blank" rel="noopener">RFC 2671</a></td>
<td style="text-align:left">选项</td>
<td style="text-align:left">这是一个“伪 DNS 记录类型”以支持 EDNS 。</td>
</tr>
</tbody>
</table>
<h2 id="什么是-SOA-？"><a href="#什么是-SOA-？" class="headerlink" title="什么是 SOA ？"></a>什么是 SOA ？</h2><p>SOA ，即 Start Of Authority ，放在 zone file 中，用于描述这个 zone 负责的 name server ， version number… 等资料，以及当 slave server 要备份这个 zone 时的一些参数。</p>
<p>每个 zone file 中必须有且仅有一条 SOARR ，并在 zone file 中作为第一条资源记录保存。</p>
<p>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@ IN SOA lv3ns1.ffdns.net. webmaster.ffdns.net. (</span><br><span class="line">    2009092868 ; Serial</span><br><span class="line">    604800 ; Refresh</span><br><span class="line">    3600 ; Retry</span><br><span class="line">    2419200 ; Expire</span><br><span class="line">    3600 ) ; Minimum</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>第一行：</strong> <code>@</code> 指代该 zone ；  <code>lv3ns1.ffdns.net.</code> 是该 zone 的授权主机； <code>webmaster.ffdns.net.</code> 代表 <a href="mailto:`webmaster@ffdns.net" target="_blank" rel="noopener">`webmaster@ffdns.net</a>` ，即该 zone 的管理者信箱。</p>
<p><strong>Serial：</strong>代表 zone file 的版本，每当 zone file 内容有变动，name server 管理者就应该增加这个号码，因为 slave 会将这个号码与其 copy 的那份比对以便决定是否要再 copy 一次（即进行 zone transfer ）。</p>
<p><strong>Refresh：</strong> slave server 每隔这段时间(秒)，就去检查 master server 上的 serial number 。</p>
<p><strong>Retry：</strong>当 slave server 无法和 master 进行 serial check 时，要每隔这段时间（秒） retry 一次。</p>
<p><strong>Expire：</strong>当时间超过 Expire 所定的秒数而 slave server 都无法和 master 取得连络，那么 slave 会删除自己的这份 copy 。</p>
<p><strong>Minimum：</strong>代表这个 zone file 中所有 record 的内定的 TTL 值，也就是其它的 DNS server cache 这笔 record 时，最长不应该超过这个时间。</p>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://dns-learning.twnic.net.tw/index.html" target="_blank" rel="noopener"> DNS 線上教學研究計畫 </a></li>
<li><a href="http://www.simpledns.com/help" target="_blank" rel="noopener"> SimpleDNS.com - Help </a></li>
<li><a href="https://www.cnblogs.com/sddai/p/5703394.html" target="_blank" rel="noopener"> DNS 资源记录( Resource Record )介绍 </a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 记录类型 </tag>
            
            <tag> SOA </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[隔壁粗事了！朝鲜顶级域 .kp 域名 DNS 数据配置可被转移]]></title>
      <url>https://ephen.me/2016/dotkp-zone-dns-remove/</url>
      <content type="html"><![CDATA[<p>9 月 20 日上午 10 点左右，朝鲜的一台顶级域名服务器 <code>ns2.kptc.kp</code> 不小心配置<a href="https://github.com/mandatoryprogrammer/NorthKoreaDNSLeak" target="_blank" rel="noopener">允许全球 DNS 区域转移</a>，任何人都可以向这台域名服务器发出区域转移请求，获取到一份朝鲜的顶级 DNS 数据拷贝。朝鲜泄漏的 DNS 数据显示，它的互联网/局域网规模确实非常小，域名寥寥无几。</p>
<a id="more"></a>
<p>DNS 数据披露了 28 个可访问的 <code>.KP</code> 域名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">airkoryo.com.kp.</span><br><span class="line">cooks.org.kp.</span><br><span class="line">friend.com.kp.</span><br><span class="line">gnu.rep.kp.</span><br><span class="line">kass.org.kp.</span><br><span class="line">kcna.kp.</span><br><span class="line">kiyctc.com.kp.</span><br><span class="line">knic.com.kp.</span><br><span class="line">koredufund.org.kp.</span><br><span class="line">korelcfund.org.kp.</span><br><span class="line">korfilm.com.kp.</span><br><span class="line">ma.gov.kp.</span><br><span class="line">masikryong.com.kp.</span><br><span class="line">naenara.com.kp.</span><br><span class="line">nta.gov.kp.</span><br><span class="line">portal.net.kp.</span><br><span class="line">rcc.net.kp.</span><br><span class="line">rep.kp.</span><br><span class="line">rodong.rep.kp.</span><br><span class="line">ryongnamsan.edu.kp.</span><br><span class="line">sdprk.org.kp.</span><br><span class="line">silibank.net.kp.</span><br><span class="line">star-co.net.kp.</span><br><span class="line">star-di.net.kp.</span><br><span class="line">star.co.kp.</span><br><span class="line">star.edu.kp.</span><br><span class="line">star.net.kp.</span><br><span class="line">vok.rep.kp.</span><br></pre></td></tr></table></figure>
<p>嗯，三胖家的域名果然有够少。（至于他们国家的那些“机密信息”，本宝宝着实不感兴趣</p>
<p>各位一定要警惕 DNS 数据安全，配置的严谨性不能忽视。</p>
<hr>
<p>下面分享一点相关知识。</p>
<h2 id="关于-DNS-区域传送（-DNS-zone-transfer-）"><a href="#关于-DNS-区域传送（-DNS-zone-transfer-）" class="headerlink" title="关于 DNS 区域传送（ DNS zone transfer ）"></a>关于 DNS 区域传送（ DNS zone transfer ）</h2><p>它指的是一台备用服务器使用来自主服务器的数据刷新自己的域（ zone ）数据库。</p>
<p>这为运行中的 DNS 服务提供了一定的冗余度，其目的是为了防止主的域名服务器因意外故障变得不可用时影响到整个域名的解析。</p>
<p>一般来说， DNS 区域传送操作只在网络里真的有备用域名 DNS 服务器时才有必要用到，但许多 DNS 服务器却被错误地配置成只要有 client 发出请求，就会向对方提供一个 zone 数据库的详细信息，所以说<strong>允许不受信任的因特网用户执行 DNS 区域传送（ zone transfer ）操作是后果最为严重的错误配置之一</strong>。</p>
<p>区域传送漏洞的危害：</p>
<blockquote>
<p>黑客可以快速的判定出某个特定 zone 的所有主机，收集域信息，选择攻击目标，找出未使用的 IP 地址，黑客可以绕过基于网络的访问控制。</p>
</blockquote>
<h2 id="DNS-zone-transfer-的正确配置"><a href="#DNS-zone-transfer-的正确配置" class="headerlink" title="DNS zone transfer 的正确配置"></a>DNS zone transfer 的正确配置</h2><p>要知道，区域传送是 DNS 常用的功能，只有正确的配置才将发挥有利的作用。</p>
<p>为避免被利用该漏洞，一般常用两种方法：</p>
<h3 id="方法一：严格限制允许区域传送（zone-transfer）的主机IP"><a href="#方法一：严格限制允许区域传送（zone-transfer）的主机IP" class="headerlink" title="方法一：严格限制允许区域传送（zone transfer）的主机IP"></a>方法一：严格限制允许区域传送（zone transfer）的主机IP</h3><blockquote>
<p>针对 bind ，可以在 Global 选项或 zone 选项中增加 <code>allow-transfer</code> 参数来控制</p>
</blockquote>
<blockquote>
<p>例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow-transfer ｛192.168.1.1; 202.103.24.68;｝;</span><br></pre></td></tr></table></figure>
<h3 id="方法二：使用-TSIG-key-来严格定义区域传送的关系"><a href="#方法二：使用-TSIG-key-来严格定义区域传送的关系" class="headerlink" title="方法二：使用 TSIG key 来严格定义区域传送的关系"></a>方法二：使用 TSIG key 来严格定义区域传送的关系</h3><blockquote>
<p>使用基于 IP 地址的访问控制列表可能会被某些“意志坚定”黑客绕过，最好加上 TSIG key 的配置</p>
</blockquote>
<blockquote>
<p>例如：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow-transfer ｛key &quot;dns1-slave1&quot;; key &quot;dns1-slave2&quot;;｝;</span><br></pre></td></tr></table></figure>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><blockquote>
<p>每次事件都是一次学习的机会，我有所学习，相信其他人也是。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 当时就被震惊 </category>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 朝鲜 </tag>
            
            <tag> 顶级域 </tag>
            
            <tag> 域转移 </tag>
            
            <tag> bind </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我又领证了！~]]></title>
      <url>https://ephen.me/2016/GetDriverLicense/</url>
      <content type="html"><![CDATA[<p><strong>各位看官请注意：</strong></p>
<p><strong>此文章涉及本姑娘个人信息，文章公开代表逛到这里的人可以看，但并不代表我同意被传播。</strong></p>
<a id="more"></a>
<hr>
<p>学车真是历经千辛万苦，拿驾照也算是千钧一发。</p>
<p>科目二排我前面的妹纸坡起半个多钟头，我踩离合的左脚都等酸了，最后妹纸的车还是被考官带走，可怜的我还未进入考试区域就被误判坡起失败。无奈之下悻悻然考完全程再来一次上坡起步，还好定点停的位置神准加上处变不惊临危不乱的心，上坡熄火+后溜竟然被我通过。连教练也称我是个奇迹……</p>
<p>科目三也是被前面一帅哥坑，他第一遍不及格第二遍没有停在我练习的那段路上，轮到我便一阵慌神，不巧又突然下雨，我不知道雨刷怎么开，朦胧中操作加减挡差点冲向涵洞桥下行人。还好没有啥其他问题可抠，教官勉为其难让我合格了。</p>
<p>科目四定的考场太遥远，中途在武昌火车站转车时，发现背包开了个大口子，里面的东西都不见了（包括有钱包、身份证之类的）。我到处找，最后居然找到了。包包并不是被别人拉开的，是我们赶车赶得太慌，拉链可能被什么东西勾开了，幸好东西都在。也幸好，在距离考场下班的20分钟前赶到。更幸运的是，我最后十题全对了，这10个题我只要再错一个就拿不到证了，好险！！</p>
<p>作为一个感性的妹纸，宣誓的时候居然不知为何哽咽……</p>
<p>女司机上路，请让一让……</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426161552.png" alt="驾驶证"></p>
<hr>
<p><strong>未经允许，不得传播此文中图片及任何个人信息。</strong></p>
<p><strong>情节严重者，将追究其法律责任。</strong></p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[全新出发，正式启用Hexo！]]></title>
      <url>https://ephen.me/2016/hello-hexo/</url>
      <content type="html"><![CDATA[<p><strong>郑重声明：原网站 <a href="http://www.chinatesters.com" target="_blank" rel="noopener">http://www.chinatesters.com</a> 已正式停止更新，内容已全部转移至这里，未来所有的更新也都在这里。新的站点，新的开始，新的旅程！~</strong><br><a id="more"></a></p>
<hr>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>最早看到有人推荐 Hexo 已经是很久以前甚至不太记得是什么时候的事了，印象中那会儿才弄懂什么静态网站、动态网站之类的词语，只听说 Hexo 是个基于 node.js 开发的静态博客框架。当时有点感兴趣，但因为没有时间又担心技术不足就没有再去做过多了解。</p>
<p>今年 5 月，公司内部测试尝试量子加速的加速效果时，其产品经理告诉我量子加速对静态资源的加速效果是尤其明显的，可以搭建个静态博客比如 Hexo 什么的和 Wordpress 对比试试看。至此，我开启了 Hexo 折腾模式，但因为没接触过 git 又不了解 node.js ，等我搭建好时已经浪费了很多时间。而我依然很忙，加之又想换域名又想导入原博客的内容还想找个看得顺眼的主题，觉得折腾起来实在有些麻烦就先搁着，等什么时候有空了在做。</p>
<p>直到有一天……</p>
<blockquote>
<p>淦！ CloudXNS 监控提醒我网站宕掉了……<br>-“运维兄弟，我的虚拟机咋了？ ip 是 xxx.xxx.xxx.xxx ”<br>-“我问了没人回应我就下架了呢，这个是你的啊？”<br>-“对呀对呀，我不在你们群里，可以恢复么？我都没备份……”<br>-“……”</p>
</blockquote>
<p>最后，公司运维小哥费了很大劲周末加班给我恢复了数据。为了避免未来数据备份的麻烦，我决定开始正式整理好 Hexo 并启用 Github page 服务了。</p>
<h2 id="环境准备（折腾前必须掌握的）"><a href="#环境准备（折腾前必须掌握的）" class="headerlink" title="环境准备（折腾前必须掌握的）"></a>环境准备（折腾前必须掌握的）</h2><p>有一些知识和条件是需要准备的，我这里简单说下，具体可依赖搜索引擎在不会的时候轻松完成。<del>其实我能说是快忘掉了好吗？</del></p>
<h3 id="开通-Github-Page-服务"><a href="#开通-Github-Page-服务" class="headerlink" title="开通 Github Page 服务"></a>开通 Github Page 服务</h3><p>在自己的 github 主页中创建一个名为<code>用户名.github.io</code>的 Repository 即可。</p>
<h3 id="本地安装-Git-并了解一些常用-git-命令"><a href="#本地安装-Git-并了解一些常用-git-命令" class="headerlink" title="本地安装 Git 并了解一些常用 git 命令"></a>本地安装 Git 并了解一些常用 git 命令</h3><p>到 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 官网</a>下载 Git 并安装， windows 安装过程中记得勾选 git bash ，这个是执行 git 命令的入口。</p>
<p>安装好后，启动 git bash 通过执行命令 <code>ssh-keygen -t rsa -C &quot;github账号邮箱&quot;</code> 生成 ssh 密钥用来关联 github 账号。</p>
<p>到系统用户文档页（ Linux 系统请去 <code>~/.ssh</code> 目录找）找到 id_rsa 文件，打开将内容复制，登陆 github 账号设置中添加 SSH Key 并复制进去。</p>
<h3 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h3><p>Hexo 就是基于 node.js 的，所以这个必须得安装了，安装了它才能执行后面的 npm 命令。<br>可以自行到 <a href="https://nodejs.org" target="_blank" rel="noopener">Node.js 官网</a>下载自己需要的版本， Windows 建议下载最多用户使用的稳定版，我试过最新版好像有点问题。</p>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>Git 和 node.js 安装好后，在本地创建一个文件夹例如 <code>E:\Hexo</code> 。<br>进入该文件夹，打开 git bash ，执行命令 <code>npm install -g hexo-cli</code> 即可将 Hexo 安装到该目录。</p>
<blockquote>
<p>Linux 安装过程请直接参考<a href="https://hexo.io/docs/" target="_blank" rel="noopener"> Hexo 官方操作文档</a>，照给出的命令执行就好了。当然，如果要放到 github page 上同样需要生成 ssh key 与 github 账号关联并创建一个 github 主页。</p>
</blockquote>
<p>然后用如下命令启动博客：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>启动后就可以在本机通过 <code>http://loaclhost:4000</code> 查看效果了。</p>
<h2 id="折腾模式开启"><a href="#折腾模式开启" class="headerlink" title="折腾模式开启"></a>折腾模式开启</h2><p>本次折腾，主要做了以下事情：</p>
<ol>
<li>主题安装，选用了 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">yilia</a> 主题，但又根据 <a href="https://github.com/MOxFIVE/hexo-theme-yelee.git" target="_blank" rel="noopener">yelee</a> 主题代码做了微量调整；</li>
<li>导入原来 Wordpress 博客中的文章、页面和评论；</li>
<li>github 、 coding 、云主机多点部署并对新购买的域名做分区解析；</li>
<li>生成 RSS 订阅、站点地图并将链接主动提交到百度站长平台等利于搜索引擎的优化工作。</li>
</ol>
<h3 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h3><p>执行命令 <code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code> 和 <code>git clone https://github.com/MOxFIVE/hexo-theme-yelee.git</code> 下载上述两个主题，然后复制 yilia 创建名为 ephen 的主题副本，修改 Hexo 博客根目录（我的是 <code>E:\Hexo</code> ）的 _config.xml 文件将 theme 修改为 ephen 。</p>
<p>修改完工后删掉下载的两个主题目录。<del>诶诶，怎么有种卸磨杀驴的感觉？</del></p>
<p>本主题的主要修改点：</p>
<ol>
<li>增加 Telegram 图标，和 Telegram 配置；</li>
<li>增加显示和隐藏文章目录的支持；</li>
<li>原来的评论框代码不够整齐好看，把 yelee 的评论框移植了过来；</li>
<li>增加文章搜索的支持（需要安装插件： <code>npm install hexo-generator-search --save</code> ，并添加插件设置）；</li>
<li>增加文章左右边栏按钮；</li>
<li>其他看起来不太整齐的小部分代码；</li>
</ol>
<p>另外，我还想收藏下这个： <a href="http://www.tuicool.com/articles/fYZ7Zrj" target="_blank" rel="noopener">http://www.tuicool.com/articles/fYZ7Zrj</a> 什么时候有空了再改。</p>
<blockquote>
<p>如果有人喜欢我改后的主题，可以在下面留言</p>
</blockquote>
<h3 id="导入WordPress的页面-文章和评论"><a href="#导入WordPress的页面-文章和评论" class="headerlink" title="导入WordPress的页面/文章和评论"></a>导入WordPress的页面/文章和评论</h3><p>导入文章和页面需要安装这个插件： <code>npm install hexo-migrator-wordpress --save</code></p>
<p>登陆 Wordpress 管理控制台，导出 WXR 文件，如下图所示：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162220.png" alt="导出 wp 文件"></p>
<p>将导出的文件保存为 <code>wordpress.xml</code> ，执行命令 <code>hexo migrate wordpress wordpress.xml</code> 即可完成文章导入。</p>
<blockquote>
<p>注意：</p>
</blockquote>
<blockquote>
<ol>
<li>如果新站和老站的域名和链接不同，导入之前需要先修改 xml 文件中类似 <code>&lt;link&gt;</code> 和 <code>&lt;...url&gt;</code> 之类的 Label 内容，以保持和预期站点一致</li>
<li>导入文件如果是中文标题，可能会出现文件乱码，只能手工去修改了。完成导入后插件的光荣任务结束，处女座星人可以选择卸载它了： <code>npm remove hexo-migrator-wordpress</code></li>
<li>这个操作并不会导入评论，导入评论请继续往下看</li>
</ol>
</blockquote>
<p>由于 Hexo 的评论都是使用的社会化评论框，所以评论需要往社会化评论框（我用的是 Disqus ）中导入才能显示。这类工具一般都是支持转移的，向 Disqus 导入评论的操作如下：</p>
<ol>
<li>登陆 WP 控制台，导出时选择“文章”，导出文件命名为 <code>comments.xml</code> ，注意检查下文件中每篇文章的 URL 是不是和预期的 URL 一致（不一致会导致评论无法显示！）</li>
<li>登陆 Disqus 后台，进入这个页面： <code>https://用户名.disqus.com/admin/discussions/import/platform/wordpress/</code></li>
<li>选择刚才编辑好的文件导入</li>
</ol>
<p>这样，就完成了文章和评论的迁移了。</p>
<blockquote>
<p>不过有点小遗憾，评论者头像都丢失，变更为默认头像了。</p>
</blockquote>
<h3 id="多点部署和分区解析"><a href="#多点部署和分区解析" class="headerlink" title="多点部署和分区解析"></a>多点部署和分区解析</h3><p>博客发布到 github page 和 coding page 需要安装这个插件： <code>npm install hexo-deployer-git --save</code></p>
<p>然后到博客根目录找到 <code>_config.yml</code> 文件打开，将以下代码添加到最后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo:</span><br><span class="line">    github: https://github.com/用户名/用户名.github.io.git</span><br><span class="line">    coding: https://git.coding.net/用户名/用户名.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>设置好后，只需要在 Hexo 根目录执行 <code>hexo g</code> 后再执行 <code>hexo d</code> 便可完成页面的部署。</p>
<p>和 Github 上一样， Coding 上也要预先安装 SSH Key 并开通 Page 服务。SSH Key 不需要重新生成，将之前在 github 上用的内容复制过去即可；开通 Page 服务时注意将部署分支修改成 master （默认分支是 Coding-page ）。</p>
<p>然后去 Github 和 Coding 相应 Page 项目设置中绑定自己的域名，如图所示：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162332.png" alt=" Github 绑定域名"></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162355.png" alt=" Coding 绑定域名"></p>
<p>如果希望在自己的云主机中也部署一份，那么可登陆主机生成 SSH Key，将 Key 添加到 Github 或者 Coding 中（我添加到了 Github ），到网站文件根目录关联项目链接后执行 <code>git pull origin master</code> 即可完成站点部署。</p>
<p>最后，登陆 CloudXNS 做域名解析，我的解析设置如下图：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162423.png" alt=" CloudXNS 域名解析"></p>
<h3 id="RSS-、站点地图及搜索引擎优化"><a href="#RSS-、站点地图及搜索引擎优化" class="headerlink" title="RSS 、站点地图及搜索引擎优化"></a>RSS 、站点地图及搜索引擎优化</h3><p>这里不用多说，就是几个插件的安装和设置了。它们分别是： <code>hexo-generator-feed</code> ， <code>hexo-generator-sitemap</code> 和 <code>hexo-generator-baidu-sitemap</code> 。（两个 sitemap 一个是谷歌格式，一个是百度格式）</p>
<p>RSS 不需要做其他的操作，插件安装好后每次 <code>hexo g</code> 就会生成对应的 RSS 文件，需要时引用这个文件路径即可（比如主题设置中）。</p>
<p>针对 Sitemap ，需要到博客根目录去修改 <code>_config.yml</code> 文件，在 <code>plugins：</code> 下添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#sitemap</span><br><span class="line">sitemap:</span><br><span class="line">	path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">	path: baidusitemap.xml</span><br></pre></td></tr></table></figure>
<p>分别登陆谷歌站长平台和百度站长平台添加自己的新域名和站点地图。</p>
<p>按照百度站长平台的指引添加站点地图的位置：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162507.png" alt="百度站点地图"></p>
<p>也可以到自己的云主机平台上执行命令手动提交，这种提交方式百度响应是最快的了。</p>
<p>因此我在我的云主机上写了个脚本，用于每次同步网站内容后将新链接提交到百度：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">DIR=<span class="string">'/var/www/html'</span></span><br><span class="line">SITE=<span class="string">'http://ephen.me/'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span>/</span><br><span class="line">git pull origin master &gt; <span class="variable">$&#123;DIR&#125;</span>/.gitpull.log</span><br><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">cat /dev/null &gt; <span class="variable">$&#123;DIR&#125;</span>/freshurls.txt </span><br><span class="line">grep <span class="string">'/index.html'</span> .gitpull.log | grep -v <span class="string">'\"'</span> | awk <span class="string">'&#123;print $1&#125;'</span> |<span class="keyword">while</span> <span class="built_in">read</span> line</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span>  <span class="string">"<span class="variable">$&#123;SITE&#125;</span><span class="variable">$&#123;line&#125;</span>"</span> &gt;&gt; <span class="variable">$&#123;DIR&#125;</span>/freshurls.txt </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">curl -H <span class="string">'Content-Type:text/plain'</span> --data-binary @freshurls.txt <span class="string">"http://data.zz.baidu.com/urls?site=ephen.me&amp;token=xxxxxxxxxx"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
<p>如果有人也想使用此脚本，替换自己的目录、站点链接以及百度站长 TokenID 即可。</p>
<blockquote>
<p>注意：该脚本不支持 URL 链接为中文的情况！！</p>
</blockquote>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>这次折腾花了不小的精力，毕竟是自己的事情，所以为不占用工作时间多次加班到很晚才走。</p>
<p>本来不想记录的，担心下次出什么状况又要花大力气折腾，所以趁热记录下，同时也希望我的折腾过程能帮助到其他的新手。</p>
]]></content>
      
        <categories>
            
            <category> 博客折腾 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> sitemap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[什么是 DNSSEC ？ DNSSEC 的概念及作用]]></title>
      <url>https://ephen.me/2016/dnssec/</url>
      <content type="html"><![CDATA[<p>我们知道，过去由于环境良好，互联网先驱者们“ Too simple, Too Naive ”，他们设计了域名系统（ Domain Name System ，DNS ）。就像互联网的其他协议或系统一样，在过去可信的、纯净的环境里运行得很好。</p>
<p>而随着互联网的发展，如今充斥着各种欺诈、攻击，使得今天的互联网环境异常复杂，DNS 协议的脆弱性也就浮出水面。</p>
<p>DNS 最大的缺陷就是解析的请求者无法验证它所收到的应答信息的真实性，一些坏人对 DNS 的攻击可能导致互联网大面积的瘫痪，这种事件在国内外都屡见不鲜。</p>
<a id="more"></a>
<h2 id="DNSSEC-是什么？"><a href="#DNSSEC-是什么？" class="headerlink" title="DNSSEC 是什么？"></a>DNSSEC 是什么？</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>DNSSEC 全称 Domain Name System Security Extensions ，即 DNS 安全扩展，是由 IETF 提供的一系列 DNS 安全认证的机制（可参考 <a href="https://tools.ietf.org/html/rfc2535" target="_blank" rel="noopener">RFC2535</a> ）。它提供一种可以验证应答信息真实性和完整性的机制，利用密码技术，使得域名解析服务器可以验证它所收到的应答(包括域名不存在的应答)是否来自于真实的服务器，或者是否在传输过程中被篡改过。</p>
<p>通过 DNSSEC 的部署，可以增强对 DNS 域名服务器的身份认证，进而帮助防止 DNS 缓存污染等攻击。</p>
<p>DNSSEC 给解析服务器提供了防止上当受骗的武器，是实现 DNS 安全的重要一步和必要组成部分。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>DNSSEC 通过公钥密码技术对 DNS 中的信息创建密码签名，为 DNS 信息同时提供认证和信息完整性检查，它的实施步骤如下：</p>
<ol>
<li>DNS 服务器收到 DNS 查询请求后，用散列函数将要回复 DNS 报文的内容进行散列运算，得到“内容摘要”，使用私匙加密后再附加到 DNS 报文中；</li>
<li>DNS 查询请求者接收到报文后，利用公匙解密收到的“内容摘要”，再利用散列函数计算一次 DNS 查询请求报文中的“内容摘要”，两者对比；</li>
<li>若相同，就可以确认接收到的 DNS 信息是正确的 DNS 响应；若验证失败，则表明这一报文可能是假冒的，或者在传输过程、缓存过程中被篡改了。</li>
</ol>
<h2 id="DNSSEC-相关术语"><a href="#DNSSEC-相关术语" class="headerlink" title="DNSSEC 相关术语"></a>DNSSEC 相关术语</h2><h3 id="DNSKEY-RRSIG-DS-NSEC-资源记录"><a href="#DNSKEY-RRSIG-DS-NSEC-资源记录" class="headerlink" title="DNSKEY/RRSIG/DS/NSEC 资源记录"></a>DNSKEY/RRSIG/DS/NSEC 资源记录</h3><p>为了实现资源记录的签名和验证，DNSSEC增加了四种类型的资源记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RRSIG 记录： Resource Record Signature ，存储资源记录集合（ RRSets ）的数字签名</span><br><span class="line">DNSKEY 记录： DNS Public Key ，存储公开密钥</span><br><span class="line">DS 记录： Delegation Signer ，存储 DNSKEY 的散列值，用于验证 DNSKEY 的真实性，从而建立一个信任链</span><br><span class="line">NSEC 记录： Next Secure ，用于应答那些不存在的资源记录</span><br></pre></td></tr></table></figure>
<h3 id="信任锚（-Trust-anchor-）"><a href="#信任锚（-Trust-anchor-）" class="headerlink" title="信任锚（ Trust anchor ）"></a>信任锚（ Trust anchor ）</h3><p>DNSSEC 需要一个信任链，必须有一个或多个开始就信任的公钥（或公钥的散列值），称这些初始信任的公开密钥或散列值为“信任锚（ Trust anchors ）”。</p>
<h3 id="DLV-DNSSEC-Lookaside-Validation"><a href="#DLV-DNSSEC-Lookaside-Validation" class="headerlink" title="DLV(DNSSEC Lookaside Validation)"></a>DLV(DNSSEC Lookaside Validation)</h3><p>即 DNSSEC 旁路信任源。</p>
<h3 id="KSK-ZSK-与-Signed-zone"><a href="#KSK-ZSK-与-Signed-zone" class="headerlink" title="KSK/ZSK 与 Signed zone"></a>KSK/ZSK 与 Signed zone</h3><p>权威域的管理员通常用两个密钥配合完成对区数据的签名，一个是 Zone-Signing Key(ZSK) ，另一个是 Key-Signing Key(KSK) 。</p>
<p>ZSK 用于签名区数据，而 KSK 用于对 ZSK 进行签名，被签名的区数据则被称为 Signed zone 。</p>
<h2 id="DNSSEC的应用场景"><a href="#DNSSEC的应用场景" class="headerlink" title="DNSSEC的应用场景"></a>DNSSEC的应用场景</h2><h3 id="一、配置安全的域名解析服务器（-Resolver-）"><a href="#一、配置安全的域名解析服务器（-Resolver-）" class="headerlink" title="一、配置安全的域名解析服务器（ Resolver ）"></a>一、配置安全的域名解析服务器（ Resolver ）</h3><p>即用户使用的 DNS ，常被称为本地 DNS （ Local DNS ）或公众 DNS。</p>
<p>通过该 Resolver 服务器可以保护使用它的用户，防止被 DNS 欺骗攻击， DNSSEC 在这里只涉及数字签名的验证工作。</p>
<h3 id="二、配置安全的权威域名服务器（-Name-Server-）"><a href="#二、配置安全的权威域名服务器（-Name-Server-）" class="headerlink" title="二、配置安全的权威域名服务器（ Name Server ）"></a>二、配置安全的权威域名服务器（ Name Server ）</h3><p>也被称为授权 DNS ，例如 CloudXNS 。</p>
<p>DNSSEC 对权威域的资源记录进行签名，保护服务器不被域名欺骗攻击。</p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> DNSSEC </tag>
            
            <tag> 安全 </tag>
            
            <tag> DNS 污染 </tag>
            
            <tag> 域名攻击 </tag>
            
            <tag> 域名劫持 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何验证 DNS 服务器是否支持 DNSSEC ？]]></title>
      <url>https://ephen.me/2016/dnssec-verify/</url>
      <content type="html"><![CDATA[<p>众所周知，DNSSEC 对于 DNS 劫持虽然有极强的防御性，但由于被劫持的数据都会在验证失败后被丢弃，因而并不能让我们在 DNS 劫持的情况下获得正确的解析结果。（请先参考：<a href="/2016/dnssec/">什么是 DNSSEC ？ DNSSEC 的概念及作用</a>）</p>
<p>所以，我们需要 DNS 安全传输的前提是加固客户端到 DNS 服务器之间的网络连接的安全性。</p>
<p>也就是说， DNSSEC 除了客户端支持之外，更重要的是 DNS 服务器本身必须有部署 DNSSEC 的支持。</p>
<p>否则：</p>
<ol>
<li>客户端没有配置 dnssec-check-unsigned 而 DNS 服务器支持 DNSSEC ，此时 DNSSEC 默认信赖所有没签名的数据，等于没有提供任何防护；</li>
<li>客户端配置启用了 dnssec-check-unsigned 而 DNS 服务器不支持 DNSSEC ， dnsmasq 因为不能获取任何 DNSSEC 签名信息导致不信任全部解析结果，进而使得整个 DNS 解析服务完全无法工作。</li>
</ol>
<p>那么…</p>
<a id="more"></a>
<h2 id="如何判定一台-DNS-服务器是否支持-DNSSEC-呢？"><a href="#如何判定一台-DNS-服务器是否支持-DNSSEC-呢？" class="headerlink" title="如何判定一台 DNS 服务器是否支持 DNSSEC 呢？"></a>如何判定一台 DNS 服务器是否支持 DNSSEC 呢？</h2><p>很简单，还是用 dig 命令。 <a href="http://linux.51yip.com/search/dig" target="_blank" rel="noopener">dig 命令参考手册</a></p>
<h3 id="方法-A-：检查一个有-DNSSEC-签名的域名的-RRSIG-Resource-Record-Signature"><a href="#方法-A-：检查一个有-DNSSEC-签名的域名的-RRSIG-Resource-Record-Signature" class="headerlink" title="方法 A ：检查一个有 DNSSEC 签名的域名的 RRSIG(Resource Record Signature)"></a>方法 A ：检查一个有 DNSSEC 签名的域名的 RRSIG(Resource Record Signature)</h3><p>为了让结果看得更清楚，我们找一个配置了 DNSSEC 签名的域名（ paypal.com ），一个支持 DNSSEC 的 DNS 服务器（ 4.2.2.4 ），和一个不支持  DNSSEC 的 DNS 服务器（ 114.114.114.114 ）。</p>
<p><em>使用支持 DNSSEC 的 4.2.2.4 查询结果如下：</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">root@OpenWrt:~# dig paypal.com +dnssec @4.2.2.4</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4 &lt;&lt;&gt;&gt; paypal.com +dnssec @4.2.2.4</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 48979</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags: do; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;paypal.com.                    IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">paypal.com.             293     IN      A       66.211.169.3</span><br><span class="line">paypal.com.             293     IN      A       66.211.169.66</span><br><span class="line">paypal.com.             293     IN      RRSIG   A 5 2 300 20140728175119 20140628172604 11811 paypal.com. ka3J7csLBUiZIrh7YTKJ7eUBzpACe7jmr6M2wURsNCQ/dFjB9Jl018OZ 6i3BzzSYqSS2jw9TmVZMKxRLH3cmt5jc1BNI6Q9uB46DLpJJoAmXQ1rQ ss37Mb4BlK8dD4rxLJmEJh19+Kg8xXxE8iGYwLM7tkyayIjVdxbt80TE vgg=</span><br><span class="line"></span><br><span class="line">;; Query time: 224 msec</span><br><span class="line">;; SERVER: 4.2.2.4#53(4.2.2.4)</span><br><span class="line">;; WHEN: Tue Jul 15 21:49:25 CST 2014</span><br><span class="line">;; MSG SIZE  rcvd: 241</span><br></pre></td></tr></table></figure>
<p><em>使用不支持 DNSSEC 的 114.114.114.114 查询结果如下：</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@OpenWrt:~# dig paypal.com +dnssec @114.114.114.114</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.9.4 &lt;&lt;&gt;&gt; paypal.com +dnssec @114.114.114.114</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 12717</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0</span><br><span class="line"></span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;paypal.com.                    IN      A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">paypal.com.             300     IN      A       66.211.169.3</span><br><span class="line">paypal.com.             300     IN      A       66.211.169.66</span><br><span class="line"></span><br><span class="line">;; Query time: 577 msec</span><br><span class="line">;; SERVER: 114.114.114.114#53(114.114.114.114)</span><br><span class="line">;; WHEN: Tue Jul 15 21:49:57 CST 2014</span><br><span class="line">;; MSG SIZE  rcvd: 60</span><br></pre></td></tr></table></figure>
<p>我们可以看到，支持 DNSSEC 的服务器多返回了一串非常长的 RRSIG(Resource Record Signature) ，这就是 DNSSEC 中非常重要的数据签名。</p>
<p>而不支持 DNSSEC 的服务器就完全没有返回这些信息了，由此我们可以很容易区分一台 DNS 服务器是否支持 DNSSEC 。</p>
<p>不过，目前配置了 DNSSEC 签名的域名非常少，据我所知一般有些国外政府域名有，当然 paypal 也有，而国内几乎没有（国内的支付宝并没有）。</p>
<p>如果一个域名本身就没有配置 DNSSEC 签名，那么无论你是通过什么样的 DNS 服务器查询 dnssec 数据，结果都是一样的。</p>
<p>那如果我们不知道哪些域名配置了 DNSSEC 签名，难道就无法验证 DNS 服务器是否支持 DNSSEC 了？</p>
<p>当然不是！我们有…</p>
<h3 id="方法-B-：自残测试法！"><a href="#方法-B-：自残测试法！" class="headerlink" title="方法 B ：自残测试法！"></a>方法 B ：自残测试法！</h3><p>由于当我们启用了 Dnsmasq 的 dnssec–check–unsigned 选项， Dnsmasq 就会检查 DNS 返回的数据是否经过签名。（注意，这个签名是 DNS 服务器本身对发出的数据包的签名，用于证明这个数据包确实发送自我这个服务器且没有被修改，和域名本身是否有 DNSSEC 签名毫无关系。）</p>
<p>如果 DNS 服务器返回的数据包没有经过 DNS 服务器签名，那么 Dnsmasq 就会丢弃这个解析结果，因为启用这个选项后它只接受签名过的数据。</p>
<p>所以，做法就是：</p>
<ol>
<li>把 Dnsmasq 的 DNS 设置为你要测试的那个 DNS 服务器（注意！只写这一个 DNS ，别的都不写）；</li>
<li>启用 Dnsmasq 的 dnssec-check-unsigned 选项；</li>
<li>域名解析验证。</li>
</ol>
<p>如果你还可以解析域，说明这个 DNS 支持 DNSSEC ；如果你发现什么域名都解析不了了，那么就是因为这个 DNS 服务器不支持 DNSSEC ，导致 Dnsmasq 不信任返回的所有数据了。</p>
<p>国内目前支持 DNSSEC 的服务器，不能说稀少吧，只能说我一个都没发现。而国外的公共 DNS ，我们熟知的那些除了 OpenDNS 有它自己的一套 DNScrypt 加密体系而没有采用 DNSSEC 其他倒基本都是支持的。</p>
<p><em>我测试过支持 DNSSEC 的国外公共 DNS 如下：</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Google Public DNS： 8.8.8.8 | 8.8.4.4</span><br><span class="line">Norton DNS： 199.85.126.20 | 199.85.127.20</span><br><span class="line">Comodo DNS： 8.26.56.26 | 8.20.247.20</span><br><span class="line">DNS Advantage： 156.154.70.1 | 156.154.71.1</span><br><span class="line">NTT DNS： 129.250.35.250 | 129.250.35.251</span><br><span class="line">Verizon DNS： 4.2.2.1 | 4.2.2.2 | 4.2.2.3 | 4.2.2.5 | 4.2.2.6</span><br></pre></td></tr></table></figure>
<p>目前，由于国内并没有支持 DNSSEC 的公共 DNS ，也几乎没有配置了 DNSSEC 签名的域名，因此 CloudXNS 暂无支持 DNSSEC 的打算。</p>
<p>不过，在未来产品优化提升足够美好的时候，不排除会率先在国内支持 DNSSEC 的可能。</p>
<p>原文系转载，出处：LifeTyper</p>
<p>灰姑娘在此基础上略有改动。</p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> DNSSEC </tag>
            
            <tag> 安全 </tag>
            
            <tag> 域名劫持 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jmeter 以 non-gui 模式进行分布式测试]]></title>
      <url>https://ephen.me/2016/Jmeter-NonGUI-Test/</url>
      <content type="html"><![CDATA[<p>由于 Jmeter 是一个纯 JAVA 的应用，用 GUI 模式运行压力测试时，对客户端的资源消耗是相当惊人的，所以在进行正式的压测时一定要使用 non-gui 模式运行，如果并发数很高或者客户端的硬件资源比较一般的话，还可以以 server 模式用多个 client 进行分布式测试。</p>
<p>下面以武汉快网 CMCC 项目为例，结合官方文档和自己的实际经验来谈一谈， Jmeter 如何以 non-gui 模式进行分布式测试。</p>
<a id="more"></a>
<h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><h3 id="linux-下安装-jdk1-7"><a href="#linux-下安装-jdk1-7" class="headerlink" title="linux 下安装 jdk1.7"></a>linux 下安装 jdk1.7</h3><p>负载机使用的是 CentOS 6.7 版本的 linux 系统， 自带有 OpenJDK runtime environment (openjdk) ，它是一个在 linux 上实现开源的 java 平台。</p>
<p>1 . <strong>查看 CentOs 自带的 JDK 是否已安装</strong>，输入： <code>yum list installed |grep java</code></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152046.png" alt="查看 JDK 是否安装"></p>
<p>2 . 若有自带安装的 JDK ，则表示 JAVA 环境已经安装成功，可以<strong>查看安装的 java 版本信息</strong></p>
<p>输入： <code>java -version</code> 可查看 Java 版本；</p>
<p><img src="https://imephen.pek3b.qingstor.com/20190426152205.png" alt="查看 Java 版本"></p>
<p>3 . 如果想<strong>卸载 CentOS 系统自带 Java 环境</strong>，可输入： <code>yum -y remove java1.7.0-openjdk*</code> （ <code>*</code> 表示卸载掉 java1.7.0 的所有 openjdk 相关文件）</p>
<p>4 . <strong>卸载 tzdata-java</strong> 输入： <code>yum -y remove tzdatajava.noarch</code> ，当结果显示为 Complete ，即卸载完毕。</p>
<p>5 . <strong>检查 CentOS 系统网络连接是否正常</strong>。</p>
<p>使用 yum 方式安装需要连接网络下载相应安装文件，故需要使用 ping 命令测试网络，如 <code>ping www.baidu.com</code></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152436.png" alt="测试网络"></p>
<p>6 . <strong>查看 yum 库中的 java 安装包</strong>，输入： <code>yum -y list java*</code></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152504.png" alt="查看 yum 中 java 安装包"></p>
<p>7 . <strong>使用 yum 安装 java 环境</strong>，输入： <code>yum -y install java1.7.0-openjdk*</code> ，当结果显示为 Complete ，即安装完毕。</p>
<h3 id="安装-JMeter"><a href="#安装-JMeter" class="headerlink" title="安装 JMeter"></a>安装 JMeter</h3><p>安装好 java 环境，就可以在此基础之上安装 jmeter 。</p>
<p>1 . <strong>将 jmeter 安装包上传到服务器指定目录</strong>，比如： <code>/root/mobile/</code></p>
<p>2 . <strong>解压 zip 安装包</strong>，输入： <code>unzip apache-jmeter-2.13.zip</code></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152540.png" alt="解压 jmeter 安装包"></p>
<h2 id="非-GUI-模式下运行-Jmeter"><a href="#非-GUI-模式下运行-Jmeter" class="headerlink" title="非 GUI 模式下运行 Jmeter"></a>非 GUI 模式下运行 Jmeter</h2><p>JMeter 远程测试原理图如下：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152614.png" alt="Jmeter 远程测试原理图"></p>
<p>如果运行 JMeter 客户端的机器性能不能满足测试需要，那么测试人员可以通过单个 JMeter 客户端来控制多个远程 JMeter 服务器，以便对服务器进行压力测试，模拟足够多的并发用户。通过远程运行 JMeter ，测试人员可以跨越多台低端计算机复制测试，这样就可以模拟一个比较大的服务器压力。</p>
<p>用一台机器（称为 JMeter 客户端）上的 jmeter 同时启动另外几台机器（称为 JMeter 远程服务器）上的 jmeter 。</p>
<p>1 . 保证 jmeter 客户端和 jmeter 远程服务器采用相同版本的 jmeter 和 JVM 。<br>2 . jmeter 客户端和 jmeter 远程服务器最好在同一个网段内。<br>3 . 在 jmeter 远程服务器上运行 <code>root/mobile/apache/jmeter-2.13/bin/jmeter-servere</code> 脚本。指定 server 的 ip ，如： <code>./jmeter-server -Djava.rmi.server.hostname=118.192.6.15</code> ， jmeter-server 正常启动会提示”创建远程服务”<br>4 . 在 jmeter 客户端上修改 <code>/bin/jmeter.properties</code> 文件，找到属性 <code>&quot;remote_hosts&quot;</code> ，使用 JMeter 远程服务器的 IP 地址作为其属性值。可以添加多个服务器的 IP 地址，以逗号作为分隔。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152641.png" alt="找到 Jmeter 属性文件"></p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">remote_hosts=118.192.6.15:1099,118.192.6.16:1099   #RMI port to be used by the server (must start rmiregistry with same port)</span><br><span class="line">server_port=1099</span><br></pre></td></tr></table></figure>
<p><img src="https://pek3b.qingstor.com/imephen/20190426152709.png" alt="修改 Jmeter 属性"></p>
<p>5 . 在 jmeter 客户端上启动 jmeter 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./jmeter -n -t plan.jmx -l result.jtl -r</span><br></pre></td></tr></table></figure>
<p><code>plan.jmx</code> 测试计划可以在 windows 环境下先创建，最好不要添加监听器，应为命令行启动的话监听器可能会占用资源而且有没有任何视图效果。</p>
<blockquote>
<p>参数说明 :</p>
<p>-n  告诉 jmeter 使用 nogui 模式运行测试</p>
<p>-t  执行的测试脚本名</p>
<p>-l  后面跟着测试结果记录的路径与文件名 </p>
<p>-r  表示远程启动 (remote) </p>
<p>jmeter 客户端会自动向 jmeter 远程服务器上分发测试计划。</p>
</blockquote>
<p>最后，可以将 result.jtl 结果文件下载到 windows 机上在不同的监听器上分析测试结果。</p>
]]></content>
      
        <categories>
            
            <category> 工作笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Jmeter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不会 A/B 测试的 Web 设计师不是好程序员]]></title>
      <url>https://ephen.me/2015/AB-test/</url>
      <content type="html"><![CDATA[<p>英文原文：<a href="https://shopifypartnerblog.myshopify.com/blogs/blog/74161923-how-a-b-testing-will-make-you-a-better-web-designer" target="_blank" rel="noopener">How A/B Testing Will Make You a Better Web Designer</a></p>
<hr>
<p>设计一个网站无论对设计者还是业主都是一个浩大的工程。但是，不管你是创建一个新的网站，还是对已有网站做重新设计，有一个至关重要的点，你的决定要基于数据而不是基于感觉。对客户和设计来说，在设计过程中做出的决定，可以决定创意，可以决定商业的成败。</p>
<p>为了避免你下一个作品中潜在的缺陷，你应该将 A/B 测试做为你设计工具的标准配置。对客户网站做简单的 A/B 测试可以让你交付之前避免设计，导航，功能上的任何缺陷。这样可以让你交出最终产品，不仅视觉效果极佳，还有优化的交互 – 他们会爱上你的。</p>
<p>听起来很有趣？继续阅读，看看 A/B 测试如果让你成为更好的 web 设计师。</p>
<a id="more"></a>
<h2 id="A-B-测试-101"><a href="#A-B-测试-101" class="headerlink" title="A/B 测试 101"></a>A/B 测试 101</h2><p>A/B 测试（又称分割测试），允许你在一个网站测试两个不同的测试元素，测试目的是判断哪种设计对完成特定目标是最有效的。</p>
<p>做 A/B 测试时，进入网站的用户会被随机分配到两个组：一半在“A 组”，另外一半在“B 组”。随后每组显示你选定的不同设计元素<strong> — </strong>例如，登录页面，商铺主题，响应按钮，或者结帐流程。</p>
<p><img src="https://static.oschina.net/uploads/img/201511/03163625_pzJH.jpg" alt="Ab Testing for Web Design - Multiple Landing Pages"></p>
<p>通过对真实用户实时测试两组不同的设计元素，你可以收集成有意义的数据用来确定每个组的设计元素对访客行为的影响。这会给你更来设计洞察力，帮助你为客户创建最佳在线商业方案。</p>
<p><strong>从本质上讲，A/B 测试帮助你在每一个项目上设计出最好的网站。 </strong></p>
<h3 id="为什么-Web-设计者应该做-A-B-测试"><a href="#为什么-Web-设计者应该做-A-B-测试" class="headerlink" title="为什么 Web 设计者应该做 A/B 测试"></a>为什么 Web 设计者应该做 A/B 测试</h3><p>创建最好的网站应该就是你开始在设计项目中把 A/B 测试作为标准服务来提供的充分理由。不过如果你还不服气的话，下面也是你可以预见到的其它好处：</p>
<p><strong>1. 增加收入 </strong>— 通过将 A/B 测试当做一项服务涵盖到你的自由职业项目中，就能为你带来更多的项目收益。你既可以将其作为标准化服务包含到你的 web 设计包中，也可以利用其在网站优化方面的好处将其作为加钱项。你的客户会花费一个体面的金额以让他们的网站建设专业起来 — 把 A/B 测试作为一项后续服务来做出明智的设计修改，这样做将帮助他们获得收入的最大爆发(而你自己也能赚更多一点)。</p>
<p><strong>2. 减少客户纠纷 </strong>— 当扯到要为一个网站做出设计决定的时候，看起来房间里的每个人都对于网站应该怎么怎么样持有各自的观点 — 特别是为此花了钱的客户。幸运的是，A/B 测试为你提供了具体的数据来指导设计决定，并且无需得罪客户就能化解掉不必要的纠纷。</p>
<p><strong>3. 心满意足的客户 </strong>— 将所有精力集中到网站的视觉设计上而忽略其功能性目标这种事情是很容易发生的。然而大多数客户确实想要一个好看的最终产品，每个客户其实更关心那个网站的转化。运行 A/B 测试能向你的客户说明你是真正在关心他们业务的在线目标的，并且也希望尽力帮他们完成预期。</p>
<h3 id="如何设计一个简单-A-B-测试"><a href="#如何设计一个简单-A-B-测试" class="headerlink" title="如何设计一个简单 A/B 测试"></a>如何设计一个简单 A/B 测试</h3><p>如果之前从来没有运作过一次 web 优化实验，第一次的 A/B 测试看起来就会相当令人为难。但是不要担心，创造一个简单的 A/B 测试其实还是相当简单的。下面我会概述一种你可以开始尝试运作你的首次 A/B 测试的策略性方法。</p>
<h3 id="定义你的目标"><a href="#定义你的目标" class="headerlink" title="定义你的目标"></a>定义你的目标</h3><p>在你开始测试一些东西的时候，你需要去理解网站的目的。理解了网站的目的就能让你确定在量化的指标方面成功对于你的客户意味着什么。这些指标，也叫做转换，代表了你所期望的访问者将会在网站上进行的动作。通过及早定义目标和成功指标，你就为 A/B 测试将要执行的操作划定了一个框框。</p>
<p>你的转换指标将根据你所设计的网站的类型而有所不同。下面的表格概述了不同网站类型的常见转换指标：</p>
<p><img src="https://static.oschina.net/uploads/img/201511/03163625_wt9T.png" alt="ab testing metrics for web design"></p>
<h3 id="识别瓶颈"><a href="#识别瓶颈" class="headerlink" title="识别瓶颈"></a>识别瓶颈</h3><p>为了让你的测试得到最好的结果，你需要识别过程通道中用户失去访问兴趣或者脱离通向转换路程的区域。这些障碍被称为瓶颈。就是这些瓶颈对你的网站的表现产生了消极的影响，也就是你想要运作 A/B 测试的地方。</p>
<p><img src="https://static.oschina.net/uploads/img/201511/03163625_dHcG.jpg" alt="Ab Testing for web design Bottlenecks"></p>
<p>如果你在客户的商店中设置了 Google Analytics，其内置的转换跟踪可以提供相对简单的方式来识别用户体验中潜在的瓶颈，可以在分析管理界面中设定你的转换目标，通过定义一些用户走向转换的过程中的事件和页面就可以简单地创建一个转换通道。</p>
<p>电子商务网站上常见的一个简单转换通道示例应该是这样的: “放到购物车” 到 “查看购物车”到“下单” 到 “选择支付方式” 到最后 “订单确认”。这里有一个 <a href="https://support.google.com/analytics/answer/1032415?hl=en" target="_blank" rel="noopener">很棒的指南</a> 能帮助你开始在 Analytics 上进行转换跟踪，另外还有一个能帮助你进行更多 <a href="https://docs.shopify.com/support/other/general-information/google-analytics-goals-and-funnels" target="_blank" rel="noopener">高级的通道转换跟踪</a> 的设置。</p>
<p>一旦你设置好了转换目标和通道，你就能够使用 Google Analytics 的“Goals“找到的“Goal Flow”报告来识别瓶颈了。通过对造成最多门槛和用户退出的事件和页面进行高亮显示，这份报告能够帮助你着力于对测试最有益的区域。</p>
<p><strong><img src="https://static.oschina.net/uploads/img/201511/03163626_Q0qY.jpg" alt=""></strong></p>
<h3 id="创建一个假设"><a href="#创建一个假设" class="headerlink" title="创建一个假设"></a>创建一个假设</h3><p>一旦你确认了目标并识别除了瓶颈，你就应该创建一个你确信的假设，有关于对站点的设计修改会改变访问者行为的。这会使得你的测试更具价值，因为它想过程中加入了一层目的，确保你仍在保持对于整个测试目标实现过程的跟踪。</p>
<p><strong>例如，假设你的客户的最终目标是降低网站的购物车放弃率。你已经完成了调查并识别出影响现有比率的瓶颈在于出现在”结算信息“页面之后而在”确认“页面之前的”传递信息“页面。在这种情况下，你的假设可以像下面这样：</strong></p>
<p><strong>“如果我们通过将计费和传递信息页面整合成一个页面来缩短结账流程，那么整体的购物车放弃率将会降低。”</strong></p>
<p>如果你在没有创建一个假设的情况下去尝试运作一次测试，你还是会收集到关于访问者有价值的数据。不过不幸的是，你会错过对于诸如为什么结果是他们这样做了这种问题的更深层次的分析和验证。即使你的测试失败了，你还是能够从实验中得出一些结论。实验的妙处在于，在整个站点上的实现之前放弃那些不起作用的想法。</p>
<h3 id="设计一些修改版本"><a href="#设计一些修改版本" class="headerlink" title="设计一些修改版本"></a>设计一些修改版本</h3><p>在你可以去实践你的实验之前，你需要针对你所测试的特定的设计元素创建修改版本。元素原来的版本是控制版本，而新的版本都是这个控制版本的变化版本。</p>
<p><img src="https://static.oschina.net/uploads/img/201511/03163626_7iGu.jpg" alt="Web Design Variants for AB Testing"></p>
<p>为了开发出最准确和公正的 A/B 测试，要确保新的版本中只有控制变量其中之一被修改了。例如，你可以测试一个号召性按钮(如前所述)的颜色，或者其在页面上的位置，但不能同时测试。将你的测试限制于单一变量确保了你可以放心地将行为所发生的变化归因于做出了设计修改的变量<strong>。
</strong></p>
<h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><p>瓶颈确认而且构建了设计变量，你几乎就已经准备好运作你的A/B测试了。为了确保你的测试能提供最精确的结果，你会想要确保下面两件事情发生在实现期：</p>
<p>1. 向一组随机选择的站点访问者分组同时展示你的变量和控制版本的元素.</p>
<p>2. 将你的测试运行足够长的时间，那样它就能展示尽可能最大数量的样本.</p>
<p>遵循这两项准则将有助于确保实验提供了统计上最显著的可能结果。那样，你就可以对你所使用的数据放心了，因为你所做出的最终设计决定的基础是可靠和精确的。</p>
<p>对于初学者要在他们的站点——不管它是不是在 Shopify 上 ——上开始实现一次 A/B 测试最容易的方法就是使用 A/B 实验工具. 有各种工具可以供你用来在网站上进行 A/B 测试, 而我建议你先从 <a href="https://optimizely.com/" target="_blank" rel="noopener">Optimizely</a>, <a href="https://unbounce.com/" target="_blank" rel="noopener">unbounce</a>, 或者 <a href="https://www.google.com/analytics/standard/features/" target="_blank" rel="noopener">Google Analytics Content Experiments</a> 开始.</p>
<p><strong>还有如果你在找一些额外的资源作为入门资料, 可以看看这些综合指南:</strong></p>
<ul>
<li><a href="https://www.shopify.ca/blog/12385217-the-beginners-guide-to-simple-a-b-testing" target="_blank" rel="noopener">简单的 A/B 测试入门指南</a></li>
<li><a href="https://blog.optimizely.com/2013/03/08/ab-testing-and-website-redesigns/" target="_blank" rel="noopener">A/B 测试和网站重新设计</a></li>
<li><a href="https://blog.optimizely.com/2013/04/30/71-things-to-ab-test/" target="_blank" rel="noopener">A/B 测试有关的71件事</a></li>
</ul>
<h2 id="成为一名更好的web设计者"><a href="#成为一名更好的web设计者" class="headerlink" title="成为一名更好的web设计者"></a>成为一名更好的web设计者</h2><p>最成功的网站设计者知道网站的交接仅仅只是开始而已. 每一个单独的项目都能带来几乎无穷尽的实践和优化的机会. 通过把 A/B 测试当做你的标准设计包中提供的一项服务, 就将能够提高收入，帮助你的客户达成更好的商务业绩, 并构建出一个你可以真正为之骄傲的网站.</p>
<p>你还在等什么呢? 马上开始测试踏上你成为更好的 web 设计者的征途吧。</p>
<p>此文为转载，原文链接：<a href="https://www.oschina.net/translate/how-a-b-testing-will-make-you-a-better-web-designer" target="_blank" rel="noopener">https://www.oschina.net/translate/how-a-b-testing-will-make-you-a-better-web-designer</a></p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 程序员 </tag>
            
            <tag> 设计师 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安全测试与渗透测试区别]]></title>
      <url>https://ephen.me/2015/SercurityTest/</url>
      <content type="html"><![CDATA[<p>安全测试不同于渗透测试，渗透测试侧重于几个点的穿透攻击，而安全测试是侧重于对安全威胁的建模，系统的对来自各个方面，各个层面威胁的全面考量。安全测试可以告诉 您，您的系统可能会来自哪个方面的威胁，正在遭受哪些威胁，以及您的系统已经可抵御什么样的威胁。当然，安全测试涵盖渗透测试的部分内容。</p>
<p>安全测试与渗透 测试的区别主要在：</p>
<a id="more"></a>
<p>渗透测试考虑的是以黑客方法，从单点上找到利用途径，证明你有问题。可以帮助客户提高认识，也能解决急迫的一些问题，但无法也不能去针对系统做完备性的安全测试，所以难以解决系统自身实质性的安全问题。</p>
<p>安全测试首先会对被测试系统做系统分析，分析其架构，软件体系以及程序部署等等。然后再对被测系统做系统安全分析，在这之后会对系统进行安全建模，明确本系统可能来自的各个潜在威胁，之后需要剖析系统，确认有哪些攻击界面，根据测试方案进行测试。安全测试只关注漏洞的可利用性分析，但不关注漏洞如何被真实利用的技术。</p>
<p>提供渗透测试的厂商一般都是自己买什么防护设备，以自己防护设备针对的威胁为主要渗透点，找到你有类似的问题，解决方案就以卖对应的防护设备作为手段，针对具体的威胁，通过防护设备采取被动的防护。而安全测试的厂商，则从整体系统 架构，安全编码，安全测试，安全测试覆盖性，安全度量等多个因素去考虑问题，提出的解决方法则是逐步帮助客户引入安全开发过程，提供相应的工具支撑，目标是最后让客户提升业务系统自身实质性安全问题。</p>
<p>安全测试不关注漏洞如何被真实利用的技术，这当中有几个因素：</p>
<p>成本因素：对攻击者来说，利用漏洞的收益是系统所保护的资产，所以可以投入更多的成本来研究漏洞的利用，包括时间，人员，手段。但是对安全测试来说，整个收益是客户愿意投入的成本，系统所保护的资产远大于系统开发投入，安全投入又只占系统开发投入的百分之三左右，所以从成本角度考虑，安全测试只关注评估漏洞 被利用的可能性，而不应该具体去研究漏洞如何被利用且展示给客户。</p>
<p>视角因素：安全测试是帮助客户降低安全威胁，减少安全漏洞。本身是一种防护技术，尽量发现安全问题并指导客户修复安全问题是关键，沿着的路径是发现安全问题 -&gt; 分析评估安全问题 -&gt; 提出修补建议 -&gt; 度量安全，而不是以攻击者视角发现安全问题 -&gt; 利用安全问题 -&gt; 获得非法收益的路径。对防护方最 有价值的是发现问题，解决问题，而不是发现问题，利用问题。防护方关注都漏洞是否可被利用确定安全漏洞和修复级别就够了，研究再多的具体攻击利用技术，对 操作系统级别的防护是有意义的，但是对普通应用系统的开发与使用者则是无价值的。</p>
<p>假定因素：客户面临的风险不仅来自于外部，也可能来自于攻击者通过客户端主机的渗透（如通过对某员工笔记本挂马再接入内网的方式），还有可能来自于内部。安 全要保护全面的安全，我们不能假定攻击者路径就一定处于同渗透测试一样的纯外部严密防护中，也无法假定攻击者通过时间积累社工或自身特性（员工）获取到一些信息。同时攻击利用技术发展到现在，已经和具体应用的特性结合起来，攻击者时刻有可能发现以前我们认为低危，不好利用的漏洞的利用方法。因此安全测试关 注点是业务系统在失去所有外部防护之后，自身实现的安全性，关注高覆盖的安全测试和安全度量，而不是单一的渗透测试。</p>
<p>当然目前，由于用户对安全的理解还存在很多认识误区，还需要慢慢改善。</p>
<p>举个例子，有个项目，用户的目标是希望能业务系统上线之前，通过测试改善安全，用户以前的安全主要是某国际大公司提供流程咨询一套，但难以解决安全问题， 因此用户希望引入安全测试来全面提升安全。其实这是很符合安全测试目标的，但是在选型之后，给予几家厂商PK的项目则是纯网站渗透测试性的，评价标准也只是在谁最后真实入侵了谁牛的标准。虽然最后也渗透成功，但是出具的报告则是针对某个页面具体的威胁分析，改进建议，没有去放置破坏性实质入侵的东西，用户反倒觉得没其他做渗透测试厂商报告漂亮，抓了WEBSHELL的屏，拿了敏感文件什么的，其实就和安全测试的本意就远了。当然既然用户的认识只在这个阶段，也没办法，后面的测试就只能以渗透利用的方式去做和出报告了。</p>
<p>但我认为，用户需要的是提升自身业务系统的安全，继续渗透这套方法，难道又要回到卖防护设备被动防护的方式吗？其实技术发展到现在，安全漏洞具体怎么利用成为了一门艺术，但是漏洞理论上是否可被利用却是基本可以定性的，只要理论上可以被利用的漏洞，厂商都应该修补，因为我们不能假设攻击者不能通过深 入研究达到实质可利用，厂商也没必要花费大量的成本去研究实质可利用。</p>
]]></content>
      
        <categories>
            
            <category> 知识探索 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 安全 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分享一个 win 平台记录重现步骤的录屏小工具： ScreenToGif]]></title>
      <url>https://ephen.me/2015/ScreenToGif/</url>
      <content type="html"><![CDATA[<p>我们在测试过程中，经常会需要记录 Bug ，用于体现测试成果价值、方便产品管理和异步协同工作。其中重现步骤是 bug 记录中重要元素之一，如果操作步骤较为复杂，一般开发人员会看不下去太多文字描述，这时辅以操作步骤录屏会大大减少文字描述以及开发和测试之间的沟通成本。</p>
<p>试过很多录屏工具，有专业级的，也有轻量级的，但是唯独 ScreenToGif 是我认为最适用于测试人员记录重现步骤的。</p>
<p>它有不同于其他录屏工具的以下特点：</p>
<a id="more"></a>
<ol>
<li>录制的并不是视频，而是 gif 图片格式，可在录制前调节 gif 动画帧的切换速度，占用空间小，易于传播；</li>
<li>画质高，所见即所得，以前尝试过的录屏工具为了缩小占用空间都会损伤画质，甚至会出现关键文字看不清楚的情况；</li>
<li>录制完成可回放和编辑，可以把操作过程中思考时间占据的无用帧删除，只保留重要部分，亦可在 gif 图片上涂鸦、写描述文字、打马赛克、加入已有图片等；</li>
</ol>
<p>下载及更多介绍请到 ScreenToGif 官网：<a href="https://www.screentogif.com/" target="_blank" rel="noopener">https://www.screentogif.com/</a></p>
<p>以下是一个 ScreenToGif 录制操作步骤的示例：<img src="https://imephen.pek3b.qingstor.com/screentogifdemo.gif" alt=" ScreenToGifDemo "></p>
]]></content>
      
        <categories>
            
            <category> 工具介绍 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[做CloudXNS产品运营的这半年]]></title>
      <url>https://ephen.me/2015/opration-halfyear/</url>
      <content type="html"><![CDATA[<p>2014 年 11 月 26 日， CloudXNS 产品 2.0 版本以全新的面貌上线，作为主要测试人之一的我因为对产品的熟悉程度较为全面，又比较关心产品的发展，在与 BOSS 的沟通下我转做了 CloudXNS 的产品运营。</p>
<p>然而，产品运营是什么，我一点头绪都没有。在网上找了一些产品和运营相关资料学习，然后观察优秀的互联网产品的运作方式。</p>
<p>我们尝试着做微博转发活动。 2 月携手牛盾上线 CDN ，微博转发获取体验名额，由于准备不足，大家都手忙脚乱。不过值得欣慰的是，活动带来了一小波的有效用户增长。</p>
<p>我们寻找着目标用户可能聚集的地方，尽可能多的让 CloudXNS 产品的名字出现在未来用户的眼睛里。 3 月我让 CloudXNS 闯进了 <a href="https://www.v2ex.com/t/176809" target="_blank" rel="noopener">V2EX</a>er 的视线，那两天大概是至目前止我们有效用户增长的最高峰吧。</p>
<p>听说每一个站长本身都是优秀的运营者，于是我做了一个站，用于体会下作为一个站长会抱有的心态。我以站长和 CloudXNS 产品运营的双重身份，结识了不少朋友，在此后的很长一段时间内，都与他们共同交流与进步，并且倾听到了不少来自用户对 CloudXNS 评价的声音。</p>
<a id="more"></a>
<hr>
<p>如今， CloudXNS 有效用户一直在稳步增长，而我却感觉很累很累。我的全力付出，虽然有所收获，但是感觉和付出并不成正比。我知道如果不想办法解决这个问题，这种不成正比的差距只会越拉越大。</p>
<p>为什么 dnspod 他们知名度那么高了，仍难以撼动万网解析量第一的地位？</p>
<p>为什么来 CloudXNS 的用户大多都是通过朋友介绍（或强行安利），而不是自己搜索过来的？</p>
<p>为什么相同的问题会从不同的人向技术支持反馈得到？</p>
<p>我想了很久，从 CloudXNS 产品和我的运营工作全面思考造成这些问题的所在。</p>
<p><strong>1. 我们在极力的告诉用户我们有什么，而不是去了解用户到底需要什么；</strong></p>
<p>我们的功能很多，基本上具备智能解析的所有优势，并且还有一些额外的好用功能。当我们兴高采烈的去告诉用户的时候，很多用户反馈给我们一个字“哦”。因为这些他们几乎用不上。</p>
<p><strong>2. 我们的思考点位和用户的点位不在一个平面；</strong></p>
<p>上周看了一篇文章：<a href="http://mp.weixin.qq.com/s/RRm1iuZIX8ByFNspvf7fLQ" target="_blank" rel="noopener">《文案分 2 种，一种是自嗨型，另一种是…》</a> 里面很多地方讲得很好，我们 CloudXNS 产品中也存在这种问题。也许我们在大谈特谈我们的优势在哪里的时候，别人还根本不知道 CloudXNS 是用来做什么的。</p>
<p><strong>3. 我们的产品和运营对用户的反馈还不够及时；</strong></p>
<p>因为前期的一直尝试寻找社区，以及和各种站长的交流，加之多个官方技术支持渠道，导致收集到的反馈可能是重复的。而如果这些反馈没有得到及时进行合理处理的话，就一定还会循环着困扰下去。</p>
<hr>
<p>也许我们该暂停一下脚步，尝试着以用户的角度去思考了。</p>
<p>假如我第一次接触 CloudXNS ，我想我得先知道 CloudXNS 是干什么的，它有些什么背景，与别的同类产品最大的不同点是什么，收费如何；了解了 CloudXNS 之后，我便会想知道这个产品如何使用，有没有相关的手册和文档，遇到疑问该如何查询和反馈；注册成为了用户之后，功能体验如何，客户服务怎样；成为熟识用户后，有没有什么优惠活动，客户回馈礼品之类。</p>
<p>而我们从一开始就把用户定位为已经了解 CloudXNS 的前提下了，我们优秀的功能体验和客户服务也就只能真正体验过的用户才知道了，这也大概就是为什么我们大多是通过朋友介绍来 CloudXNS 的原因。</p>
<p>如果我是新生代 90 后个人站长，那么我会更喜欢追求新鲜事物，这个新不仅体现在功能上，还有与时俱进的网站模式。哦当然，还有情怀。而如果我是企业的门户站长，我会希望在可承受的价格范围内 DNS 产品更稳定，解析效率更高，且便于多人协同工作。</p>
<p>为什么万网和 dnspod 会各占半壁江山？用万网的，很多都是因为不了解或者不需要智能 DNS ，剩下的大多是求稳定不想换或者不需要那么多新功能罢了。</p>
<p>要是使用中出现疑问，没有办法找到这个疑问的原因，那么就会放弃或者向技术支持求助。有些问题确实是我们产品中不予解决的，我们就要通过其他方式让用户去了解这一点。</p>
<hr>
<p>所以，我们接下来该做些什么样的改进呢？以下是个人愚见：</p>
<p><strong>产品方面</strong>：</p>
<ol>
<li>网站首页要能让人明白我们这个产品是干什么的，有些什么背景，有哪些优势，并明确给出“帮助中心”、“增值服务”、“开发者中心”的入口，以及我们各种官方的联系方式，可参考 <a href="https://sendcloud.sohu.com/" target="_blank" rel="noopener">SendCloud</a></li>
<li>改进错误提示信息，让普通用户能看懂</li>
<li>完善和推出 VIP 及增值服务，其实能建站的用户根本不差那几个钱，但是太高了就得斟酌下了。</li>
</ol>
<p><strong>运营方面</strong>：</p>
<ol>
<li>对于反馈较多的问题要做出及时响应，能以官方身份来向公众解释这个问题，以免用户对我们造成过多的滋扰，同时也方便此后技术支持回复</li>
<li>尽量退出各非官方的渠道和社群，有用户联系则指引其至官方渠道反馈</li>
<li>与客户接触时，多从客户角度了解对方需要什么，而我们正好拥有这个功能能通过某种方式解决他的需要，而不是强行将一个新功能塞给用户知道</li>
</ol>
<p>最后，衷心希望我们所有的用户都能看到我们这个产品的情怀，和这个产品的所有参与人的情怀，进而发现公司所有产品和人物的情怀。更美丽的界面会有的，更好用的功能不会丢的，更友好的客户服务一直存在着。</p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 产品运营 </tag>
            
            <tag> v2ex </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终于领证了！~]]></title>
      <url>https://ephen.me/2015/GetTestingCertificate/</url>
      <content type="html"><![CDATA[<p><strong>各位看官请注意：</strong></p>
<p><strong>此文章涉及本姑娘个人信息，文章公开代表逛到这里的人可以看，但并不代表我同意被传播。</strong></p>
<a id="more"></a>
<hr>
<p>去年下半年打酱油考了个软件评测师，竟然通过了。</p>
<p>不得不说国家单位效率低，到现在 5 月份证才做出来，然后必须工作日才能领。由于请假扣钱钱好心疼，所以在今天趁请假上医院看病的时间来领证…..QAQ…..地方真尼玛难找啊，破百度导航还给我指远路，坑爹。。</p>
<p>不过最后总算是领到啦。。话不多说，晒图！</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162715.png" alt="软件评测师证书封面"></p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162735.png" alt="软件评测师证书内页"></p>
<p>某些说我是伪娘的，泥萌垢了！！</p>
<hr>
<p><strong>未经允许，不得传播此文中图片及任何个人信息。</strong></p>
<p><strong>情节严重者，将追究其法律责任。</strong></p>
]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网站 API 测试工具： chrome 插件 - Postman]]></title>
      <url>https://ephen.me/2015/Postman/</url>
      <content type="html"><![CDATA[<h2 id="一、插件介绍"><a href="#一、插件介绍" class="headerlink" title="一、插件介绍"></a>一、插件介绍</h2><p>当你在调试一个网页是否运行正常时，除了简单地调试网页的 HTML 、 CSS 、脚本等信息之外，还需要检查网页能否正确处理各种 HTTP 请求。</p>
<p>网页的 HTTP 请求是网站与用户之间进行交互的非常重要的一种方式，在动态网站中，用户的大部分数据都需要通过 HTTP 请求来与服务器进行交互。</p>
<p>Postman 插件就充当着这种交互方式的“桥梁”，它可以利用 Chrome 插件的形式把各种模拟用户 HTTP 请求的数据发送到服务器，以便开发人员能够及时地作出正确的响应，或者是对产品发布之前的错误信息提前处理，进而保证产品上线之后的稳定性和安全性。</p>
<a id="more"></a>
<h2 id="二、插件安装"><a href="#二、插件安装" class="headerlink" title="二、插件安装"></a>二、插件安装</h2><p>用 chrome 浏览器并且能轻松绕过qiang的童鞋，可以直接通过应用商店搜索 Postman-REST-Client 来安装。</p>
<p>然而用 360 极速浏览器等 chrome 核心浏览器的、或者不想绕 qiang 的童鞋，可下载插件后使用开发者模式加载（有些插件可以直接将 crx 文件拖到浏览器便自动安装了，但是 postman 不行，拖进去会提示要前往应用商店下载，所以只能采用开发者模式安装）。以 chrome 为例，安装步骤如下：</p>
<ol>
<li>下载 Postman-REST-Client_v0.8.1.crx 扩展程序，<del>版本已更新，下载链接已失效，请自行上网搜索</del>；</li>
<li>修改 crx 后缀为 rar ，然后解压到指定文件夹，比如 <code>D:\crx\Postman-REST-Client_v0.8.1</code> ；</li>
<li>进入 <code>chrome://extensions/</code> 页，勾选右上角的“开发者模式”，点击“加载正在开发的扩展程序”按钮，载入上一步保存的文件夹，然后启用插件即可；</li>
</ol>
<h2 id="三、-API-测试"><a href="#三、-API-测试" class="headerlink" title="三、 API 测试"></a>三、 API 测试</h2><p>以 CloudXNS 的 API 版本 1.0 为例。<br><span style="font-size: 8pt; color: #800080;">『现在 CloudXNS 的 API 已经升级到2.0了，不日1.0会被废弃，请小伙伴们不要再尝试使用，同时注意更新自己已经在用的 API 版本代码。传送门：<a href="https://www.cloudxns.net/AccountManage/apimanage.html" target="_blank" rel="noopener">https://www.cloudxns.net/AccountManage/apimanage.html </a>，请登陆 CloudXNS 账户后访问。』</span></p>
<p>一张图描述各个区域的作用和测试方法：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162846.png" alt=" postman 各区域功能图解"></p>
<h2 id="四、保存配置"><a href="#四、保存配置" class="headerlink" title="四、保存配置"></a>四、保存配置</h2><p>经常测试的内容可以保存下来以后即可在左侧边栏“ collections ”中的列表一键调用。</p>
<p>保存很简单，点击测试时“ send ”按钮那排最右边的“ collection ”按钮即可。</p>
<p>如果是第一次保存，需要顺便创建一个 collection 文件夹。</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162940.png" alt="postman_addcollection 测试数据保存"></p>
<p>如果担心插件重装内容会丢失，或是想将自己的测试内容分享给同事使用，可以将 collection 导出成 json 文件或者上传到 postman 服务器提供分享链接。导入和导出操作入口如下：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426162959.png" alt="postman 测试数据导出备份"></p>
]]></content>
      
        <categories>
            
            <category> 工具介绍 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> postman </tag>
            
            <tag> api </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CloudXNS 中的 AX 记录类型测试]]></title>
      <url>https://ephen.me/2015/cloudxns-ax/</url>
      <content type="html"><![CDATA[<p><img src="https://pek3b.qingstor.com/imephen/20190426151836.png" alt="CloudXNS Logo"></p>
<h2 id="首先，简单介绍下-CloudXNS-中的-AX-记录类型："><a href="#首先，简单介绍下-CloudXNS-中的-AX-记录类型：" class="headerlink" title="首先，简单介绍下 CloudXNS 中的 AX 记录类型："></a>首先，简单介绍下 CloudXNS 中的 AX 记录类型：</h2><p>X 意为 eXtend ， AX 即表示扩展的 A 记录解析，具体表现为将多个 A 记录进行任意指定比例的负载均衡。我们知道， Local DNS 服务器集群会对用户的请求进行缓存，当您有多个 A 记录时，它会随机将这些缓存的 A 记录其中一条反馈给用户。这样我们就无法预估每个 ip 被用户请求到的数量，或许久而久之这些 ip 的访问量会被平均。而使用 CloudXNS 的 AX 记录，就能当有 Local DNS 对 CloudXNS 进行请求时，按照预设比例返回给它其中一个值传递给用户，而这个比例是由站长您自己来控制的。</p>
<a id="more"></a>
<h2 id="然后，开始测试："><a href="#然后，开始测试：" class="headerlink" title="然后，开始测试："></a>然后，开始测试：</h2><p>首先将 <code>www.chinatesters.cn</code> 域名在 CloudXNS 系统中做如下图所示配置：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426151910.png" alt="CloudXNS 解析配置"></p>
<p>优先级即代表预设比例，上图配置中表示记录值 <code>2.2.2.1</code> 、 <code>1.1.1.2</code> 和 <code>1.1.1.1</code> 出现的比例为 <code>30:100:50</code> 。灰姑娘写了个脚本通过多次执行同一个 <code>dig</code> 命令获取每个结果的出现次数。测试代码示例如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">i=0;</span><br><span class="line">rm -f .xtest_tmp.log</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$i</span> -lt <span class="variable">$1</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  dig www.chinatesters.cn @lv3ns4.ffdns.net +short &gt;&gt; .xtest_tmp.log</span><br><span class="line">  i=expr <span class="variable">$i</span> + 1</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">awk ‘&#123;name[<span class="variable">$1</span>]++&#125;;END&#123;<span class="keyword">for</span>(count <span class="keyword">in</span> name)<span class="built_in">print</span> count,name[count]&#125;’ .xtest_tmp.log</span><br></pre></td></tr></table></figure>
<p>将脚本带参数 200 ，表示执行 200 次命令。等待执行完毕后，得到结果如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost 02_mytest]<span class="comment"># ./xtest.sh 200</span></span><br><span class="line">2.2.2.1 38</span><br><span class="line">1.1.1.1 60</span><br><span class="line">1.1.1.2 102</span><br></pre></td></tr></table></figure>
<p>我们可以看到，与配置的 <code>30:50:100</code> 非常接近。经过多次测试之后就会发现，当 Local DNS 向 CloudXNS 请求次数越来越多时，这个值就越来越接近于配置值。因此，当您的网站有多个服务器但他们的硬件资源悬殊较大时，就可以采用 AX 记录将域名解析设置为不同的负载比例，以充分利用您现有的资源进行负载均衡。</p>
<p>同样的， CloudXNS 中的 CNAMEX 、 301 跳转、 302 跳转和隐式跳转记录中的优先级设置和上述 AX 记录设置是一样的效果，有需要的用户可以一试。</p>
]]></content>
      
        <categories>
            
            <category> 工作笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> DNS </tag>
            
            <tag> 测试 </tag>
            
            <tag> AX </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[win8 x64 + Oracle 11g 64 位下使用 PL/SQL Developer 的解决办法]]></title>
      <url>https://ephen.me/2015/win8x64-oracle-plsql/</url>
      <content type="html"><![CDATA[<p>win8 64 位操作系统在安装 Oracle 11g 和 PL/SQl 时有两个非常重要的坑！</p>
<p>一个是 Oracle 安装环境检测没有支持到 win8 会提示不符合系统要求的最低配置，另一个就是 PL/SQL 没有 x64 位的软件版本导致不能读取 Oracle x64 位客户端配置。</p>
<p>本文将通过巧妙的方式解决这两个问题。同时，市面上大多 SQL 客户端软件都没有 x64 位的版本（比如 Navicat ），也不能方便的和 Oracle x64 客户端一起使用，经测试也可以通过本文同样的方式解决。</p>
<a id="more"></a>
<h2 id="安装-Oracle-11g-64-位"><a href="#安装-Oracle-11g-64-位" class="headerlink" title="安装 Oracle 11g 64 位"></a>安装 Oracle 11g 64 位</h2><p>注意：<strong>不要安装在中文目录！！！</strong></p>
<ol>
<li>解压安装包，以管理员身份运行 cmd ；</li>
<li><code>cd</code> 到你解压安装文件的目录，运行 <code>setup.exe   -ignoreSysPrereqs</code> ；</li>
<li>提示不符合系统最低配置，选择仍然继续；</li>
<li>选“管理员模式”，安装成功；</li>
</ol>
<h2 id="32-位-Oracle-客户端文件合并到安装目录"><a href="#32-位-Oracle-客户端文件合并到安装目录" class="headerlink" title="32 位 Oracle 客户端文件合并到安装目录"></a>32 位 Oracle 客户端文件合并到安装目录</h2><ol>
<li>到官网下载一个 32 位的 instantclient 客户端到任意非中文目录安装好（如果以前装过 32 位客户端并且目录保留在机器上则跳过此步，也可以直接从别人电脑上拷贝这个已安装好的目录）；</li>
<li>将 32 位的 Oracle 客户端文件目录 client_1 移动到和 64 位目录一起，例如：</li>
</ol>
<blockquote>
<p>32 位客户端文件夹为 <code>E:\app\Cinderella\product\11.2.0\client_x86</code></p>
<p>64 位客户端文件夹位 <code>E:\app\Cinderella\product\11.2.0\client_1</code></p>
</blockquote>
<h2 id="安装PL-SQL-Developer"><a href="#安装PL-SQL-Developer" class="headerlink" title="安装PL/SQL Developer"></a>安装PL/SQL Developer</h2><h2 id="配置PL-SQL-Developer的OCI-Library和Oracle-Home"><a href="#配置PL-SQL-Developer的OCI-Library和Oracle-Home" class="headerlink" title="配置PL/SQL Developer的OCI Library和Oracle_Home"></a>配置PL/SQL Developer的OCI Library和Oracle_Home</h2><p>以上面的安装路径为例：</p>
<p>英文版： perference-&gt;Connection</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Oracle Home ： E:\app\Cinderella\product\11.2.0\client_x86</span><br><span class="line">OCI Library ： E:\app\Cinderella\product\11.2.0\client_x86\bin\oci.dll</span><br></pre></td></tr></table></figure>
<p>汉化版：工具 -&gt; 首选项 -&gt; 连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Oracle 主目录名（自动检测为空）： E:\app\Cinderella\product\11.2.0\client_x86</span><br><span class="line">OCI 库（自动检测为空） ： E:\app\Cinderella\product\11.2.0\client_x86\bin\oci.dll</span><br></pre></td></tr></table></figure>
<h2 id="设置操作系统环境变量"><a href="#设置操作系统环境变量" class="headerlink" title="设置操作系统环境变量"></a>设置操作系统环境变量</h2><ol>
<li>右击”我的电脑” - “属性” - “高级系统设置” - “环境变量” ，可以看到上面是“用户环境变量”，下面是“系统环境变量”；</li>
<li>在“系统环境变量”中找到 Path ，将 <code>E:\app\Cinderella\product\11.2.0\client_x86;</code> 添加到最前面（<strong>有分号</strong>）；</li>
<li>“系统环境变量”中点击”新建”, 变量名设置为 <code>TNS_ADMIN</code> , 变量值设置为 <code>E:\app\Cinderella\product\11.2.0\client_x86\NETWORK\ADMIN</code> , 点击”确定”（<strong>无分号</strong>）；</li>
<li>“系统环境变量”中点击”新建”, 变量名设置为 <code>NLS_LANG</code> , 变量值设置为 <code>SIMPLIFIED CHINESE_CHINA.ZHS16GBK</code> , 点击“确定”；</li>
<li>设置完成，启动 PL/SQL Developer ，运行无问题。</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 工作笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Win8 </tag>
            
            <tag> PL/SQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[桥接模式下如何设置虚拟机和本机在同一网段]]></title>
      <url>https://ephen.me/2015/VmwareNetSet/</url>
      <content type="html"><![CDATA[<ol>
<li>打开 VMware 软件，开启要设置的虚拟机，用 root 用户登录；</li>
<li>点击 VMware 软件菜单栏上“虚拟机”—&gt;“设置”—&gt;“网络适配器”，选择“桥接模式”（默认是“ NAT 模式”）；</li>
<li>进入 Linux 虚拟机修改网卡设置：</li>
</ol>
<h3 id="方法一，使用图形界面修改"><a href="#方法一，使用图形界面修改" class="headerlink" title="方法一，使用图形界面修改"></a>方法一，使用图形界面修改</h3><a id="more"></a>
<p>1 . 桌面右击 <code>open in terminal`</code>，输入 setup 命令后回车；<br>2 . 通过键盘上下键选择 <code>Network Configuration</code>， Tab 到 <code>Run tool</code> 后回车；<br>3 . <code>Device Configuration</code> 高亮回车，选择要设置的网卡（一般虚拟机只有一个网卡）后回车，进入 ip 设置界面；<br>4 . 默认情况下 <code>Use DHCP</code> 是自动获取，图形界面上展示为 <code>*</code>，下面的静态 IP 不能进行设置。如下图：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426161737.png" alt="虚拟网卡图形界面配置"></p>
<p>5 . 将光标移动到 <code>Use DHCP</code> 的<code>[*]</code>上，点击空格键，即可开始设置下面的静态 IP；<br>6 . 查看本机（连到路由器上的网络而非虚拟网络）的 ip 设置，将虚拟客户机 Linux 设置成一样即可（除 IP 外， IP 设置到同一网段）；如下图：</p>
<p><img src="https://pek3b.qingstor.com/imephen/20190426161803.png" alt="本机 IP 设置"><img src="https://pek3b.qingstor.com/imephen/20190426161823.png" alt="虚拟机IP设置"></p>
<p>7 . Tab 到 <code>Save</code> 、 <code>Save&amp;Quit</code> 保存本次设置；</p>
<h3 id="方法二，修改网卡配置文件"><a href="#方法二，修改网卡配置文件" class="headerlink" title="方法二，修改网卡配置文件"></a>方法二，修改网卡配置文件</h3><p>1 . 桌面右击 <code>open in terminal</code> ，输入 <code>setup</code> 命令后回车；<br>2 . 一般虚拟机网卡是 eth0 ，修改文件 <code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0   <span class="comment">#描述网卡对应的设备别名，例如 ifcfg-eth0 的文件中它为 eth0</span></span><br><span class="line">BOOTPROTO=static    <span class="comment">#设置网卡获得 ip 地址的方式，可能的选项为 static/dhcp/bootp （分别对应静态指定的 ip 地址 / 通过 dhcp 协议获得的 ip 地址 / bootp 协议获得的 ip 地址）</span></span><br><span class="line">BROADCAST=192.168.0.255   <span class="comment">#对应的子网广播地址</span></span><br><span class="line">HWADDR=00:07:E9:05:E8:B4    <span class="comment">#对应的网卡物理地址</span></span><br><span class="line">IPADDR=192.168.14.120   <span class="comment">#如果设置网卡获得 ip 地址的方式为静态指定，此字段就指定了网卡对应的ip地址</span></span><br><span class="line">IPV6INIT=no</span><br><span class="line">IPV6_AUTOCONF=no</span><br><span class="line">NETMASK=255.255.255.0   <span class="comment">#网卡对应的网络掩码</span></span><br><span class="line">NETWORK=192.168.0.0   <span class="comment">#网卡对应的网络地址</span></span><br><span class="line">ONBOOT=yes    <span class="comment">#系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备</span></span><br></pre></td></tr></table></figure>
<p>3 . 修改对应网卡的网关的配置文件 <code>vi /etc/sysconfig/network</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes    <span class="comment">#系统是否使用网络（一般设置为 yes 。如果设为 no ，则不能使用网络，而且很多系统服务程序将无法启）</span></span><br><span class="line">HOSTNAME=localhost    <span class="comment">#本机的主机名（这里设置的主机名要和 /etc/hosts 中设置的主机名对应）</span></span><br><span class="line">GATEWAY=192.168.14.1    <span class="comment">#本机连接的网关 IP 地址</span></span><br></pre></td></tr></table></figure>
<p>4 . 重启网卡或重启机器以应用上述修改。</p>
<h3 id="重启网卡方式"><a href="#重启网卡方式" class="headerlink" title="重启网卡方式"></a>重启网卡方式</h3><p>（以 eth0 为例）：先关闭（命令： <code>ifdown eth0</code> ），再开启（命令： <code>ifup eth0</code> ）</p>
]]></content>
      
        <categories>
            
            <category> 工作笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Vmware </tag>
            
            <tag> Network </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[怎么避免无效的软件测试场景？]]></title>
      <url>https://ephen.me/2015/InvoidOfInvalidCase/</url>
      <content type="html"><![CDATA[<p>博主最近在知乎上赚点赞，随便进了一个问题随便的回答了下。</p>
<p>原文链接：<a href="https://www.zhihu.com/question/28911306/answer/42860809" target="_blank" rel="noopener">https://www.zhihu.com/question/28911306/answer/42860809</a> （欢迎小伙伴飘过去点个赞！~）</p>
<p>为了不让博客太空旷，遂搬来这里。回答仅是个人见解，有其他想法或是说得不对的地方请留言讨论。</p>
<p>以下是原问题以及我的回答。</p>
<a id="more"></a>
<blockquote>
<h2 id="怎么避免无效的软件测试场景？"><a href="#怎么避免无效的软件测试场景？" class="headerlink" title="怎么避免无效的软件测试场景？"></a>怎么避免无效的软件测试场景？</h2></blockquote>
<blockquote>
<p>很多时候，我们测试的时候会考虑方方面面的问题，这固然好，有足够的覆盖，但往往发现有些朋友设计的时候，很多case其实是完全可以避免的，或者不可能发生的场景，有些是即使发生了，对客户也没任何影响，有人有类似的总结吗？比如怎么避免无效场景。</p>
</blockquote>
<p><strong>辛德瑞拉CiCi：</strong></p>
<p>软件测试本来就是会假定所有情况都有可能存在的，在单元测试中需要对代码的每一个逻辑条件进行测试，集成测试也是需要对每一个组件逻辑进行测试，只要是逻辑存在的那么都是有效的，每一个逻辑错误都有可能成为软件缺陷的根源。</p>
<p>只有在α和β测试中会更考虑实际的使用情况，但这些的前提是已经对整个产品进行过全面的单元测试、集成测试、系统测试的情况下。</p>
<p>对于撸主的问题，不妨拆解为以下两个问题。</p>
<ol>
<li>如何尽可能少的设计用例覆盖尽可能多的测试面？</li>
<li>如何全面理解用户需求，做好用户测试？ （都是从用户测试的层面来说的，单元测试、集成测试、系统测试的请忽略）</li>
</ol>
<h3 id="第一个问题，可以从以下几个方面改进"><a href="#第一个问题，可以从以下几个方面改进" class="headerlink" title="第一个问题，可以从以下几个方面改进"></a>第一个问题，可以从以下几个方面改进</h3><ol>
<li>了解被测软件的业务逻辑，根据场景业务逻辑线设计用例。全部用例结合到一起，尽可能保证让每一个业务逻辑分支被覆盖到至少一次。</li>
<li>用例设计完后与相关业务人员进行用例评审，发起评审时提前让大家看一下，并提示主要关注用例预置条件和预期结果是否正确、用例是否有错漏或冗余。</li>
<li>执行用例时先挑出最可能发现问题的用例做冒烟测试（也就是场景评级），而且冒烟过程中你也会发现会有其他需要修改的地方。</li>
</ol>
<h3 id="第二个问题，属于用户感知层面的。如果你实在假装用户做不到，那么不妨自己做一个真用户，看看是不是会发现不一样的东西。"><a href="#第二个问题，属于用户感知层面的。如果你实在假装用户做不到，那么不妨自己做一个真用户，看看是不是会发现不一样的东西。" class="headerlink" title="第二个问题，属于用户感知层面的。如果你实在假装用户做不到，那么不妨自己做一个真用户，看看是不是会发现不一样的东西。"></a>第二个问题，属于用户感知层面的。如果你实在假装用户做不到，那么不妨自己做一个真用户，看看是不是会发现不一样的东西。</h3>]]></content>
      
        <categories>
            
            <category> 心情驿站 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
